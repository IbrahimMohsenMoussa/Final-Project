
ctrlMCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00004274  00004308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000b8  008000b8  00004360  2**0
                  ALLOC
  3 .stab         00004a64  00000000  00000000  00004360  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004867  00000000  00000000  00008dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000d62b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000d78b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000d91a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000f95f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00010a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000119e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00011b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00011e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000126b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__ctors_end>
       4:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
       8:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
       c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      10:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <__vector_4>
      14:	0c 94 87 10 	jmp	0x210e	; 0x210e <__vector_5>
      18:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <__vector_6>
      1c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      20:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      24:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      28:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__vector_10>
      2c:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <__vector_11>
      30:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      34:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      38:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      3c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      40:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      44:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      48:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      4c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>
      50:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__bad_interrupt>

00000054 <ioPins>:
      54:	39 00 3b 00 3a 00 00 39 00 3b 00 3a 00 01 39 00     9.;.:..9.;.:..9.
      64:	3b 00 3a 00 02 39 00 3b 00 3a 00 03 39 00 3b 00     ;.:..9.;.:..9.;.
      74:	3a 00 04 39 00 3b 00 3a 00 05 39 00 3b 00 3a 00     :..9.;.:..9.;.:.
      84:	06 39 00 3b 00 3a 00 07 36 00 38 00 37 00 00 36     .9.;.:..6.8.7..6
      94:	00 38 00 37 00 01 36 00 38 00 37 00 02 36 00 38     .8.7..6.8.7..6.8
      a4:	00 37 00 03 36 00 38 00 37 00 04 36 00 38 00 37     .7..6.8.7..6.8.7
      b4:	00 05 36 00 38 00 37 00 06 36 00 38 00 37 00 07     ..6.8.7..6.8.7..
      c4:	33 00 35 00 34 00 00 33 00 35 00 34 00 01 33 00     3.5.4..3.5.4..3.
      d4:	35 00 34 00 02 33 00 35 00 34 00 03 33 00 35 00     5.4..3.5.4..3.5.
      e4:	34 00 04 33 00 35 00 34 00 05 33 00 35 00 34 00     4..3.5.4..3.5.4.
      f4:	06 33 00 35 00 34 00 07 30 00 32 00 31 00 00 30     .3.5.4..0.2.1..0
     104:	00 32 00 31 00 01 30 00 32 00 31 00 02 30 00 32     .2.1..0.2.1..0.2
     114:	00 31 00 03 30 00 32 00 31 00 04 30 00 32 00 31     .1..0.2.1..0.2.1
     124:	00 05 30 00 32 00 31 00 06 30 00 32 00 31 00 07     ..0.2.1..0.2.1..

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf e5       	ldi	r28, 0x5F	; 95
     13a:	d8 e0       	ldi	r29, 0x08	; 8
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61

00000140 <__do_copy_data>:
     140:	10 e0       	ldi	r17, 0x00	; 0
     142:	a0 e6       	ldi	r26, 0x60	; 96
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	e4 e7       	ldi	r30, 0x74	; 116
     148:	f2 e4       	ldi	r31, 0x42	; 66
     14a:	02 c0       	rjmp	.+4      	; 0x150 <.do_copy_data_start>

0000014c <.do_copy_data_loop>:
     14c:	05 90       	lpm	r0, Z+
     14e:	0d 92       	st	X+, r0

00000150 <.do_copy_data_start>:
     150:	a8 3b       	cpi	r26, 0xB8	; 184
     152:	b1 07       	cpc	r27, r17
     154:	d9 f7       	brne	.-10     	; 0x14c <.do_copy_data_loop>

00000156 <__do_clear_bss>:
     156:	10 e0       	ldi	r17, 0x00	; 0
     158:	a8 eb       	ldi	r26, 0xB8	; 184
     15a:	b0 e0       	ldi	r27, 0x00	; 0
     15c:	01 c0       	rjmp	.+2      	; 0x160 <.do_clear_bss_start>

0000015e <.do_clear_bss_loop>:
     15e:	1d 92       	st	X+, r1

00000160 <.do_clear_bss_start>:
     160:	ac 3c       	cpi	r26, 0xCC	; 204
     162:	b1 07       	cpc	r27, r17
     164:	e1 f7       	brne	.-8      	; 0x15e <.do_clear_bss_loop>
     166:	0e 94 15 20 	call	0x402a	; 0x402a <main>
     16a:	0c 94 38 21 	jmp	0x4270	; 0x4270 <_exit>

0000016e <__bad_interrupt>:
     16e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000172 <__fixunssfsi>:
     172:	ef 92       	push	r14
     174:	ff 92       	push	r15
     176:	0f 93       	push	r16
     178:	1f 93       	push	r17
     17a:	7b 01       	movw	r14, r22
     17c:	8c 01       	movw	r16, r24
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	40 e0       	ldi	r20, 0x00	; 0
     184:	5f e4       	ldi	r21, 0x4F	; 79
     186:	0e 94 65 04 	call	0x8ca	; 0x8ca <__gesf2>
     18a:	88 23       	and	r24, r24
     18c:	8c f0       	brlt	.+34     	; 0x1b0 <__fixunssfsi+0x3e>
     18e:	c8 01       	movw	r24, r16
     190:	b7 01       	movw	r22, r14
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	5f e4       	ldi	r21, 0x4F	; 79
     19a:	0e 94 31 02 	call	0x462	; 0x462 <__subsf3>
     19e:	0e 94 c5 04 	call	0x98a	; 0x98a <__fixsfsi>
     1a2:	9b 01       	movw	r18, r22
     1a4:	ac 01       	movw	r20, r24
     1a6:	20 50       	subi	r18, 0x00	; 0
     1a8:	30 40       	sbci	r19, 0x00	; 0
     1aa:	40 40       	sbci	r20, 0x00	; 0
     1ac:	50 48       	sbci	r21, 0x80	; 128
     1ae:	06 c0       	rjmp	.+12     	; 0x1bc <__fixunssfsi+0x4a>
     1b0:	c8 01       	movw	r24, r16
     1b2:	b7 01       	movw	r22, r14
     1b4:	0e 94 c5 04 	call	0x98a	; 0x98a <__fixsfsi>
     1b8:	9b 01       	movw	r18, r22
     1ba:	ac 01       	movw	r20, r24
     1bc:	b9 01       	movw	r22, r18
     1be:	ca 01       	movw	r24, r20
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	ff 90       	pop	r15
     1c6:	ef 90       	pop	r14
     1c8:	08 95       	ret

000001ca <_fpadd_parts>:
     1ca:	a0 e0       	ldi	r26, 0x00	; 0
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	eb ee       	ldi	r30, 0xEB	; 235
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <__prologue_saves__>
     1d6:	dc 01       	movw	r26, r24
     1d8:	2b 01       	movw	r4, r22
     1da:	fa 01       	movw	r30, r20
     1dc:	9c 91       	ld	r25, X
     1de:	92 30       	cpi	r25, 0x02	; 2
     1e0:	08 f4       	brcc	.+2      	; 0x1e4 <_fpadd_parts+0x1a>
     1e2:	39 c1       	rjmp	.+626    	; 0x456 <_fpadd_parts+0x28c>
     1e4:	eb 01       	movw	r28, r22
     1e6:	88 81       	ld	r24, Y
     1e8:	82 30       	cpi	r24, 0x02	; 2
     1ea:	08 f4       	brcc	.+2      	; 0x1ee <_fpadd_parts+0x24>
     1ec:	33 c1       	rjmp	.+614    	; 0x454 <_fpadd_parts+0x28a>
     1ee:	94 30       	cpi	r25, 0x04	; 4
     1f0:	69 f4       	brne	.+26     	; 0x20c <_fpadd_parts+0x42>
     1f2:	84 30       	cpi	r24, 0x04	; 4
     1f4:	09 f0       	breq	.+2      	; 0x1f8 <_fpadd_parts+0x2e>
     1f6:	2f c1       	rjmp	.+606    	; 0x456 <_fpadd_parts+0x28c>
     1f8:	11 96       	adiw	r26, 0x01	; 1
     1fa:	9c 91       	ld	r25, X
     1fc:	11 97       	sbiw	r26, 0x01	; 1
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	98 17       	cp	r25, r24
     202:	09 f4       	brne	.+2      	; 0x206 <_fpadd_parts+0x3c>
     204:	28 c1       	rjmp	.+592    	; 0x456 <_fpadd_parts+0x28c>
     206:	a9 e9       	ldi	r26, 0x99	; 153
     208:	b0 e0       	ldi	r27, 0x00	; 0
     20a:	25 c1       	rjmp	.+586    	; 0x456 <_fpadd_parts+0x28c>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f4       	brne	.+2      	; 0x212 <_fpadd_parts+0x48>
     210:	21 c1       	rjmp	.+578    	; 0x454 <_fpadd_parts+0x28a>
     212:	82 30       	cpi	r24, 0x02	; 2
     214:	a9 f4       	brne	.+42     	; 0x240 <_fpadd_parts+0x76>
     216:	92 30       	cpi	r25, 0x02	; 2
     218:	09 f0       	breq	.+2      	; 0x21c <_fpadd_parts+0x52>
     21a:	1d c1       	rjmp	.+570    	; 0x456 <_fpadd_parts+0x28c>
     21c:	9a 01       	movw	r18, r20
     21e:	ad 01       	movw	r20, r26
     220:	88 e0       	ldi	r24, 0x08	; 8
     222:	ea 01       	movw	r28, r20
     224:	09 90       	ld	r0, Y+
     226:	ae 01       	movw	r20, r28
     228:	e9 01       	movw	r28, r18
     22a:	09 92       	st	Y+, r0
     22c:	9e 01       	movw	r18, r28
     22e:	81 50       	subi	r24, 0x01	; 1
     230:	c1 f7       	brne	.-16     	; 0x222 <_fpadd_parts+0x58>
     232:	e2 01       	movw	r28, r4
     234:	89 81       	ldd	r24, Y+1	; 0x01
     236:	11 96       	adiw	r26, 0x01	; 1
     238:	9c 91       	ld	r25, X
     23a:	89 23       	and	r24, r25
     23c:	81 83       	std	Z+1, r24	; 0x01
     23e:	08 c1       	rjmp	.+528    	; 0x450 <_fpadd_parts+0x286>
     240:	92 30       	cpi	r25, 0x02	; 2
     242:	09 f4       	brne	.+2      	; 0x246 <_fpadd_parts+0x7c>
     244:	07 c1       	rjmp	.+526    	; 0x454 <_fpadd_parts+0x28a>
     246:	12 96       	adiw	r26, 0x02	; 2
     248:	2d 90       	ld	r2, X+
     24a:	3c 90       	ld	r3, X
     24c:	13 97       	sbiw	r26, 0x03	; 3
     24e:	eb 01       	movw	r28, r22
     250:	8a 81       	ldd	r24, Y+2	; 0x02
     252:	9b 81       	ldd	r25, Y+3	; 0x03
     254:	14 96       	adiw	r26, 0x04	; 4
     256:	ad 90       	ld	r10, X+
     258:	bd 90       	ld	r11, X+
     25a:	cd 90       	ld	r12, X+
     25c:	dc 90       	ld	r13, X
     25e:	17 97       	sbiw	r26, 0x07	; 7
     260:	ec 80       	ldd	r14, Y+4	; 0x04
     262:	fd 80       	ldd	r15, Y+5	; 0x05
     264:	0e 81       	ldd	r16, Y+6	; 0x06
     266:	1f 81       	ldd	r17, Y+7	; 0x07
     268:	91 01       	movw	r18, r2
     26a:	28 1b       	sub	r18, r24
     26c:	39 0b       	sbc	r19, r25
     26e:	b9 01       	movw	r22, r18
     270:	37 ff       	sbrs	r19, 7
     272:	04 c0       	rjmp	.+8      	; 0x27c <_fpadd_parts+0xb2>
     274:	66 27       	eor	r22, r22
     276:	77 27       	eor	r23, r23
     278:	62 1b       	sub	r22, r18
     27a:	73 0b       	sbc	r23, r19
     27c:	60 32       	cpi	r22, 0x20	; 32
     27e:	71 05       	cpc	r23, r1
     280:	0c f0       	brlt	.+2      	; 0x284 <_fpadd_parts+0xba>
     282:	61 c0       	rjmp	.+194    	; 0x346 <_fpadd_parts+0x17c>
     284:	12 16       	cp	r1, r18
     286:	13 06       	cpc	r1, r19
     288:	6c f5       	brge	.+90     	; 0x2e4 <_fpadd_parts+0x11a>
     28a:	37 01       	movw	r6, r14
     28c:	48 01       	movw	r8, r16
     28e:	06 2e       	mov	r0, r22
     290:	04 c0       	rjmp	.+8      	; 0x29a <_fpadd_parts+0xd0>
     292:	96 94       	lsr	r9
     294:	87 94       	ror	r8
     296:	77 94       	ror	r7
     298:	67 94       	ror	r6
     29a:	0a 94       	dec	r0
     29c:	d2 f7       	brpl	.-12     	; 0x292 <_fpadd_parts+0xc8>
     29e:	21 e0       	ldi	r18, 0x01	; 1
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <_fpadd_parts+0xe6>
     2a8:	22 0f       	add	r18, r18
     2aa:	33 1f       	adc	r19, r19
     2ac:	44 1f       	adc	r20, r20
     2ae:	55 1f       	adc	r21, r21
     2b0:	6a 95       	dec	r22
     2b2:	d2 f7       	brpl	.-12     	; 0x2a8 <_fpadd_parts+0xde>
     2b4:	21 50       	subi	r18, 0x01	; 1
     2b6:	30 40       	sbci	r19, 0x00	; 0
     2b8:	40 40       	sbci	r20, 0x00	; 0
     2ba:	50 40       	sbci	r21, 0x00	; 0
     2bc:	2e 21       	and	r18, r14
     2be:	3f 21       	and	r19, r15
     2c0:	40 23       	and	r20, r16
     2c2:	51 23       	and	r21, r17
     2c4:	21 15       	cp	r18, r1
     2c6:	31 05       	cpc	r19, r1
     2c8:	41 05       	cpc	r20, r1
     2ca:	51 05       	cpc	r21, r1
     2cc:	21 f0       	breq	.+8      	; 0x2d6 <_fpadd_parts+0x10c>
     2ce:	21 e0       	ldi	r18, 0x01	; 1
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	79 01       	movw	r14, r18
     2d8:	8a 01       	movw	r16, r20
     2da:	e6 28       	or	r14, r6
     2dc:	f7 28       	or	r15, r7
     2de:	08 29       	or	r16, r8
     2e0:	19 29       	or	r17, r9
     2e2:	3c c0       	rjmp	.+120    	; 0x35c <_fpadd_parts+0x192>
     2e4:	23 2b       	or	r18, r19
     2e6:	d1 f1       	breq	.+116    	; 0x35c <_fpadd_parts+0x192>
     2e8:	26 0e       	add	r2, r22
     2ea:	37 1e       	adc	r3, r23
     2ec:	35 01       	movw	r6, r10
     2ee:	46 01       	movw	r8, r12
     2f0:	06 2e       	mov	r0, r22
     2f2:	04 c0       	rjmp	.+8      	; 0x2fc <_fpadd_parts+0x132>
     2f4:	96 94       	lsr	r9
     2f6:	87 94       	ror	r8
     2f8:	77 94       	ror	r7
     2fa:	67 94       	ror	r6
     2fc:	0a 94       	dec	r0
     2fe:	d2 f7       	brpl	.-12     	; 0x2f4 <_fpadd_parts+0x12a>
     300:	21 e0       	ldi	r18, 0x01	; 1
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	50 e0       	ldi	r21, 0x00	; 0
     308:	04 c0       	rjmp	.+8      	; 0x312 <_fpadd_parts+0x148>
     30a:	22 0f       	add	r18, r18
     30c:	33 1f       	adc	r19, r19
     30e:	44 1f       	adc	r20, r20
     310:	55 1f       	adc	r21, r21
     312:	6a 95       	dec	r22
     314:	d2 f7       	brpl	.-12     	; 0x30a <_fpadd_parts+0x140>
     316:	21 50       	subi	r18, 0x01	; 1
     318:	30 40       	sbci	r19, 0x00	; 0
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	50 40       	sbci	r21, 0x00	; 0
     31e:	2a 21       	and	r18, r10
     320:	3b 21       	and	r19, r11
     322:	4c 21       	and	r20, r12
     324:	5d 21       	and	r21, r13
     326:	21 15       	cp	r18, r1
     328:	31 05       	cpc	r19, r1
     32a:	41 05       	cpc	r20, r1
     32c:	51 05       	cpc	r21, r1
     32e:	21 f0       	breq	.+8      	; 0x338 <_fpadd_parts+0x16e>
     330:	21 e0       	ldi	r18, 0x01	; 1
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	40 e0       	ldi	r20, 0x00	; 0
     336:	50 e0       	ldi	r21, 0x00	; 0
     338:	59 01       	movw	r10, r18
     33a:	6a 01       	movw	r12, r20
     33c:	a6 28       	or	r10, r6
     33e:	b7 28       	or	r11, r7
     340:	c8 28       	or	r12, r8
     342:	d9 28       	or	r13, r9
     344:	0b c0       	rjmp	.+22     	; 0x35c <_fpadd_parts+0x192>
     346:	82 15       	cp	r24, r2
     348:	93 05       	cpc	r25, r3
     34a:	2c f0       	brlt	.+10     	; 0x356 <_fpadd_parts+0x18c>
     34c:	1c 01       	movw	r2, r24
     34e:	aa 24       	eor	r10, r10
     350:	bb 24       	eor	r11, r11
     352:	65 01       	movw	r12, r10
     354:	03 c0       	rjmp	.+6      	; 0x35c <_fpadd_parts+0x192>
     356:	ee 24       	eor	r14, r14
     358:	ff 24       	eor	r15, r15
     35a:	87 01       	movw	r16, r14
     35c:	11 96       	adiw	r26, 0x01	; 1
     35e:	9c 91       	ld	r25, X
     360:	d2 01       	movw	r26, r4
     362:	11 96       	adiw	r26, 0x01	; 1
     364:	8c 91       	ld	r24, X
     366:	98 17       	cp	r25, r24
     368:	09 f4       	brne	.+2      	; 0x36c <_fpadd_parts+0x1a2>
     36a:	45 c0       	rjmp	.+138    	; 0x3f6 <_fpadd_parts+0x22c>
     36c:	99 23       	and	r25, r25
     36e:	39 f0       	breq	.+14     	; 0x37e <_fpadd_parts+0x1b4>
     370:	a8 01       	movw	r20, r16
     372:	97 01       	movw	r18, r14
     374:	2a 19       	sub	r18, r10
     376:	3b 09       	sbc	r19, r11
     378:	4c 09       	sbc	r20, r12
     37a:	5d 09       	sbc	r21, r13
     37c:	06 c0       	rjmp	.+12     	; 0x38a <_fpadd_parts+0x1c0>
     37e:	a6 01       	movw	r20, r12
     380:	95 01       	movw	r18, r10
     382:	2e 19       	sub	r18, r14
     384:	3f 09       	sbc	r19, r15
     386:	40 0b       	sbc	r20, r16
     388:	51 0b       	sbc	r21, r17
     38a:	57 fd       	sbrc	r21, 7
     38c:	08 c0       	rjmp	.+16     	; 0x39e <_fpadd_parts+0x1d4>
     38e:	11 82       	std	Z+1, r1	; 0x01
     390:	33 82       	std	Z+3, r3	; 0x03
     392:	22 82       	std	Z+2, r2	; 0x02
     394:	24 83       	std	Z+4, r18	; 0x04
     396:	35 83       	std	Z+5, r19	; 0x05
     398:	46 83       	std	Z+6, r20	; 0x06
     39a:	57 83       	std	Z+7, r21	; 0x07
     39c:	1d c0       	rjmp	.+58     	; 0x3d8 <_fpadd_parts+0x20e>
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	81 83       	std	Z+1, r24	; 0x01
     3a2:	33 82       	std	Z+3, r3	; 0x03
     3a4:	22 82       	std	Z+2, r2	; 0x02
     3a6:	88 27       	eor	r24, r24
     3a8:	99 27       	eor	r25, r25
     3aa:	dc 01       	movw	r26, r24
     3ac:	82 1b       	sub	r24, r18
     3ae:	93 0b       	sbc	r25, r19
     3b0:	a4 0b       	sbc	r26, r20
     3b2:	b5 0b       	sbc	r27, r21
     3b4:	84 83       	std	Z+4, r24	; 0x04
     3b6:	95 83       	std	Z+5, r25	; 0x05
     3b8:	a6 83       	std	Z+6, r26	; 0x06
     3ba:	b7 83       	std	Z+7, r27	; 0x07
     3bc:	0d c0       	rjmp	.+26     	; 0x3d8 <_fpadd_parts+0x20e>
     3be:	22 0f       	add	r18, r18
     3c0:	33 1f       	adc	r19, r19
     3c2:	44 1f       	adc	r20, r20
     3c4:	55 1f       	adc	r21, r21
     3c6:	24 83       	std	Z+4, r18	; 0x04
     3c8:	35 83       	std	Z+5, r19	; 0x05
     3ca:	46 83       	std	Z+6, r20	; 0x06
     3cc:	57 83       	std	Z+7, r21	; 0x07
     3ce:	82 81       	ldd	r24, Z+2	; 0x02
     3d0:	93 81       	ldd	r25, Z+3	; 0x03
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	93 83       	std	Z+3, r25	; 0x03
     3d6:	82 83       	std	Z+2, r24	; 0x02
     3d8:	24 81       	ldd	r18, Z+4	; 0x04
     3da:	35 81       	ldd	r19, Z+5	; 0x05
     3dc:	46 81       	ldd	r20, Z+6	; 0x06
     3de:	57 81       	ldd	r21, Z+7	; 0x07
     3e0:	da 01       	movw	r26, r20
     3e2:	c9 01       	movw	r24, r18
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	a1 09       	sbc	r26, r1
     3e8:	b1 09       	sbc	r27, r1
     3ea:	8f 5f       	subi	r24, 0xFF	; 255
     3ec:	9f 4f       	sbci	r25, 0xFF	; 255
     3ee:	af 4f       	sbci	r26, 0xFF	; 255
     3f0:	bf 43       	sbci	r27, 0x3F	; 63
     3f2:	28 f3       	brcs	.-54     	; 0x3be <_fpadd_parts+0x1f4>
     3f4:	0b c0       	rjmp	.+22     	; 0x40c <_fpadd_parts+0x242>
     3f6:	91 83       	std	Z+1, r25	; 0x01
     3f8:	33 82       	std	Z+3, r3	; 0x03
     3fa:	22 82       	std	Z+2, r2	; 0x02
     3fc:	ea 0c       	add	r14, r10
     3fe:	fb 1c       	adc	r15, r11
     400:	0c 1d       	adc	r16, r12
     402:	1d 1d       	adc	r17, r13
     404:	e4 82       	std	Z+4, r14	; 0x04
     406:	f5 82       	std	Z+5, r15	; 0x05
     408:	06 83       	std	Z+6, r16	; 0x06
     40a:	17 83       	std	Z+7, r17	; 0x07
     40c:	83 e0       	ldi	r24, 0x03	; 3
     40e:	80 83       	st	Z, r24
     410:	24 81       	ldd	r18, Z+4	; 0x04
     412:	35 81       	ldd	r19, Z+5	; 0x05
     414:	46 81       	ldd	r20, Z+6	; 0x06
     416:	57 81       	ldd	r21, Z+7	; 0x07
     418:	57 ff       	sbrs	r21, 7
     41a:	1a c0       	rjmp	.+52     	; 0x450 <_fpadd_parts+0x286>
     41c:	c9 01       	movw	r24, r18
     41e:	aa 27       	eor	r26, r26
     420:	97 fd       	sbrc	r25, 7
     422:	a0 95       	com	r26
     424:	ba 2f       	mov	r27, r26
     426:	81 70       	andi	r24, 0x01	; 1
     428:	90 70       	andi	r25, 0x00	; 0
     42a:	a0 70       	andi	r26, 0x00	; 0
     42c:	b0 70       	andi	r27, 0x00	; 0
     42e:	56 95       	lsr	r21
     430:	47 95       	ror	r20
     432:	37 95       	ror	r19
     434:	27 95       	ror	r18
     436:	82 2b       	or	r24, r18
     438:	93 2b       	or	r25, r19
     43a:	a4 2b       	or	r26, r20
     43c:	b5 2b       	or	r27, r21
     43e:	84 83       	std	Z+4, r24	; 0x04
     440:	95 83       	std	Z+5, r25	; 0x05
     442:	a6 83       	std	Z+6, r26	; 0x06
     444:	b7 83       	std	Z+7, r27	; 0x07
     446:	82 81       	ldd	r24, Z+2	; 0x02
     448:	93 81       	ldd	r25, Z+3	; 0x03
     44a:	01 96       	adiw	r24, 0x01	; 1
     44c:	93 83       	std	Z+3, r25	; 0x03
     44e:	82 83       	std	Z+2, r24	; 0x02
     450:	df 01       	movw	r26, r30
     452:	01 c0       	rjmp	.+2      	; 0x456 <_fpadd_parts+0x28c>
     454:	d2 01       	movw	r26, r4
     456:	cd 01       	movw	r24, r26
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
     45c:	e2 e1       	ldi	r30, 0x12	; 18
     45e:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <__epilogue_restores__>

00000462 <__subsf3>:
     462:	a0 e2       	ldi	r26, 0x20	; 32
     464:	b0 e0       	ldi	r27, 0x00	; 0
     466:	e7 e3       	ldi	r30, 0x37	; 55
     468:	f2 e0       	ldi	r31, 0x02	; 2
     46a:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <__prologue_saves__+0x18>
     46e:	69 83       	std	Y+1, r22	; 0x01
     470:	7a 83       	std	Y+2, r23	; 0x02
     472:	8b 83       	std	Y+3, r24	; 0x03
     474:	9c 83       	std	Y+4, r25	; 0x04
     476:	2d 83       	std	Y+5, r18	; 0x05
     478:	3e 83       	std	Y+6, r19	; 0x06
     47a:	4f 83       	std	Y+7, r20	; 0x07
     47c:	58 87       	std	Y+8, r21	; 0x08
     47e:	e9 e0       	ldi	r30, 0x09	; 9
     480:	ee 2e       	mov	r14, r30
     482:	f1 2c       	mov	r15, r1
     484:	ec 0e       	add	r14, r28
     486:	fd 1e       	adc	r15, r29
     488:	ce 01       	movw	r24, r28
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	b7 01       	movw	r22, r14
     48e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__unpack_f>
     492:	8e 01       	movw	r16, r28
     494:	0f 5e       	subi	r16, 0xEF	; 239
     496:	1f 4f       	sbci	r17, 0xFF	; 255
     498:	ce 01       	movw	r24, r28
     49a:	05 96       	adiw	r24, 0x05	; 5
     49c:	b8 01       	movw	r22, r16
     49e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__unpack_f>
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	89 27       	eor	r24, r25
     4a8:	8a 8b       	std	Y+18, r24	; 0x12
     4aa:	c7 01       	movw	r24, r14
     4ac:	b8 01       	movw	r22, r16
     4ae:	ae 01       	movw	r20, r28
     4b0:	47 5e       	subi	r20, 0xE7	; 231
     4b2:	5f 4f       	sbci	r21, 0xFF	; 255
     4b4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_fpadd_parts>
     4b8:	0e 94 19 05 	call	0xa32	; 0xa32 <__pack_f>
     4bc:	a0 96       	adiw	r28, 0x20	; 32
     4be:	e6 e0       	ldi	r30, 0x06	; 6
     4c0:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__epilogue_restores__+0x18>

000004c4 <__addsf3>:
     4c4:	a0 e2       	ldi	r26, 0x20	; 32
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	e8 e6       	ldi	r30, 0x68	; 104
     4ca:	f2 e0       	ldi	r31, 0x02	; 2
     4cc:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <__prologue_saves__+0x18>
     4d0:	69 83       	std	Y+1, r22	; 0x01
     4d2:	7a 83       	std	Y+2, r23	; 0x02
     4d4:	8b 83       	std	Y+3, r24	; 0x03
     4d6:	9c 83       	std	Y+4, r25	; 0x04
     4d8:	2d 83       	std	Y+5, r18	; 0x05
     4da:	3e 83       	std	Y+6, r19	; 0x06
     4dc:	4f 83       	std	Y+7, r20	; 0x07
     4de:	58 87       	std	Y+8, r21	; 0x08
     4e0:	f9 e0       	ldi	r31, 0x09	; 9
     4e2:	ef 2e       	mov	r14, r31
     4e4:	f1 2c       	mov	r15, r1
     4e6:	ec 0e       	add	r14, r28
     4e8:	fd 1e       	adc	r15, r29
     4ea:	ce 01       	movw	r24, r28
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	b7 01       	movw	r22, r14
     4f0:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__unpack_f>
     4f4:	8e 01       	movw	r16, r28
     4f6:	0f 5e       	subi	r16, 0xEF	; 239
     4f8:	1f 4f       	sbci	r17, 0xFF	; 255
     4fa:	ce 01       	movw	r24, r28
     4fc:	05 96       	adiw	r24, 0x05	; 5
     4fe:	b8 01       	movw	r22, r16
     500:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__unpack_f>
     504:	c7 01       	movw	r24, r14
     506:	b8 01       	movw	r22, r16
     508:	ae 01       	movw	r20, r28
     50a:	47 5e       	subi	r20, 0xE7	; 231
     50c:	5f 4f       	sbci	r21, 0xFF	; 255
     50e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_fpadd_parts>
     512:	0e 94 19 05 	call	0xa32	; 0xa32 <__pack_f>
     516:	a0 96       	adiw	r28, 0x20	; 32
     518:	e6 e0       	ldi	r30, 0x06	; 6
     51a:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__epilogue_restores__+0x18>

0000051e <__mulsf3>:
     51e:	a0 e2       	ldi	r26, 0x20	; 32
     520:	b0 e0       	ldi	r27, 0x00	; 0
     522:	e5 e9       	ldi	r30, 0x95	; 149
     524:	f2 e0       	ldi	r31, 0x02	; 2
     526:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <__prologue_saves__>
     52a:	69 83       	std	Y+1, r22	; 0x01
     52c:	7a 83       	std	Y+2, r23	; 0x02
     52e:	8b 83       	std	Y+3, r24	; 0x03
     530:	9c 83       	std	Y+4, r25	; 0x04
     532:	2d 83       	std	Y+5, r18	; 0x05
     534:	3e 83       	std	Y+6, r19	; 0x06
     536:	4f 83       	std	Y+7, r20	; 0x07
     538:	58 87       	std	Y+8, r21	; 0x08
     53a:	ce 01       	movw	r24, r28
     53c:	01 96       	adiw	r24, 0x01	; 1
     53e:	be 01       	movw	r22, r28
     540:	67 5f       	subi	r22, 0xF7	; 247
     542:	7f 4f       	sbci	r23, 0xFF	; 255
     544:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__unpack_f>
     548:	ce 01       	movw	r24, r28
     54a:	05 96       	adiw	r24, 0x05	; 5
     54c:	be 01       	movw	r22, r28
     54e:	6f 5e       	subi	r22, 0xEF	; 239
     550:	7f 4f       	sbci	r23, 0xFF	; 255
     552:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__unpack_f>
     556:	99 85       	ldd	r25, Y+9	; 0x09
     558:	92 30       	cpi	r25, 0x02	; 2
     55a:	88 f0       	brcs	.+34     	; 0x57e <__mulsf3+0x60>
     55c:	89 89       	ldd	r24, Y+17	; 0x11
     55e:	82 30       	cpi	r24, 0x02	; 2
     560:	c8 f0       	brcs	.+50     	; 0x594 <__mulsf3+0x76>
     562:	94 30       	cpi	r25, 0x04	; 4
     564:	19 f4       	brne	.+6      	; 0x56c <__mulsf3+0x4e>
     566:	82 30       	cpi	r24, 0x02	; 2
     568:	51 f4       	brne	.+20     	; 0x57e <__mulsf3+0x60>
     56a:	04 c0       	rjmp	.+8      	; 0x574 <__mulsf3+0x56>
     56c:	84 30       	cpi	r24, 0x04	; 4
     56e:	29 f4       	brne	.+10     	; 0x57a <__mulsf3+0x5c>
     570:	92 30       	cpi	r25, 0x02	; 2
     572:	81 f4       	brne	.+32     	; 0x594 <__mulsf3+0x76>
     574:	89 e9       	ldi	r24, 0x99	; 153
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	c6 c0       	rjmp	.+396    	; 0x706 <__mulsf3+0x1e8>
     57a:	92 30       	cpi	r25, 0x02	; 2
     57c:	49 f4       	brne	.+18     	; 0x590 <__mulsf3+0x72>
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	9a 85       	ldd	r25, Y+10	; 0x0a
     582:	8a 89       	ldd	r24, Y+18	; 0x12
     584:	98 13       	cpse	r25, r24
     586:	21 e0       	ldi	r18, 0x01	; 1
     588:	2a 87       	std	Y+10, r18	; 0x0a
     58a:	ce 01       	movw	r24, r28
     58c:	09 96       	adiw	r24, 0x09	; 9
     58e:	bb c0       	rjmp	.+374    	; 0x706 <__mulsf3+0x1e8>
     590:	82 30       	cpi	r24, 0x02	; 2
     592:	49 f4       	brne	.+18     	; 0x5a6 <__mulsf3+0x88>
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	9a 85       	ldd	r25, Y+10	; 0x0a
     598:	8a 89       	ldd	r24, Y+18	; 0x12
     59a:	98 13       	cpse	r25, r24
     59c:	21 e0       	ldi	r18, 0x01	; 1
     59e:	2a 8b       	std	Y+18, r18	; 0x12
     5a0:	ce 01       	movw	r24, r28
     5a2:	41 96       	adiw	r24, 0x11	; 17
     5a4:	b0 c0       	rjmp	.+352    	; 0x706 <__mulsf3+0x1e8>
     5a6:	2d 84       	ldd	r2, Y+13	; 0x0d
     5a8:	3e 84       	ldd	r3, Y+14	; 0x0e
     5aa:	4f 84       	ldd	r4, Y+15	; 0x0f
     5ac:	58 88       	ldd	r5, Y+16	; 0x10
     5ae:	6d 88       	ldd	r6, Y+21	; 0x15
     5b0:	7e 88       	ldd	r7, Y+22	; 0x16
     5b2:	8f 88       	ldd	r8, Y+23	; 0x17
     5b4:	98 8c       	ldd	r9, Y+24	; 0x18
     5b6:	ee 24       	eor	r14, r14
     5b8:	ff 24       	eor	r15, r15
     5ba:	87 01       	movw	r16, r14
     5bc:	aa 24       	eor	r10, r10
     5be:	bb 24       	eor	r11, r11
     5c0:	65 01       	movw	r12, r10
     5c2:	40 e0       	ldi	r20, 0x00	; 0
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	e0 e0       	ldi	r30, 0x00	; 0
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	c1 01       	movw	r24, r2
     5d0:	81 70       	andi	r24, 0x01	; 1
     5d2:	90 70       	andi	r25, 0x00	; 0
     5d4:	89 2b       	or	r24, r25
     5d6:	e9 f0       	breq	.+58     	; 0x612 <__mulsf3+0xf4>
     5d8:	e6 0c       	add	r14, r6
     5da:	f7 1c       	adc	r15, r7
     5dc:	08 1d       	adc	r16, r8
     5de:	19 1d       	adc	r17, r9
     5e0:	9a 01       	movw	r18, r20
     5e2:	ab 01       	movw	r20, r22
     5e4:	2a 0d       	add	r18, r10
     5e6:	3b 1d       	adc	r19, r11
     5e8:	4c 1d       	adc	r20, r12
     5ea:	5d 1d       	adc	r21, r13
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	a0 e0       	ldi	r26, 0x00	; 0
     5f2:	b0 e0       	ldi	r27, 0x00	; 0
     5f4:	e6 14       	cp	r14, r6
     5f6:	f7 04       	cpc	r15, r7
     5f8:	08 05       	cpc	r16, r8
     5fa:	19 05       	cpc	r17, r9
     5fc:	20 f4       	brcc	.+8      	; 0x606 <__mulsf3+0xe8>
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	a0 e0       	ldi	r26, 0x00	; 0
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	ba 01       	movw	r22, r20
     608:	a9 01       	movw	r20, r18
     60a:	48 0f       	add	r20, r24
     60c:	59 1f       	adc	r21, r25
     60e:	6a 1f       	adc	r22, r26
     610:	7b 1f       	adc	r23, r27
     612:	aa 0c       	add	r10, r10
     614:	bb 1c       	adc	r11, r11
     616:	cc 1c       	adc	r12, r12
     618:	dd 1c       	adc	r13, r13
     61a:	97 fe       	sbrs	r9, 7
     61c:	08 c0       	rjmp	.+16     	; 0x62e <__mulsf3+0x110>
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	a0 e0       	ldi	r26, 0x00	; 0
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	a8 2a       	or	r10, r24
     628:	b9 2a       	or	r11, r25
     62a:	ca 2a       	or	r12, r26
     62c:	db 2a       	or	r13, r27
     62e:	31 96       	adiw	r30, 0x01	; 1
     630:	e0 32       	cpi	r30, 0x20	; 32
     632:	f1 05       	cpc	r31, r1
     634:	49 f0       	breq	.+18     	; 0x648 <__mulsf3+0x12a>
     636:	66 0c       	add	r6, r6
     638:	77 1c       	adc	r7, r7
     63a:	88 1c       	adc	r8, r8
     63c:	99 1c       	adc	r9, r9
     63e:	56 94       	lsr	r5
     640:	47 94       	ror	r4
     642:	37 94       	ror	r3
     644:	27 94       	ror	r2
     646:	c3 cf       	rjmp	.-122    	; 0x5ce <__mulsf3+0xb0>
     648:	fa 85       	ldd	r31, Y+10	; 0x0a
     64a:	ea 89       	ldd	r30, Y+18	; 0x12
     64c:	2b 89       	ldd	r18, Y+19	; 0x13
     64e:	3c 89       	ldd	r19, Y+20	; 0x14
     650:	8b 85       	ldd	r24, Y+11	; 0x0b
     652:	9c 85       	ldd	r25, Y+12	; 0x0c
     654:	28 0f       	add	r18, r24
     656:	39 1f       	adc	r19, r25
     658:	2e 5f       	subi	r18, 0xFE	; 254
     65a:	3f 4f       	sbci	r19, 0xFF	; 255
     65c:	17 c0       	rjmp	.+46     	; 0x68c <__mulsf3+0x16e>
     65e:	ca 01       	movw	r24, r20
     660:	81 70       	andi	r24, 0x01	; 1
     662:	90 70       	andi	r25, 0x00	; 0
     664:	89 2b       	or	r24, r25
     666:	61 f0       	breq	.+24     	; 0x680 <__mulsf3+0x162>
     668:	16 95       	lsr	r17
     66a:	07 95       	ror	r16
     66c:	f7 94       	ror	r15
     66e:	e7 94       	ror	r14
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	a0 e0       	ldi	r26, 0x00	; 0
     676:	b0 e8       	ldi	r27, 0x80	; 128
     678:	e8 2a       	or	r14, r24
     67a:	f9 2a       	or	r15, r25
     67c:	0a 2b       	or	r16, r26
     67e:	1b 2b       	or	r17, r27
     680:	76 95       	lsr	r23
     682:	67 95       	ror	r22
     684:	57 95       	ror	r21
     686:	47 95       	ror	r20
     688:	2f 5f       	subi	r18, 0xFF	; 255
     68a:	3f 4f       	sbci	r19, 0xFF	; 255
     68c:	77 fd       	sbrc	r23, 7
     68e:	e7 cf       	rjmp	.-50     	; 0x65e <__mulsf3+0x140>
     690:	0c c0       	rjmp	.+24     	; 0x6aa <__mulsf3+0x18c>
     692:	44 0f       	add	r20, r20
     694:	55 1f       	adc	r21, r21
     696:	66 1f       	adc	r22, r22
     698:	77 1f       	adc	r23, r23
     69a:	17 fd       	sbrc	r17, 7
     69c:	41 60       	ori	r20, 0x01	; 1
     69e:	ee 0c       	add	r14, r14
     6a0:	ff 1c       	adc	r15, r15
     6a2:	00 1f       	adc	r16, r16
     6a4:	11 1f       	adc	r17, r17
     6a6:	21 50       	subi	r18, 0x01	; 1
     6a8:	30 40       	sbci	r19, 0x00	; 0
     6aa:	40 30       	cpi	r20, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	59 07       	cpc	r21, r25
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	69 07       	cpc	r22, r25
     6b4:	90 e4       	ldi	r25, 0x40	; 64
     6b6:	79 07       	cpc	r23, r25
     6b8:	60 f3       	brcs	.-40     	; 0x692 <__mulsf3+0x174>
     6ba:	2b 8f       	std	Y+27, r18	; 0x1b
     6bc:	3c 8f       	std	Y+28, r19	; 0x1c
     6be:	db 01       	movw	r26, r22
     6c0:	ca 01       	movw	r24, r20
     6c2:	8f 77       	andi	r24, 0x7F	; 127
     6c4:	90 70       	andi	r25, 0x00	; 0
     6c6:	a0 70       	andi	r26, 0x00	; 0
     6c8:	b0 70       	andi	r27, 0x00	; 0
     6ca:	80 34       	cpi	r24, 0x40	; 64
     6cc:	91 05       	cpc	r25, r1
     6ce:	a1 05       	cpc	r26, r1
     6d0:	b1 05       	cpc	r27, r1
     6d2:	61 f4       	brne	.+24     	; 0x6ec <__mulsf3+0x1ce>
     6d4:	47 fd       	sbrc	r20, 7
     6d6:	0a c0       	rjmp	.+20     	; 0x6ec <__mulsf3+0x1ce>
     6d8:	e1 14       	cp	r14, r1
     6da:	f1 04       	cpc	r15, r1
     6dc:	01 05       	cpc	r16, r1
     6de:	11 05       	cpc	r17, r1
     6e0:	29 f0       	breq	.+10     	; 0x6ec <__mulsf3+0x1ce>
     6e2:	40 5c       	subi	r20, 0xC0	; 192
     6e4:	5f 4f       	sbci	r21, 0xFF	; 255
     6e6:	6f 4f       	sbci	r22, 0xFF	; 255
     6e8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ea:	40 78       	andi	r20, 0x80	; 128
     6ec:	1a 8e       	std	Y+26, r1	; 0x1a
     6ee:	fe 17       	cp	r31, r30
     6f0:	11 f0       	breq	.+4      	; 0x6f6 <__mulsf3+0x1d8>
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	8a 8f       	std	Y+26, r24	; 0x1a
     6f6:	4d 8f       	std	Y+29, r20	; 0x1d
     6f8:	5e 8f       	std	Y+30, r21	; 0x1e
     6fa:	6f 8f       	std	Y+31, r22	; 0x1f
     6fc:	78 a3       	std	Y+32, r23	; 0x20
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	89 8f       	std	Y+25, r24	; 0x19
     702:	ce 01       	movw	r24, r28
     704:	49 96       	adiw	r24, 0x19	; 25
     706:	0e 94 19 05 	call	0xa32	; 0xa32 <__pack_f>
     70a:	a0 96       	adiw	r28, 0x20	; 32
     70c:	e2 e1       	ldi	r30, 0x12	; 18
     70e:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <__epilogue_restores__>

00000712 <__divsf3>:
     712:	a8 e1       	ldi	r26, 0x18	; 24
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	ef e8       	ldi	r30, 0x8F	; 143
     718:	f3 e0       	ldi	r31, 0x03	; 3
     71a:	0c 94 d8 20 	jmp	0x41b0	; 0x41b0 <__prologue_saves__+0x10>
     71e:	69 83       	std	Y+1, r22	; 0x01
     720:	7a 83       	std	Y+2, r23	; 0x02
     722:	8b 83       	std	Y+3, r24	; 0x03
     724:	9c 83       	std	Y+4, r25	; 0x04
     726:	2d 83       	std	Y+5, r18	; 0x05
     728:	3e 83       	std	Y+6, r19	; 0x06
     72a:	4f 83       	std	Y+7, r20	; 0x07
     72c:	58 87       	std	Y+8, r21	; 0x08
     72e:	b9 e0       	ldi	r27, 0x09	; 9
     730:	eb 2e       	mov	r14, r27
     732:	f1 2c       	mov	r15, r1
     734:	ec 0e       	add	r14, r28
     736:	fd 1e       	adc	r15, r29
     738:	ce 01       	movw	r24, r28
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	b7 01       	movw	r22, r14
     73e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__unpack_f>
     742:	8e 01       	movw	r16, r28
     744:	0f 5e       	subi	r16, 0xEF	; 239
     746:	1f 4f       	sbci	r17, 0xFF	; 255
     748:	ce 01       	movw	r24, r28
     74a:	05 96       	adiw	r24, 0x05	; 5
     74c:	b8 01       	movw	r22, r16
     74e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__unpack_f>
     752:	29 85       	ldd	r18, Y+9	; 0x09
     754:	22 30       	cpi	r18, 0x02	; 2
     756:	08 f4       	brcc	.+2      	; 0x75a <__divsf3+0x48>
     758:	7e c0       	rjmp	.+252    	; 0x856 <__divsf3+0x144>
     75a:	39 89       	ldd	r19, Y+17	; 0x11
     75c:	32 30       	cpi	r19, 0x02	; 2
     75e:	10 f4       	brcc	.+4      	; 0x764 <__divsf3+0x52>
     760:	b8 01       	movw	r22, r16
     762:	7c c0       	rjmp	.+248    	; 0x85c <__divsf3+0x14a>
     764:	8a 85       	ldd	r24, Y+10	; 0x0a
     766:	9a 89       	ldd	r25, Y+18	; 0x12
     768:	89 27       	eor	r24, r25
     76a:	8a 87       	std	Y+10, r24	; 0x0a
     76c:	24 30       	cpi	r18, 0x04	; 4
     76e:	11 f0       	breq	.+4      	; 0x774 <__divsf3+0x62>
     770:	22 30       	cpi	r18, 0x02	; 2
     772:	31 f4       	brne	.+12     	; 0x780 <__divsf3+0x6e>
     774:	23 17       	cp	r18, r19
     776:	09 f0       	breq	.+2      	; 0x77a <__divsf3+0x68>
     778:	6e c0       	rjmp	.+220    	; 0x856 <__divsf3+0x144>
     77a:	69 e9       	ldi	r22, 0x99	; 153
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	6e c0       	rjmp	.+220    	; 0x85c <__divsf3+0x14a>
     780:	34 30       	cpi	r19, 0x04	; 4
     782:	39 f4       	brne	.+14     	; 0x792 <__divsf3+0x80>
     784:	1d 86       	std	Y+13, r1	; 0x0d
     786:	1e 86       	std	Y+14, r1	; 0x0e
     788:	1f 86       	std	Y+15, r1	; 0x0f
     78a:	18 8a       	std	Y+16, r1	; 0x10
     78c:	1c 86       	std	Y+12, r1	; 0x0c
     78e:	1b 86       	std	Y+11, r1	; 0x0b
     790:	04 c0       	rjmp	.+8      	; 0x79a <__divsf3+0x88>
     792:	32 30       	cpi	r19, 0x02	; 2
     794:	21 f4       	brne	.+8      	; 0x79e <__divsf3+0x8c>
     796:	84 e0       	ldi	r24, 0x04	; 4
     798:	89 87       	std	Y+9, r24	; 0x09
     79a:	b7 01       	movw	r22, r14
     79c:	5f c0       	rjmp	.+190    	; 0x85c <__divsf3+0x14a>
     79e:	2b 85       	ldd	r18, Y+11	; 0x0b
     7a0:	3c 85       	ldd	r19, Y+12	; 0x0c
     7a2:	8b 89       	ldd	r24, Y+19	; 0x13
     7a4:	9c 89       	ldd	r25, Y+20	; 0x14
     7a6:	28 1b       	sub	r18, r24
     7a8:	39 0b       	sbc	r19, r25
     7aa:	3c 87       	std	Y+12, r19	; 0x0c
     7ac:	2b 87       	std	Y+11, r18	; 0x0b
     7ae:	ed 84       	ldd	r14, Y+13	; 0x0d
     7b0:	fe 84       	ldd	r15, Y+14	; 0x0e
     7b2:	0f 85       	ldd	r16, Y+15	; 0x0f
     7b4:	18 89       	ldd	r17, Y+16	; 0x10
     7b6:	ad 88       	ldd	r10, Y+21	; 0x15
     7b8:	be 88       	ldd	r11, Y+22	; 0x16
     7ba:	cf 88       	ldd	r12, Y+23	; 0x17
     7bc:	d8 8c       	ldd	r13, Y+24	; 0x18
     7be:	ea 14       	cp	r14, r10
     7c0:	fb 04       	cpc	r15, r11
     7c2:	0c 05       	cpc	r16, r12
     7c4:	1d 05       	cpc	r17, r13
     7c6:	40 f4       	brcc	.+16     	; 0x7d8 <__divsf3+0xc6>
     7c8:	ee 0c       	add	r14, r14
     7ca:	ff 1c       	adc	r15, r15
     7cc:	00 1f       	adc	r16, r16
     7ce:	11 1f       	adc	r17, r17
     7d0:	21 50       	subi	r18, 0x01	; 1
     7d2:	30 40       	sbci	r19, 0x00	; 0
     7d4:	3c 87       	std	Y+12, r19	; 0x0c
     7d6:	2b 87       	std	Y+11, r18	; 0x0b
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	a0 e0       	ldi	r26, 0x00	; 0
     7e6:	b0 e4       	ldi	r27, 0x40	; 64
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	ea 14       	cp	r14, r10
     7ee:	fb 04       	cpc	r15, r11
     7f0:	0c 05       	cpc	r16, r12
     7f2:	1d 05       	cpc	r17, r13
     7f4:	40 f0       	brcs	.+16     	; 0x806 <__divsf3+0xf4>
     7f6:	28 2b       	or	r18, r24
     7f8:	39 2b       	or	r19, r25
     7fa:	4a 2b       	or	r20, r26
     7fc:	5b 2b       	or	r21, r27
     7fe:	ea 18       	sub	r14, r10
     800:	fb 08       	sbc	r15, r11
     802:	0c 09       	sbc	r16, r12
     804:	1d 09       	sbc	r17, r13
     806:	b6 95       	lsr	r27
     808:	a7 95       	ror	r26
     80a:	97 95       	ror	r25
     80c:	87 95       	ror	r24
     80e:	ee 0c       	add	r14, r14
     810:	ff 1c       	adc	r15, r15
     812:	00 1f       	adc	r16, r16
     814:	11 1f       	adc	r17, r17
     816:	6f 5f       	subi	r22, 0xFF	; 255
     818:	7f 4f       	sbci	r23, 0xFF	; 255
     81a:	6f 31       	cpi	r22, 0x1F	; 31
     81c:	71 05       	cpc	r23, r1
     81e:	31 f7       	brne	.-52     	; 0x7ec <__divsf3+0xda>
     820:	da 01       	movw	r26, r20
     822:	c9 01       	movw	r24, r18
     824:	8f 77       	andi	r24, 0x7F	; 127
     826:	90 70       	andi	r25, 0x00	; 0
     828:	a0 70       	andi	r26, 0x00	; 0
     82a:	b0 70       	andi	r27, 0x00	; 0
     82c:	80 34       	cpi	r24, 0x40	; 64
     82e:	91 05       	cpc	r25, r1
     830:	a1 05       	cpc	r26, r1
     832:	b1 05       	cpc	r27, r1
     834:	61 f4       	brne	.+24     	; 0x84e <__divsf3+0x13c>
     836:	27 fd       	sbrc	r18, 7
     838:	0a c0       	rjmp	.+20     	; 0x84e <__divsf3+0x13c>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	29 f0       	breq	.+10     	; 0x84e <__divsf3+0x13c>
     844:	20 5c       	subi	r18, 0xC0	; 192
     846:	3f 4f       	sbci	r19, 0xFF	; 255
     848:	4f 4f       	sbci	r20, 0xFF	; 255
     84a:	5f 4f       	sbci	r21, 0xFF	; 255
     84c:	20 78       	andi	r18, 0x80	; 128
     84e:	2d 87       	std	Y+13, r18	; 0x0d
     850:	3e 87       	std	Y+14, r19	; 0x0e
     852:	4f 87       	std	Y+15, r20	; 0x0f
     854:	58 8b       	std	Y+16, r21	; 0x10
     856:	be 01       	movw	r22, r28
     858:	67 5f       	subi	r22, 0xF7	; 247
     85a:	7f 4f       	sbci	r23, 0xFF	; 255
     85c:	cb 01       	movw	r24, r22
     85e:	0e 94 19 05 	call	0xa32	; 0xa32 <__pack_f>
     862:	68 96       	adiw	r28, 0x18	; 24
     864:	ea e0       	ldi	r30, 0x0A	; 10
     866:	0c 94 f4 20 	jmp	0x41e8	; 0x41e8 <__epilogue_restores__+0x10>

0000086a <__gtsf2>:
     86a:	a8 e1       	ldi	r26, 0x18	; 24
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <__prologue_saves__+0x18>
     876:	69 83       	std	Y+1, r22	; 0x01
     878:	7a 83       	std	Y+2, r23	; 0x02
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	2d 83       	std	Y+5, r18	; 0x05
     880:	3e 83       	std	Y+6, r19	; 0x06
     882:	4f 83       	std	Y+7, r20	; 0x07
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	89 e0       	ldi	r24, 0x09	; 9
     888:	e8 2e       	mov	r14, r24
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	b7 01       	movw	r22, r14
     896:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__unpack_f>
     89a:	8e 01       	movw	r16, r28
     89c:	0f 5e       	subi	r16, 0xEF	; 239
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	ce 01       	movw	r24, r28
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__unpack_f>
     8aa:	89 85       	ldd	r24, Y+9	; 0x09
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	40 f0       	brcs	.+16     	; 0x8c0 <__gtsf2+0x56>
     8b0:	89 89       	ldd	r24, Y+17	; 0x11
     8b2:	82 30       	cpi	r24, 0x02	; 2
     8b4:	28 f0       	brcs	.+10     	; 0x8c0 <__gtsf2+0x56>
     8b6:	c7 01       	movw	r24, r14
     8b8:	b8 01       	movw	r22, r16
     8ba:	0e 94 66 06 	call	0xccc	; 0xccc <__fpcmp_parts_f>
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <__gtsf2+0x58>
     8c0:	8f ef       	ldi	r24, 0xFF	; 255
     8c2:	68 96       	adiw	r28, 0x18	; 24
     8c4:	e6 e0       	ldi	r30, 0x06	; 6
     8c6:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__epilogue_restores__+0x18>

000008ca <__gesf2>:
     8ca:	a8 e1       	ldi	r26, 0x18	; 24
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	eb e6       	ldi	r30, 0x6B	; 107
     8d0:	f4 e0       	ldi	r31, 0x04	; 4
     8d2:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <__prologue_saves__+0x18>
     8d6:	69 83       	std	Y+1, r22	; 0x01
     8d8:	7a 83       	std	Y+2, r23	; 0x02
     8da:	8b 83       	std	Y+3, r24	; 0x03
     8dc:	9c 83       	std	Y+4, r25	; 0x04
     8de:	2d 83       	std	Y+5, r18	; 0x05
     8e0:	3e 83       	std	Y+6, r19	; 0x06
     8e2:	4f 83       	std	Y+7, r20	; 0x07
     8e4:	58 87       	std	Y+8, r21	; 0x08
     8e6:	89 e0       	ldi	r24, 0x09	; 9
     8e8:	e8 2e       	mov	r14, r24
     8ea:	f1 2c       	mov	r15, r1
     8ec:	ec 0e       	add	r14, r28
     8ee:	fd 1e       	adc	r15, r29
     8f0:	ce 01       	movw	r24, r28
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	b7 01       	movw	r22, r14
     8f6:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__unpack_f>
     8fa:	8e 01       	movw	r16, r28
     8fc:	0f 5e       	subi	r16, 0xEF	; 239
     8fe:	1f 4f       	sbci	r17, 0xFF	; 255
     900:	ce 01       	movw	r24, r28
     902:	05 96       	adiw	r24, 0x05	; 5
     904:	b8 01       	movw	r22, r16
     906:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__unpack_f>
     90a:	89 85       	ldd	r24, Y+9	; 0x09
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	40 f0       	brcs	.+16     	; 0x920 <__gesf2+0x56>
     910:	89 89       	ldd	r24, Y+17	; 0x11
     912:	82 30       	cpi	r24, 0x02	; 2
     914:	28 f0       	brcs	.+10     	; 0x920 <__gesf2+0x56>
     916:	c7 01       	movw	r24, r14
     918:	b8 01       	movw	r22, r16
     91a:	0e 94 66 06 	call	0xccc	; 0xccc <__fpcmp_parts_f>
     91e:	01 c0       	rjmp	.+2      	; 0x922 <__gesf2+0x58>
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	68 96       	adiw	r28, 0x18	; 24
     924:	e6 e0       	ldi	r30, 0x06	; 6
     926:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__epilogue_restores__+0x18>

0000092a <__ltsf2>:
     92a:	a8 e1       	ldi	r26, 0x18	; 24
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	eb e9       	ldi	r30, 0x9B	; 155
     930:	f4 e0       	ldi	r31, 0x04	; 4
     932:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <__prologue_saves__+0x18>
     936:	69 83       	std	Y+1, r22	; 0x01
     938:	7a 83       	std	Y+2, r23	; 0x02
     93a:	8b 83       	std	Y+3, r24	; 0x03
     93c:	9c 83       	std	Y+4, r25	; 0x04
     93e:	2d 83       	std	Y+5, r18	; 0x05
     940:	3e 83       	std	Y+6, r19	; 0x06
     942:	4f 83       	std	Y+7, r20	; 0x07
     944:	58 87       	std	Y+8, r21	; 0x08
     946:	89 e0       	ldi	r24, 0x09	; 9
     948:	e8 2e       	mov	r14, r24
     94a:	f1 2c       	mov	r15, r1
     94c:	ec 0e       	add	r14, r28
     94e:	fd 1e       	adc	r15, r29
     950:	ce 01       	movw	r24, r28
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	b7 01       	movw	r22, r14
     956:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__unpack_f>
     95a:	8e 01       	movw	r16, r28
     95c:	0f 5e       	subi	r16, 0xEF	; 239
     95e:	1f 4f       	sbci	r17, 0xFF	; 255
     960:	ce 01       	movw	r24, r28
     962:	05 96       	adiw	r24, 0x05	; 5
     964:	b8 01       	movw	r22, r16
     966:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__unpack_f>
     96a:	89 85       	ldd	r24, Y+9	; 0x09
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	40 f0       	brcs	.+16     	; 0x980 <__ltsf2+0x56>
     970:	89 89       	ldd	r24, Y+17	; 0x11
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	28 f0       	brcs	.+10     	; 0x980 <__ltsf2+0x56>
     976:	c7 01       	movw	r24, r14
     978:	b8 01       	movw	r22, r16
     97a:	0e 94 66 06 	call	0xccc	; 0xccc <__fpcmp_parts_f>
     97e:	01 c0       	rjmp	.+2      	; 0x982 <__ltsf2+0x58>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	68 96       	adiw	r28, 0x18	; 24
     984:	e6 e0       	ldi	r30, 0x06	; 6
     986:	0c 94 f8 20 	jmp	0x41f0	; 0x41f0 <__epilogue_restores__+0x18>

0000098a <__fixsfsi>:
     98a:	ac e0       	ldi	r26, 0x0C	; 12
     98c:	b0 e0       	ldi	r27, 0x00	; 0
     98e:	eb ec       	ldi	r30, 0xCB	; 203
     990:	f4 e0       	ldi	r31, 0x04	; 4
     992:	0c 94 e0 20 	jmp	0x41c0	; 0x41c0 <__prologue_saves__+0x20>
     996:	69 83       	std	Y+1, r22	; 0x01
     998:	7a 83       	std	Y+2, r23	; 0x02
     99a:	8b 83       	std	Y+3, r24	; 0x03
     99c:	9c 83       	std	Y+4, r25	; 0x04
     99e:	ce 01       	movw	r24, r28
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	be 01       	movw	r22, r28
     9a4:	6b 5f       	subi	r22, 0xFB	; 251
     9a6:	7f 4f       	sbci	r23, 0xFF	; 255
     9a8:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__unpack_f>
     9ac:	8d 81       	ldd	r24, Y+5	; 0x05
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	61 f1       	breq	.+88     	; 0xa0a <__fixsfsi+0x80>
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	50 f1       	brcs	.+84     	; 0xa0a <__fixsfsi+0x80>
     9b6:	84 30       	cpi	r24, 0x04	; 4
     9b8:	21 f4       	brne	.+8      	; 0x9c2 <__fixsfsi+0x38>
     9ba:	8e 81       	ldd	r24, Y+6	; 0x06
     9bc:	88 23       	and	r24, r24
     9be:	51 f1       	breq	.+84     	; 0xa14 <__fixsfsi+0x8a>
     9c0:	2e c0       	rjmp	.+92     	; 0xa1e <__fixsfsi+0x94>
     9c2:	2f 81       	ldd	r18, Y+7	; 0x07
     9c4:	38 85       	ldd	r19, Y+8	; 0x08
     9c6:	37 fd       	sbrc	r19, 7
     9c8:	20 c0       	rjmp	.+64     	; 0xa0a <__fixsfsi+0x80>
     9ca:	6e 81       	ldd	r22, Y+6	; 0x06
     9cc:	2f 31       	cpi	r18, 0x1F	; 31
     9ce:	31 05       	cpc	r19, r1
     9d0:	1c f0       	brlt	.+6      	; 0x9d8 <__fixsfsi+0x4e>
     9d2:	66 23       	and	r22, r22
     9d4:	f9 f0       	breq	.+62     	; 0xa14 <__fixsfsi+0x8a>
     9d6:	23 c0       	rjmp	.+70     	; 0xa1e <__fixsfsi+0x94>
     9d8:	8e e1       	ldi	r24, 0x1E	; 30
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	82 1b       	sub	r24, r18
     9de:	93 0b       	sbc	r25, r19
     9e0:	29 85       	ldd	r18, Y+9	; 0x09
     9e2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9e4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9e6:	5c 85       	ldd	r21, Y+12	; 0x0c
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <__fixsfsi+0x68>
     9ea:	56 95       	lsr	r21
     9ec:	47 95       	ror	r20
     9ee:	37 95       	ror	r19
     9f0:	27 95       	ror	r18
     9f2:	8a 95       	dec	r24
     9f4:	d2 f7       	brpl	.-12     	; 0x9ea <__fixsfsi+0x60>
     9f6:	66 23       	and	r22, r22
     9f8:	b1 f0       	breq	.+44     	; 0xa26 <__fixsfsi+0x9c>
     9fa:	50 95       	com	r21
     9fc:	40 95       	com	r20
     9fe:	30 95       	com	r19
     a00:	21 95       	neg	r18
     a02:	3f 4f       	sbci	r19, 0xFF	; 255
     a04:	4f 4f       	sbci	r20, 0xFF	; 255
     a06:	5f 4f       	sbci	r21, 0xFF	; 255
     a08:	0e c0       	rjmp	.+28     	; 0xa26 <__fixsfsi+0x9c>
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	09 c0       	rjmp	.+18     	; 0xa26 <__fixsfsi+0x9c>
     a14:	2f ef       	ldi	r18, 0xFF	; 255
     a16:	3f ef       	ldi	r19, 0xFF	; 255
     a18:	4f ef       	ldi	r20, 0xFF	; 255
     a1a:	5f e7       	ldi	r21, 0x7F	; 127
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__fixsfsi+0x9c>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e8       	ldi	r21, 0x80	; 128
     a26:	b9 01       	movw	r22, r18
     a28:	ca 01       	movw	r24, r20
     a2a:	2c 96       	adiw	r28, 0x0c	; 12
     a2c:	e2 e0       	ldi	r30, 0x02	; 2
     a2e:	0c 94 fc 20 	jmp	0x41f8	; 0x41f8 <__epilogue_restores__+0x20>

00000a32 <__pack_f>:
     a32:	df 92       	push	r13
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	fc 01       	movw	r30, r24
     a3e:	e4 80       	ldd	r14, Z+4	; 0x04
     a40:	f5 80       	ldd	r15, Z+5	; 0x05
     a42:	06 81       	ldd	r16, Z+6	; 0x06
     a44:	17 81       	ldd	r17, Z+7	; 0x07
     a46:	d1 80       	ldd	r13, Z+1	; 0x01
     a48:	80 81       	ld	r24, Z
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	48 f4       	brcc	.+18     	; 0xa60 <__pack_f+0x2e>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	a0 e1       	ldi	r26, 0x10	; 16
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	e8 2a       	or	r14, r24
     a58:	f9 2a       	or	r15, r25
     a5a:	0a 2b       	or	r16, r26
     a5c:	1b 2b       	or	r17, r27
     a5e:	a5 c0       	rjmp	.+330    	; 0xbaa <__pack_f+0x178>
     a60:	84 30       	cpi	r24, 0x04	; 4
     a62:	09 f4       	brne	.+2      	; 0xa66 <__pack_f+0x34>
     a64:	9f c0       	rjmp	.+318    	; 0xba4 <__pack_f+0x172>
     a66:	82 30       	cpi	r24, 0x02	; 2
     a68:	21 f4       	brne	.+8      	; 0xa72 <__pack_f+0x40>
     a6a:	ee 24       	eor	r14, r14
     a6c:	ff 24       	eor	r15, r15
     a6e:	87 01       	movw	r16, r14
     a70:	05 c0       	rjmp	.+10     	; 0xa7c <__pack_f+0x4a>
     a72:	e1 14       	cp	r14, r1
     a74:	f1 04       	cpc	r15, r1
     a76:	01 05       	cpc	r16, r1
     a78:	11 05       	cpc	r17, r1
     a7a:	19 f4       	brne	.+6      	; 0xa82 <__pack_f+0x50>
     a7c:	e0 e0       	ldi	r30, 0x00	; 0
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	96 c0       	rjmp	.+300    	; 0xbae <__pack_f+0x17c>
     a82:	62 81       	ldd	r22, Z+2	; 0x02
     a84:	73 81       	ldd	r23, Z+3	; 0x03
     a86:	9f ef       	ldi	r25, 0xFF	; 255
     a88:	62 38       	cpi	r22, 0x82	; 130
     a8a:	79 07       	cpc	r23, r25
     a8c:	0c f0       	brlt	.+2      	; 0xa90 <__pack_f+0x5e>
     a8e:	5b c0       	rjmp	.+182    	; 0xb46 <__pack_f+0x114>
     a90:	22 e8       	ldi	r18, 0x82	; 130
     a92:	3f ef       	ldi	r19, 0xFF	; 255
     a94:	26 1b       	sub	r18, r22
     a96:	37 0b       	sbc	r19, r23
     a98:	2a 31       	cpi	r18, 0x1A	; 26
     a9a:	31 05       	cpc	r19, r1
     a9c:	2c f0       	brlt	.+10     	; 0xaa8 <__pack_f+0x76>
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	2a c0       	rjmp	.+84     	; 0xafc <__pack_f+0xca>
     aa8:	b8 01       	movw	r22, r16
     aaa:	a7 01       	movw	r20, r14
     aac:	02 2e       	mov	r0, r18
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <__pack_f+0x86>
     ab0:	76 95       	lsr	r23
     ab2:	67 95       	ror	r22
     ab4:	57 95       	ror	r21
     ab6:	47 95       	ror	r20
     ab8:	0a 94       	dec	r0
     aba:	d2 f7       	brpl	.-12     	; 0xab0 <__pack_f+0x7e>
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	04 c0       	rjmp	.+8      	; 0xace <__pack_f+0x9c>
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	aa 1f       	adc	r26, r26
     acc:	bb 1f       	adc	r27, r27
     ace:	2a 95       	dec	r18
     ad0:	d2 f7       	brpl	.-12     	; 0xac6 <__pack_f+0x94>
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	a1 09       	sbc	r26, r1
     ad6:	b1 09       	sbc	r27, r1
     ad8:	8e 21       	and	r24, r14
     ada:	9f 21       	and	r25, r15
     adc:	a0 23       	and	r26, r16
     ade:	b1 23       	and	r27, r17
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	a1 05       	cpc	r26, r1
     ae4:	b1 05       	cpc	r27, r1
     ae6:	21 f0       	breq	.+8      	; 0xaf0 <__pack_f+0xbe>
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	a0 e0       	ldi	r26, 0x00	; 0
     aee:	b0 e0       	ldi	r27, 0x00	; 0
     af0:	9a 01       	movw	r18, r20
     af2:	ab 01       	movw	r20, r22
     af4:	28 2b       	or	r18, r24
     af6:	39 2b       	or	r19, r25
     af8:	4a 2b       	or	r20, r26
     afa:	5b 2b       	or	r21, r27
     afc:	da 01       	movw	r26, r20
     afe:	c9 01       	movw	r24, r18
     b00:	8f 77       	andi	r24, 0x7F	; 127
     b02:	90 70       	andi	r25, 0x00	; 0
     b04:	a0 70       	andi	r26, 0x00	; 0
     b06:	b0 70       	andi	r27, 0x00	; 0
     b08:	80 34       	cpi	r24, 0x40	; 64
     b0a:	91 05       	cpc	r25, r1
     b0c:	a1 05       	cpc	r26, r1
     b0e:	b1 05       	cpc	r27, r1
     b10:	39 f4       	brne	.+14     	; 0xb20 <__pack_f+0xee>
     b12:	27 ff       	sbrs	r18, 7
     b14:	09 c0       	rjmp	.+18     	; 0xb28 <__pack_f+0xf6>
     b16:	20 5c       	subi	r18, 0xC0	; 192
     b18:	3f 4f       	sbci	r19, 0xFF	; 255
     b1a:	4f 4f       	sbci	r20, 0xFF	; 255
     b1c:	5f 4f       	sbci	r21, 0xFF	; 255
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__pack_f+0xf6>
     b20:	21 5c       	subi	r18, 0xC1	; 193
     b22:	3f 4f       	sbci	r19, 0xFF	; 255
     b24:	4f 4f       	sbci	r20, 0xFF	; 255
     b26:	5f 4f       	sbci	r21, 0xFF	; 255
     b28:	e0 e0       	ldi	r30, 0x00	; 0
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	20 30       	cpi	r18, 0x00	; 0
     b2e:	a0 e0       	ldi	r26, 0x00	; 0
     b30:	3a 07       	cpc	r19, r26
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	4a 07       	cpc	r20, r26
     b36:	a0 e4       	ldi	r26, 0x40	; 64
     b38:	5a 07       	cpc	r21, r26
     b3a:	10 f0       	brcs	.+4      	; 0xb40 <__pack_f+0x10e>
     b3c:	e1 e0       	ldi	r30, 0x01	; 1
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	79 01       	movw	r14, r18
     b42:	8a 01       	movw	r16, r20
     b44:	27 c0       	rjmp	.+78     	; 0xb94 <__pack_f+0x162>
     b46:	60 38       	cpi	r22, 0x80	; 128
     b48:	71 05       	cpc	r23, r1
     b4a:	64 f5       	brge	.+88     	; 0xba4 <__pack_f+0x172>
     b4c:	fb 01       	movw	r30, r22
     b4e:	e1 58       	subi	r30, 0x81	; 129
     b50:	ff 4f       	sbci	r31, 0xFF	; 255
     b52:	d8 01       	movw	r26, r16
     b54:	c7 01       	movw	r24, r14
     b56:	8f 77       	andi	r24, 0x7F	; 127
     b58:	90 70       	andi	r25, 0x00	; 0
     b5a:	a0 70       	andi	r26, 0x00	; 0
     b5c:	b0 70       	andi	r27, 0x00	; 0
     b5e:	80 34       	cpi	r24, 0x40	; 64
     b60:	91 05       	cpc	r25, r1
     b62:	a1 05       	cpc	r26, r1
     b64:	b1 05       	cpc	r27, r1
     b66:	39 f4       	brne	.+14     	; 0xb76 <__pack_f+0x144>
     b68:	e7 fe       	sbrs	r14, 7
     b6a:	0d c0       	rjmp	.+26     	; 0xb86 <__pack_f+0x154>
     b6c:	80 e4       	ldi	r24, 0x40	; 64
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x14c>
     b76:	8f e3       	ldi	r24, 0x3F	; 63
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	a0 e0       	ldi	r26, 0x00	; 0
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e8 0e       	add	r14, r24
     b80:	f9 1e       	adc	r15, r25
     b82:	0a 1f       	adc	r16, r26
     b84:	1b 1f       	adc	r17, r27
     b86:	17 ff       	sbrs	r17, 7
     b88:	05 c0       	rjmp	.+10     	; 0xb94 <__pack_f+0x162>
     b8a:	16 95       	lsr	r17
     b8c:	07 95       	ror	r16
     b8e:	f7 94       	ror	r15
     b90:	e7 94       	ror	r14
     b92:	31 96       	adiw	r30, 0x01	; 1
     b94:	87 e0       	ldi	r24, 0x07	; 7
     b96:	16 95       	lsr	r17
     b98:	07 95       	ror	r16
     b9a:	f7 94       	ror	r15
     b9c:	e7 94       	ror	r14
     b9e:	8a 95       	dec	r24
     ba0:	d1 f7       	brne	.-12     	; 0xb96 <__pack_f+0x164>
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <__pack_f+0x17c>
     ba4:	ee 24       	eor	r14, r14
     ba6:	ff 24       	eor	r15, r15
     ba8:	87 01       	movw	r16, r14
     baa:	ef ef       	ldi	r30, 0xFF	; 255
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	6e 2f       	mov	r22, r30
     bb0:	67 95       	ror	r22
     bb2:	66 27       	eor	r22, r22
     bb4:	67 95       	ror	r22
     bb6:	90 2f       	mov	r25, r16
     bb8:	9f 77       	andi	r25, 0x7F	; 127
     bba:	d7 94       	ror	r13
     bbc:	dd 24       	eor	r13, r13
     bbe:	d7 94       	ror	r13
     bc0:	8e 2f       	mov	r24, r30
     bc2:	86 95       	lsr	r24
     bc4:	49 2f       	mov	r20, r25
     bc6:	46 2b       	or	r20, r22
     bc8:	58 2f       	mov	r21, r24
     bca:	5d 29       	or	r21, r13
     bcc:	b7 01       	movw	r22, r14
     bce:	ca 01       	movw	r24, r20
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	ff 90       	pop	r15
     bd6:	ef 90       	pop	r14
     bd8:	df 90       	pop	r13
     bda:	08 95       	ret

00000bdc <__unpack_f>:
     bdc:	fc 01       	movw	r30, r24
     bde:	db 01       	movw	r26, r22
     be0:	40 81       	ld	r20, Z
     be2:	51 81       	ldd	r21, Z+1	; 0x01
     be4:	22 81       	ldd	r18, Z+2	; 0x02
     be6:	62 2f       	mov	r22, r18
     be8:	6f 77       	andi	r22, 0x7F	; 127
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	22 1f       	adc	r18, r18
     bee:	22 27       	eor	r18, r18
     bf0:	22 1f       	adc	r18, r18
     bf2:	93 81       	ldd	r25, Z+3	; 0x03
     bf4:	89 2f       	mov	r24, r25
     bf6:	88 0f       	add	r24, r24
     bf8:	82 2b       	or	r24, r18
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	99 1f       	adc	r25, r25
     c00:	99 27       	eor	r25, r25
     c02:	99 1f       	adc	r25, r25
     c04:	11 96       	adiw	r26, 0x01	; 1
     c06:	9c 93       	st	X, r25
     c08:	11 97       	sbiw	r26, 0x01	; 1
     c0a:	21 15       	cp	r18, r1
     c0c:	31 05       	cpc	r19, r1
     c0e:	a9 f5       	brne	.+106    	; 0xc7a <__unpack_f+0x9e>
     c10:	41 15       	cp	r20, r1
     c12:	51 05       	cpc	r21, r1
     c14:	61 05       	cpc	r22, r1
     c16:	71 05       	cpc	r23, r1
     c18:	11 f4       	brne	.+4      	; 0xc1e <__unpack_f+0x42>
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	37 c0       	rjmp	.+110    	; 0xc8c <__unpack_f+0xb0>
     c1e:	82 e8       	ldi	r24, 0x82	; 130
     c20:	9f ef       	ldi	r25, 0xFF	; 255
     c22:	13 96       	adiw	r26, 0x03	; 3
     c24:	9c 93       	st	X, r25
     c26:	8e 93       	st	-X, r24
     c28:	12 97       	sbiw	r26, 0x02	; 2
     c2a:	9a 01       	movw	r18, r20
     c2c:	ab 01       	movw	r20, r22
     c2e:	67 e0       	ldi	r22, 0x07	; 7
     c30:	22 0f       	add	r18, r18
     c32:	33 1f       	adc	r19, r19
     c34:	44 1f       	adc	r20, r20
     c36:	55 1f       	adc	r21, r21
     c38:	6a 95       	dec	r22
     c3a:	d1 f7       	brne	.-12     	; 0xc30 <__unpack_f+0x54>
     c3c:	83 e0       	ldi	r24, 0x03	; 3
     c3e:	8c 93       	st	X, r24
     c40:	0d c0       	rjmp	.+26     	; 0xc5c <__unpack_f+0x80>
     c42:	22 0f       	add	r18, r18
     c44:	33 1f       	adc	r19, r19
     c46:	44 1f       	adc	r20, r20
     c48:	55 1f       	adc	r21, r21
     c4a:	12 96       	adiw	r26, 0x02	; 2
     c4c:	8d 91       	ld	r24, X+
     c4e:	9c 91       	ld	r25, X
     c50:	13 97       	sbiw	r26, 0x03	; 3
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	13 96       	adiw	r26, 0x03	; 3
     c56:	9c 93       	st	X, r25
     c58:	8e 93       	st	-X, r24
     c5a:	12 97       	sbiw	r26, 0x02	; 2
     c5c:	20 30       	cpi	r18, 0x00	; 0
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	38 07       	cpc	r19, r24
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	48 07       	cpc	r20, r24
     c66:	80 e4       	ldi	r24, 0x40	; 64
     c68:	58 07       	cpc	r21, r24
     c6a:	58 f3       	brcs	.-42     	; 0xc42 <__unpack_f+0x66>
     c6c:	14 96       	adiw	r26, 0x04	; 4
     c6e:	2d 93       	st	X+, r18
     c70:	3d 93       	st	X+, r19
     c72:	4d 93       	st	X+, r20
     c74:	5c 93       	st	X, r21
     c76:	17 97       	sbiw	r26, 0x07	; 7
     c78:	08 95       	ret
     c7a:	2f 3f       	cpi	r18, 0xFF	; 255
     c7c:	31 05       	cpc	r19, r1
     c7e:	79 f4       	brne	.+30     	; 0xc9e <__unpack_f+0xc2>
     c80:	41 15       	cp	r20, r1
     c82:	51 05       	cpc	r21, r1
     c84:	61 05       	cpc	r22, r1
     c86:	71 05       	cpc	r23, r1
     c88:	19 f4       	brne	.+6      	; 0xc90 <__unpack_f+0xb4>
     c8a:	84 e0       	ldi	r24, 0x04	; 4
     c8c:	8c 93       	st	X, r24
     c8e:	08 95       	ret
     c90:	64 ff       	sbrs	r22, 4
     c92:	03 c0       	rjmp	.+6      	; 0xc9a <__unpack_f+0xbe>
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	8c 93       	st	X, r24
     c98:	12 c0       	rjmp	.+36     	; 0xcbe <__unpack_f+0xe2>
     c9a:	1c 92       	st	X, r1
     c9c:	10 c0       	rjmp	.+32     	; 0xcbe <__unpack_f+0xe2>
     c9e:	2f 57       	subi	r18, 0x7F	; 127
     ca0:	30 40       	sbci	r19, 0x00	; 0
     ca2:	13 96       	adiw	r26, 0x03	; 3
     ca4:	3c 93       	st	X, r19
     ca6:	2e 93       	st	-X, r18
     ca8:	12 97       	sbiw	r26, 0x02	; 2
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	8c 93       	st	X, r24
     cae:	87 e0       	ldi	r24, 0x07	; 7
     cb0:	44 0f       	add	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	66 1f       	adc	r22, r22
     cb6:	77 1f       	adc	r23, r23
     cb8:	8a 95       	dec	r24
     cba:	d1 f7       	brne	.-12     	; 0xcb0 <__unpack_f+0xd4>
     cbc:	70 64       	ori	r23, 0x40	; 64
     cbe:	14 96       	adiw	r26, 0x04	; 4
     cc0:	4d 93       	st	X+, r20
     cc2:	5d 93       	st	X+, r21
     cc4:	6d 93       	st	X+, r22
     cc6:	7c 93       	st	X, r23
     cc8:	17 97       	sbiw	r26, 0x07	; 7
     cca:	08 95       	ret

00000ccc <__fpcmp_parts_f>:
     ccc:	1f 93       	push	r17
     cce:	dc 01       	movw	r26, r24
     cd0:	fb 01       	movw	r30, r22
     cd2:	9c 91       	ld	r25, X
     cd4:	92 30       	cpi	r25, 0x02	; 2
     cd6:	08 f4       	brcc	.+2      	; 0xcda <__fpcmp_parts_f+0xe>
     cd8:	47 c0       	rjmp	.+142    	; 0xd68 <__fpcmp_parts_f+0x9c>
     cda:	80 81       	ld	r24, Z
     cdc:	82 30       	cpi	r24, 0x02	; 2
     cde:	08 f4       	brcc	.+2      	; 0xce2 <__fpcmp_parts_f+0x16>
     ce0:	43 c0       	rjmp	.+134    	; 0xd68 <__fpcmp_parts_f+0x9c>
     ce2:	94 30       	cpi	r25, 0x04	; 4
     ce4:	51 f4       	brne	.+20     	; 0xcfa <__fpcmp_parts_f+0x2e>
     ce6:	11 96       	adiw	r26, 0x01	; 1
     ce8:	1c 91       	ld	r17, X
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	99 f5       	brne	.+102    	; 0xd54 <__fpcmp_parts_f+0x88>
     cee:	81 81       	ldd	r24, Z+1	; 0x01
     cf0:	68 2f       	mov	r22, r24
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	61 1b       	sub	r22, r17
     cf6:	71 09       	sbc	r23, r1
     cf8:	3f c0       	rjmp	.+126    	; 0xd78 <__fpcmp_parts_f+0xac>
     cfa:	84 30       	cpi	r24, 0x04	; 4
     cfc:	21 f0       	breq	.+8      	; 0xd06 <__fpcmp_parts_f+0x3a>
     cfe:	92 30       	cpi	r25, 0x02	; 2
     d00:	31 f4       	brne	.+12     	; 0xd0e <__fpcmp_parts_f+0x42>
     d02:	82 30       	cpi	r24, 0x02	; 2
     d04:	b9 f1       	breq	.+110    	; 0xd74 <__fpcmp_parts_f+0xa8>
     d06:	81 81       	ldd	r24, Z+1	; 0x01
     d08:	88 23       	and	r24, r24
     d0a:	89 f1       	breq	.+98     	; 0xd6e <__fpcmp_parts_f+0xa2>
     d0c:	2d c0       	rjmp	.+90     	; 0xd68 <__fpcmp_parts_f+0x9c>
     d0e:	11 96       	adiw	r26, 0x01	; 1
     d10:	1c 91       	ld	r17, X
     d12:	11 97       	sbiw	r26, 0x01	; 1
     d14:	82 30       	cpi	r24, 0x02	; 2
     d16:	f1 f0       	breq	.+60     	; 0xd54 <__fpcmp_parts_f+0x88>
     d18:	81 81       	ldd	r24, Z+1	; 0x01
     d1a:	18 17       	cp	r17, r24
     d1c:	d9 f4       	brne	.+54     	; 0xd54 <__fpcmp_parts_f+0x88>
     d1e:	12 96       	adiw	r26, 0x02	; 2
     d20:	2d 91       	ld	r18, X+
     d22:	3c 91       	ld	r19, X
     d24:	13 97       	sbiw	r26, 0x03	; 3
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	93 81       	ldd	r25, Z+3	; 0x03
     d2a:	82 17       	cp	r24, r18
     d2c:	93 07       	cpc	r25, r19
     d2e:	94 f0       	brlt	.+36     	; 0xd54 <__fpcmp_parts_f+0x88>
     d30:	28 17       	cp	r18, r24
     d32:	39 07       	cpc	r19, r25
     d34:	bc f0       	brlt	.+46     	; 0xd64 <__fpcmp_parts_f+0x98>
     d36:	14 96       	adiw	r26, 0x04	; 4
     d38:	8d 91       	ld	r24, X+
     d3a:	9d 91       	ld	r25, X+
     d3c:	0d 90       	ld	r0, X+
     d3e:	bc 91       	ld	r27, X
     d40:	a0 2d       	mov	r26, r0
     d42:	24 81       	ldd	r18, Z+4	; 0x04
     d44:	35 81       	ldd	r19, Z+5	; 0x05
     d46:	46 81       	ldd	r20, Z+6	; 0x06
     d48:	57 81       	ldd	r21, Z+7	; 0x07
     d4a:	28 17       	cp	r18, r24
     d4c:	39 07       	cpc	r19, r25
     d4e:	4a 07       	cpc	r20, r26
     d50:	5b 07       	cpc	r21, r27
     d52:	18 f4       	brcc	.+6      	; 0xd5a <__fpcmp_parts_f+0x8e>
     d54:	11 23       	and	r17, r17
     d56:	41 f0       	breq	.+16     	; 0xd68 <__fpcmp_parts_f+0x9c>
     d58:	0a c0       	rjmp	.+20     	; 0xd6e <__fpcmp_parts_f+0xa2>
     d5a:	82 17       	cp	r24, r18
     d5c:	93 07       	cpc	r25, r19
     d5e:	a4 07       	cpc	r26, r20
     d60:	b5 07       	cpc	r27, r21
     d62:	40 f4       	brcc	.+16     	; 0xd74 <__fpcmp_parts_f+0xa8>
     d64:	11 23       	and	r17, r17
     d66:	19 f0       	breq	.+6      	; 0xd6e <__fpcmp_parts_f+0xa2>
     d68:	61 e0       	ldi	r22, 0x01	; 1
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	05 c0       	rjmp	.+10     	; 0xd78 <__fpcmp_parts_f+0xac>
     d6e:	6f ef       	ldi	r22, 0xFF	; 255
     d70:	7f ef       	ldi	r23, 0xFF	; 255
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <__fpcmp_parts_f+0xac>
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	cb 01       	movw	r24, r22
     d7a:	1f 91       	pop	r17
     d7c:	08 95       	ret

00000d7e <PGM_readPtrToRam>:
 * @param __addr16 The 16-bit address in program memory to read.
 * @return Pointer to the corresponding location in RAM.
 */
static uint8*
PGM_readPtrToRam(const uint16_t a_addr16)
    {
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	00 d0       	rcall	.+0      	; 0xd84 <PGM_readPtrToRam+0x6>
     d84:	00 d0       	rcall	.+0      	; 0xd86 <PGM_readPtrToRam+0x8>
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	9c 83       	std	Y+4, r25	; 0x04
     d8c:	8b 83       	std	Y+3, r24	; 0x03
    uint16_t ram_addr;

    /* Use inline assembly to read two bytes from program memory (flash)*/
    __asm__ volatile (
     d8e:	eb 81       	ldd	r30, Y+3	; 0x03
     d90:	fc 81       	ldd	r31, Y+4	; 0x04
     d92:	85 91       	lpm	r24, Z+
     d94:	94 91       	lpm	r25, Z+
     d96:	9a 83       	std	Y+2, r25	; 0x02
     d98:	89 83       	std	Y+1, r24	; 0x01
	    : "=r" (ram_addr) /* Output: ram_addr is where the 16-bit address is stored */
	    : "z" (a_addr16) /* Input: Z register holds the flash memory address (__addr16) */
    );

    /* Return the loaded 16-bit address as a pointer to RAM*/
    return (uint8*) ram_addr;
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    }
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <GPIO_setupPortDirection>:
 *
 * @param port_num Port_ID PORTA_ID, PORTB_IB ,...etc
 * @param a_value The desired direction PORT_INPUT,PORT_OUTPUT or the desired value
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction)
    {
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <GPIO_setupPortDirection+0x6>
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <GPIO_setupPortDirection+0x8>
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	89 83       	std	Y+1, r24	; 0x01
     dba:	6a 83       	std	Y+2, r22	; 0x02
    /*
     * Check if the input number is greater than NUM_OF_PORTS value.
     * In this case the input is not valid port number
     */
    if (port_num >= NUM_OF_PORTS)
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	84 30       	cpi	r24, 0x04	; 4
     dc0:	90 f5       	brcc	.+100    	; 0xe26 <GPIO_setupPortDirection+0x7a>
	/* Do Nothing */
	}
    else
	{
	/* Setup the port direction as required */
	switch (port_num)
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	3c 83       	std	Y+4, r19	; 0x04
     dca:	2b 83       	std	Y+3, r18	; 0x03
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	9c 81       	ldd	r25, Y+4	; 0x04
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	91 05       	cpc	r25, r1
     dd4:	d1 f0       	breq	.+52     	; 0xe0a <GPIO_setupPortDirection+0x5e>
     dd6:	2b 81       	ldd	r18, Y+3	; 0x03
     dd8:	3c 81       	ldd	r19, Y+4	; 0x04
     dda:	22 30       	cpi	r18, 0x02	; 2
     ddc:	31 05       	cpc	r19, r1
     dde:	2c f4       	brge	.+10     	; 0xdea <GPIO_setupPortDirection+0x3e>
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	61 f0       	breq	.+24     	; 0xe00 <GPIO_setupPortDirection+0x54>
     de8:	1e c0       	rjmp	.+60     	; 0xe26 <GPIO_setupPortDirection+0x7a>
     dea:	2b 81       	ldd	r18, Y+3	; 0x03
     dec:	3c 81       	ldd	r19, Y+4	; 0x04
     dee:	22 30       	cpi	r18, 0x02	; 2
     df0:	31 05       	cpc	r19, r1
     df2:	81 f0       	breq	.+32     	; 0xe14 <GPIO_setupPortDirection+0x68>
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	91 05       	cpc	r25, r1
     dfc:	81 f0       	breq	.+32     	; 0xe1e <GPIO_setupPortDirection+0x72>
     dfe:	13 c0       	rjmp	.+38     	; 0xe26 <GPIO_setupPortDirection+0x7a>
	    {
	case PORTA_ID:
	    DDRA = direction;
     e00:	ea e3       	ldi	r30, 0x3A	; 58
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	80 83       	st	Z, r24
     e08:	0e c0       	rjmp	.+28     	; 0xe26 <GPIO_setupPortDirection+0x7a>
	    break;
	case PORTB_ID:
	    DDRB = direction;
     e0a:	e7 e3       	ldi	r30, 0x37	; 55
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	80 83       	st	Z, r24
     e12:	09 c0       	rjmp	.+18     	; 0xe26 <GPIO_setupPortDirection+0x7a>
	    break;
	case PORTC_ID:
	    DDRC = direction;
     e14:	e4 e3       	ldi	r30, 0x34	; 52
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	80 83       	st	Z, r24
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <GPIO_setupPortDirection+0x7a>
	    break;
	case PORTD_ID:
	    DDRD = direction;
     e1e:	e1 e3       	ldi	r30, 0x31	; 49
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	80 83       	st	Z, r24
	    break;
	    }
	}
    }
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <GPIO_writePort>:
 * @param port_num Port_ID PORTA_ID, PORTB_IB ,...etc
 * @param a_value The desired 8-bit  value to be set into the port.
 */

void GPIO_writePort(uint8 port_num, uint8 value)
    {
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	00 d0       	rcall	.+0      	; 0xe3a <GPIO_writePort+0x6>
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <GPIO_writePort+0x8>
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	89 83       	std	Y+1, r24	; 0x01
     e42:	6a 83       	std	Y+2, r22	; 0x02

    if (port_num >= NUM_OF_PORTS)
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	90 f5       	brcc	.+100    	; 0xeae <GPIO_writePort+0x7a>
	/* Do Nothing */
	}
    else
	{

	switch (port_num)
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	3c 83       	std	Y+4, r19	; 0x04
     e52:	2b 83       	std	Y+3, r18	; 0x03
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	9c 81       	ldd	r25, Y+4	; 0x04
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	91 05       	cpc	r25, r1
     e5c:	d1 f0       	breq	.+52     	; 0xe92 <GPIO_writePort+0x5e>
     e5e:	2b 81       	ldd	r18, Y+3	; 0x03
     e60:	3c 81       	ldd	r19, Y+4	; 0x04
     e62:	22 30       	cpi	r18, 0x02	; 2
     e64:	31 05       	cpc	r19, r1
     e66:	2c f4       	brge	.+10     	; 0xe72 <GPIO_writePort+0x3e>
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	9c 81       	ldd	r25, Y+4	; 0x04
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	61 f0       	breq	.+24     	; 0xe88 <GPIO_writePort+0x54>
     e70:	1e c0       	rjmp	.+60     	; 0xeae <GPIO_writePort+0x7a>
     e72:	2b 81       	ldd	r18, Y+3	; 0x03
     e74:	3c 81       	ldd	r19, Y+4	; 0x04
     e76:	22 30       	cpi	r18, 0x02	; 2
     e78:	31 05       	cpc	r19, r1
     e7a:	81 f0       	breq	.+32     	; 0xe9c <GPIO_writePort+0x68>
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	9c 81       	ldd	r25, Y+4	; 0x04
     e80:	83 30       	cpi	r24, 0x03	; 3
     e82:	91 05       	cpc	r25, r1
     e84:	81 f0       	breq	.+32     	; 0xea6 <GPIO_writePort+0x72>
     e86:	13 c0       	rjmp	.+38     	; 0xeae <GPIO_writePort+0x7a>
	    {
	case PORTA_ID:
	    PORTA = value;
     e88:	eb e3       	ldi	r30, 0x3B	; 59
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	80 83       	st	Z, r24
     e90:	0e c0       	rjmp	.+28     	; 0xeae <GPIO_writePort+0x7a>
	    break;
	case PORTB_ID:
	    PORTB = value;
     e92:	e8 e3       	ldi	r30, 0x38	; 56
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	80 83       	st	Z, r24
     e9a:	09 c0       	rjmp	.+18     	; 0xeae <GPIO_writePort+0x7a>
	    break;
	case PORTC_ID:
	    PORTC = value;
     e9c:	e5 e3       	ldi	r30, 0x35	; 53
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	80 83       	st	Z, r24
     ea4:	04 c0       	rjmp	.+8      	; 0xeae <GPIO_writePort+0x7a>
	    break;
	case PORTD_ID:
	    PORTD = value;
     ea6:	e2 e3       	ldi	r30, 0x32	; 50
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	80 83       	st	Z, r24
	    break;
	    }
	}
    }
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <GPIO_setupPinDirection>:
 * @param a_port The port ID (PORTA_ID, PORTB_ID, etc.)
 * @param a_pin The pin number on the port.
 * @param a_state The desired direction (PIN_INPUT, PIN_OUTPUT, PIN_INPUT_PULLUP).
 */
void GPIO_setupPinDirection(uint8 a_port, uint8 a_pin, uint8 a_state)
    {
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	2d 97       	sbiw	r28, 0x0d	; 13
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	6a 83       	std	Y+2, r22	; 0x02
     ed4:	4b 83       	std	Y+3, r20	; 0x03
    switch (a_port)
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	3d 87       	std	Y+13, r19	; 0x0d
     ede:	2c 87       	std	Y+12, r18	; 0x0c
     ee0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ee2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	91 05       	cpc	r25, r1
     ee8:	09 f4       	brne	.+2      	; 0xeec <GPIO_setupPinDirection+0x30>
     eea:	7b c0       	rjmp	.+246    	; 0xfe2 <GPIO_setupPinDirection+0x126>
     eec:	2c 85       	ldd	r18, Y+12	; 0x0c
     eee:	3d 85       	ldd	r19, Y+13	; 0x0d
     ef0:	22 30       	cpi	r18, 0x02	; 2
     ef2:	31 05       	cpc	r19, r1
     ef4:	2c f4       	brge	.+10     	; 0xf00 <GPIO_setupPinDirection+0x44>
     ef6:	8c 85       	ldd	r24, Y+12	; 0x0c
     ef8:	9d 85       	ldd	r25, Y+13	; 0x0d
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	71 f0       	breq	.+28     	; 0xf1a <GPIO_setupPinDirection+0x5e>
     efe:	9c c1       	rjmp	.+824    	; 0x1238 <GPIO_setupPinDirection+0x37c>
     f00:	2c 85       	ldd	r18, Y+12	; 0x0c
     f02:	3d 85       	ldd	r19, Y+13	; 0x0d
     f04:	22 30       	cpi	r18, 0x02	; 2
     f06:	31 05       	cpc	r19, r1
     f08:	09 f4       	brne	.+2      	; 0xf0c <GPIO_setupPinDirection+0x50>
     f0a:	cf c0       	rjmp	.+414    	; 0x10aa <GPIO_setupPinDirection+0x1ee>
     f0c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f0e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f10:	83 30       	cpi	r24, 0x03	; 3
     f12:	91 05       	cpc	r25, r1
     f14:	09 f4       	brne	.+2      	; 0xf18 <GPIO_setupPinDirection+0x5c>
     f16:	2d c1       	rjmp	.+602    	; 0x1172 <GPIO_setupPinDirection+0x2b6>
     f18:	8f c1       	rjmp	.+798    	; 0x1238 <GPIO_setupPinDirection+0x37c>
	{
    case PORTA_ID:
	switch (a_state)
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	3b 87       	std	Y+11, r19	; 0x0b
     f22:	2a 87       	std	Y+10, r18	; 0x0a
     f24:	8a 85       	ldd	r24, Y+10	; 0x0a
     f26:	9b 85       	ldd	r25, Y+11	; 0x0b
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	91 05       	cpc	r25, r1
     f2c:	f9 f0       	breq	.+62     	; 0xf6c <GPIO_setupPinDirection+0xb0>
     f2e:	2a 85       	ldd	r18, Y+10	; 0x0a
     f30:	3b 85       	ldd	r19, Y+11	; 0x0b
     f32:	22 30       	cpi	r18, 0x02	; 2
     f34:	31 05       	cpc	r19, r1
     f36:	71 f1       	breq	.+92     	; 0xf94 <GPIO_setupPinDirection+0xd8>
     f38:	8a 85       	ldd	r24, Y+10	; 0x0a
     f3a:	9b 85       	ldd	r25, Y+11	; 0x0b
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	09 f0       	breq	.+2      	; 0xf42 <GPIO_setupPinDirection+0x86>
     f40:	7b c1       	rjmp	.+758    	; 0x1238 <GPIO_setupPinDirection+0x37c>
	    {
	case PIN_INPUT:
	    CLEAR_BIT(DDRA, a_pin);
     f42:	aa e3       	ldi	r26, 0x3A	; 58
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ea e3       	ldi	r30, 0x3A	; 58
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <GPIO_setupPinDirection+0xa4>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <GPIO_setupPinDirection+0xa0>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	66 c1       	rjmp	.+716    	; 0x1238 <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_OUTPUT:
	    SET_BIT(DDRA, a_pin);
     f6c:	aa e3       	ldi	r26, 0x3A	; 58
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	ea e3       	ldi	r30, 0x3A	; 58
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <GPIO_setupPinDirection+0xce>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <GPIO_setupPinDirection+0xca>
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	52 c1       	rjmp	.+676    	; 0x1238 <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_INPUT_PULLUP:
	    CLEAR_BIT(DDRA, a_pin);
     f94:	aa e3       	ldi	r26, 0x3A	; 58
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ea e3       	ldi	r30, 0x3A	; 58
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <GPIO_setupPinDirection+0xf4>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	2a 95       	dec	r18
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <GPIO_setupPinDirection+0xf0>
     fb4:	80 95       	com	r24
     fb6:	84 23       	and	r24, r20
     fb8:	8c 93       	st	X, r24
	    SET_BIT(PORTA, a_pin);
     fba:	ab e3       	ldi	r26, 0x3B	; 59
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	eb e3       	ldi	r30, 0x3B	; 59
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <GPIO_setupPinDirection+0x11c>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <GPIO_setupPinDirection+0x118>
     fdc:	84 2b       	or	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	2b c1       	rjmp	.+598    	; 0x1238 <GPIO_setupPinDirection+0x37c>
	    break;
	    }
	break;

    case PORTB_ID:
	switch (a_state)
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	39 87       	std	Y+9, r19	; 0x09
     fea:	28 87       	std	Y+8, r18	; 0x08
     fec:	88 85       	ldd	r24, Y+8	; 0x08
     fee:	99 85       	ldd	r25, Y+9	; 0x09
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	91 05       	cpc	r25, r1
     ff4:	f9 f0       	breq	.+62     	; 0x1034 <GPIO_setupPinDirection+0x178>
     ff6:	28 85       	ldd	r18, Y+8	; 0x08
     ff8:	39 85       	ldd	r19, Y+9	; 0x09
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	71 f1       	breq	.+92     	; 0x105c <GPIO_setupPinDirection+0x1a0>
    1000:	88 85       	ldd	r24, Y+8	; 0x08
    1002:	99 85       	ldd	r25, Y+9	; 0x09
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	09 f0       	breq	.+2      	; 0x100a <GPIO_setupPinDirection+0x14e>
    1008:	17 c1       	rjmp	.+558    	; 0x1238 <GPIO_setupPinDirection+0x37c>
	    {
	case PIN_INPUT:
	    CLEAR_BIT(DDRB, a_pin);
    100a:	a7 e3       	ldi	r26, 0x37	; 55
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e7 e3       	ldi	r30, 0x37	; 55
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <GPIO_setupPinDirection+0x16c>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <GPIO_setupPinDirection+0x168>
    102c:	80 95       	com	r24
    102e:	84 23       	and	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	02 c1       	rjmp	.+516    	; 0x1238 <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_OUTPUT:
	    SET_BIT(DDRB, a_pin);
    1034:	a7 e3       	ldi	r26, 0x37	; 55
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e7 e3       	ldi	r30, 0x37	; 55
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <GPIO_setupPinDirection+0x196>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <GPIO_setupPinDirection+0x192>
    1056:	84 2b       	or	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	ee c0       	rjmp	.+476    	; 0x1238 <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_INPUT_PULLUP:
	    CLEAR_BIT(DDRB, a_pin);
    105c:	a7 e3       	ldi	r26, 0x37	; 55
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e7 e3       	ldi	r30, 0x37	; 55
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <GPIO_setupPinDirection+0x1bc>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	2a 95       	dec	r18
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <GPIO_setupPinDirection+0x1b8>
    107c:	80 95       	com	r24
    107e:	84 23       	and	r24, r20
    1080:	8c 93       	st	X, r24
	    SET_BIT(PORTB, a_pin);
    1082:	a8 e3       	ldi	r26, 0x38	; 56
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e8 e3       	ldi	r30, 0x38	; 56
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <GPIO_setupPinDirection+0x1e4>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <GPIO_setupPinDirection+0x1e0>
    10a4:	84 2b       	or	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	c7 c0       	rjmp	.+398    	; 0x1238 <GPIO_setupPinDirection+0x37c>
	    break;
	    }
	break;

    case PORTC_ID:
	switch (a_state)
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	3f 83       	std	Y+7, r19	; 0x07
    10b2:	2e 83       	std	Y+6, r18	; 0x06
    10b4:	8e 81       	ldd	r24, Y+6	; 0x06
    10b6:	9f 81       	ldd	r25, Y+7	; 0x07
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	91 05       	cpc	r25, r1
    10bc:	f9 f0       	breq	.+62     	; 0x10fc <GPIO_setupPinDirection+0x240>
    10be:	2e 81       	ldd	r18, Y+6	; 0x06
    10c0:	3f 81       	ldd	r19, Y+7	; 0x07
    10c2:	22 30       	cpi	r18, 0x02	; 2
    10c4:	31 05       	cpc	r19, r1
    10c6:	71 f1       	breq	.+92     	; 0x1124 <GPIO_setupPinDirection+0x268>
    10c8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ca:	9f 81       	ldd	r25, Y+7	; 0x07
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <GPIO_setupPinDirection+0x216>
    10d0:	b3 c0       	rjmp	.+358    	; 0x1238 <GPIO_setupPinDirection+0x37c>
	    {
	case PIN_INPUT:
	    CLEAR_BIT(DDRC, a_pin);
    10d2:	a4 e3       	ldi	r26, 0x34	; 52
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e4 e3       	ldi	r30, 0x34	; 52
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <GPIO_setupPinDirection+0x234>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <GPIO_setupPinDirection+0x230>
    10f4:	80 95       	com	r24
    10f6:	84 23       	and	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	9e c0       	rjmp	.+316    	; 0x1238 <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_OUTPUT:
	    SET_BIT(DDRC, a_pin);
    10fc:	a4 e3       	ldi	r26, 0x34	; 52
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e4 e3       	ldi	r30, 0x34	; 52
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <GPIO_setupPinDirection+0x25e>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <GPIO_setupPinDirection+0x25a>
    111e:	84 2b       	or	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	8a c0       	rjmp	.+276    	; 0x1238 <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_INPUT_PULLUP:
	    CLEAR_BIT(DDRC, a_pin);
    1124:	a4 e3       	ldi	r26, 0x34	; 52
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e4 e3       	ldi	r30, 0x34	; 52
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <GPIO_setupPinDirection+0x284>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	2a 95       	dec	r18
    1142:	e2 f7       	brpl	.-8      	; 0x113c <GPIO_setupPinDirection+0x280>
    1144:	80 95       	com	r24
    1146:	84 23       	and	r24, r20
    1148:	8c 93       	st	X, r24
	    SET_BIT(PORTC, a_pin);
    114a:	a5 e3       	ldi	r26, 0x35	; 53
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e5 e3       	ldi	r30, 0x35	; 53
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_setupPinDirection+0x2ac>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_setupPinDirection+0x2a8>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	63 c0       	rjmp	.+198    	; 0x1238 <GPIO_setupPinDirection+0x37c>
	    break;
	    }
	break;

    case PORTD_ID:
	switch (a_state)
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3d 83       	std	Y+5, r19	; 0x05
    117a:	2c 83       	std	Y+4, r18	; 0x04
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	9d 81       	ldd	r25, Y+5	; 0x05
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	f9 f0       	breq	.+62     	; 0x11c4 <GPIO_setupPinDirection+0x308>
    1186:	2c 81       	ldd	r18, Y+4	; 0x04
    1188:	3d 81       	ldd	r19, Y+5	; 0x05
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	71 f1       	breq	.+92     	; 0x11ec <GPIO_setupPinDirection+0x330>
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	9d 81       	ldd	r25, Y+5	; 0x05
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	09 f0       	breq	.+2      	; 0x119a <GPIO_setupPinDirection+0x2de>
    1198:	4f c0       	rjmp	.+158    	; 0x1238 <GPIO_setupPinDirection+0x37c>
	    {
	case PIN_INPUT:
	    CLEAR_BIT(DDRD, a_pin);
    119a:	a1 e3       	ldi	r26, 0x31	; 49
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e1 e3       	ldi	r30, 0x31	; 49
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <GPIO_setupPinDirection+0x2fc>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <GPIO_setupPinDirection+0x2f8>
    11bc:	80 95       	com	r24
    11be:	84 23       	and	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	3a c0       	rjmp	.+116    	; 0x1238 <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_OUTPUT:
	    SET_BIT(DDRD, a_pin);
    11c4:	a1 e3       	ldi	r26, 0x31	; 49
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e1 e3       	ldi	r30, 0x31	; 49
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <GPIO_setupPinDirection+0x326>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <GPIO_setupPinDirection+0x322>
    11e6:	84 2b       	or	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	26 c0       	rjmp	.+76     	; 0x1238 <GPIO_setupPinDirection+0x37c>
	    break;
	case PIN_INPUT_PULLUP:
	    CLEAR_BIT(DDRD, a_pin);
    11ec:	a1 e3       	ldi	r26, 0x31	; 49
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	e1 e3       	ldi	r30, 0x31	; 49
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <GPIO_setupPinDirection+0x34c>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	2a 95       	dec	r18
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <GPIO_setupPinDirection+0x348>
    120c:	80 95       	com	r24
    120e:	84 23       	and	r24, r20
    1210:	8c 93       	st	X, r24
	    SET_BIT(PORTD, a_pin);
    1212:	a2 e3       	ldi	r26, 0x32	; 50
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e2 e3       	ldi	r30, 0x32	; 50
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <GPIO_setupPinDirection+0x374>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <GPIO_setupPinDirection+0x370>
    1234:	84 2b       	or	r24, r20
    1236:	8c 93       	st	X, r24
	    break;
	    }
	break;
	}
    }
    1238:	2d 96       	adiw	r28, 0x0d	; 13
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <GPIO_writePin>:
 * @param a_port The port ID (PORTA_ID, PORTB_ID, etc.)
 * @param a_pin The pin number on the port.
 * @param a_state The desired state (HIGH or LOW).
 */
void GPIO_writePin(uint8 a_port, uint8 a_pin, uint8 a_state)
    {
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	00 d0       	rcall	.+0      	; 0x1250 <GPIO_writePin+0x6>
    1250:	00 d0       	rcall	.+0      	; 0x1252 <GPIO_writePin+0x8>
    1252:	0f 92       	push	r0
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	6a 83       	std	Y+2, r22	; 0x02
    125c:	4b 83       	std	Y+3, r20	; 0x03
    switch (a_port)
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3d 83       	std	Y+5, r19	; 0x05
    1266:	2c 83       	std	Y+4, r18	; 0x04
    1268:	8c 81       	ldd	r24, Y+4	; 0x04
    126a:	9d 81       	ldd	r25, Y+5	; 0x05
    126c:	81 30       	cpi	r24, 0x01	; 1
    126e:	91 05       	cpc	r25, r1
    1270:	09 f4       	brne	.+2      	; 0x1274 <GPIO_writePin+0x2a>
    1272:	43 c0       	rjmp	.+134    	; 0x12fa <GPIO_writePin+0xb0>
    1274:	2c 81       	ldd	r18, Y+4	; 0x04
    1276:	3d 81       	ldd	r19, Y+5	; 0x05
    1278:	22 30       	cpi	r18, 0x02	; 2
    127a:	31 05       	cpc	r19, r1
    127c:	2c f4       	brge	.+10     	; 0x1288 <GPIO_writePin+0x3e>
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	9d 81       	ldd	r25, Y+5	; 0x05
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	71 f0       	breq	.+28     	; 0x12a2 <GPIO_writePin+0x58>
    1286:	bc c0       	rjmp	.+376    	; 0x1400 <GPIO_writePin+0x1b6>
    1288:	2c 81       	ldd	r18, Y+4	; 0x04
    128a:	3d 81       	ldd	r19, Y+5	; 0x05
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	09 f4       	brne	.+2      	; 0x1294 <GPIO_writePin+0x4a>
    1292:	5f c0       	rjmp	.+190    	; 0x1352 <GPIO_writePin+0x108>
    1294:	8c 81       	ldd	r24, Y+4	; 0x04
    1296:	9d 81       	ldd	r25, Y+5	; 0x05
    1298:	83 30       	cpi	r24, 0x03	; 3
    129a:	91 05       	cpc	r25, r1
    129c:	09 f4       	brne	.+2      	; 0x12a0 <GPIO_writePin+0x56>
    129e:	85 c0       	rjmp	.+266    	; 0x13aa <GPIO_writePin+0x160>
    12a0:	af c0       	rjmp	.+350    	; 0x1400 <GPIO_writePin+0x1b6>
	{
    case PORTA_ID:
	if (a_state == LOW)
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	88 23       	and	r24, r24
    12a6:	a9 f4       	brne	.+42     	; 0x12d2 <GPIO_writePin+0x88>
	    {
	    CLEAR_BIT(PORTA, a_pin);
    12a8:	ab e3       	ldi	r26, 0x3B	; 59
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	eb e3       	ldi	r30, 0x3B	; 59
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <GPIO_writePin+0x7c>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <GPIO_writePin+0x78>
    12ca:	80 95       	com	r24
    12cc:	84 23       	and	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	97 c0       	rjmp	.+302    	; 0x1400 <GPIO_writePin+0x1b6>
	    }
	else
	    {
	    SET_BIT(PORTA, a_pin);
    12d2:	ab e3       	ldi	r26, 0x3B	; 59
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	eb e3       	ldi	r30, 0x3B	; 59
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <GPIO_writePin+0xa6>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <GPIO_writePin+0xa2>
    12f4:	84 2b       	or	r24, r20
    12f6:	8c 93       	st	X, r24
    12f8:	83 c0       	rjmp	.+262    	; 0x1400 <GPIO_writePin+0x1b6>
	    }
	break;

    case PORTB_ID:
	if (a_state == LOW)
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 23       	and	r24, r24
    12fe:	a9 f4       	brne	.+42     	; 0x132a <GPIO_writePin+0xe0>
	    {
	    CLEAR_BIT(PORTB, a_pin);
    1300:	a8 e3       	ldi	r26, 0x38	; 56
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e8 e3       	ldi	r30, 0x38	; 56
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <GPIO_writePin+0xd4>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <GPIO_writePin+0xd0>
    1322:	80 95       	com	r24
    1324:	84 23       	and	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	6b c0       	rjmp	.+214    	; 0x1400 <GPIO_writePin+0x1b6>
	    }
	else
	    {
	    SET_BIT(PORTB, a_pin);
    132a:	a8 e3       	ldi	r26, 0x38	; 56
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e8 e3       	ldi	r30, 0x38	; 56
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	48 2f       	mov	r20, r24
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 2e       	mov	r0, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <GPIO_writePin+0xfe>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <GPIO_writePin+0xfa>
    134c:	84 2b       	or	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	57 c0       	rjmp	.+174    	; 0x1400 <GPIO_writePin+0x1b6>
	    }
	break;

    case PORTC_ID:
	if (a_state == LOW)
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	88 23       	and	r24, r24
    1356:	a9 f4       	brne	.+42     	; 0x1382 <GPIO_writePin+0x138>
	    {
	    CLEAR_BIT(PORTC, a_pin);
    1358:	a5 e3       	ldi	r26, 0x35	; 53
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e5 e3       	ldi	r30, 0x35	; 53
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <GPIO_writePin+0x12c>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <GPIO_writePin+0x128>
    137a:	80 95       	com	r24
    137c:	84 23       	and	r24, r20
    137e:	8c 93       	st	X, r24
    1380:	3f c0       	rjmp	.+126    	; 0x1400 <GPIO_writePin+0x1b6>
	    }
	else
	    {
	    SET_BIT(PORTC, a_pin);
    1382:	a5 e3       	ldi	r26, 0x35	; 53
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e5 e3       	ldi	r30, 0x35	; 53
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 2e       	mov	r0, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <GPIO_writePin+0x156>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <GPIO_writePin+0x152>
    13a4:	84 2b       	or	r24, r20
    13a6:	8c 93       	st	X, r24
    13a8:	2b c0       	rjmp	.+86     	; 0x1400 <GPIO_writePin+0x1b6>
	    }
	break;

    case PORTD_ID:
	if (a_state == LOW)
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	88 23       	and	r24, r24
    13ae:	a9 f4       	brne	.+42     	; 0x13da <GPIO_writePin+0x190>
	    {
	    CLEAR_BIT(PORTD, a_pin);
    13b0:	a2 e3       	ldi	r26, 0x32	; 50
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e2 e3       	ldi	r30, 0x32	; 50
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 2e       	mov	r0, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <GPIO_writePin+0x184>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <GPIO_writePin+0x180>
    13d2:	80 95       	com	r24
    13d4:	84 23       	and	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	13 c0       	rjmp	.+38     	; 0x1400 <GPIO_writePin+0x1b6>
	    }
	else
	    {
	    SET_BIT(PORTD, a_pin);
    13da:	a2 e3       	ldi	r26, 0x32	; 50
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e2 e3       	ldi	r30, 0x32	; 50
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <GPIO_writePin+0x1ae>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <GPIO_writePin+0x1aa>
    13fc:	84 2b       	or	r24, r20
    13fe:	8c 93       	st	X, r24
	    }
	break;
	}
    }
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <GPIO_tooglePin>:
 *
 * @param a_port The port ID (PORTA_ID, PORTB_ID, etc.)
 * @param pin The pin number on the port.
 */
void GPIO_tooglePin(uint8 a_port, uint8 pin)
    {
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	00 d0       	rcall	.+0      	; 0x1416 <GPIO_tooglePin+0x6>
    1416:	00 d0       	rcall	.+0      	; 0x1418 <GPIO_tooglePin+0x8>
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	6a 83       	std	Y+2, r22	; 0x02
    switch (a_port)
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	3c 83       	std	Y+4, r19	; 0x04
    1428:	2b 83       	std	Y+3, r18	; 0x03
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	91 05       	cpc	r25, r1
    1432:	49 f1       	breq	.+82     	; 0x1486 <GPIO_tooglePin+0x76>
    1434:	2b 81       	ldd	r18, Y+3	; 0x03
    1436:	3c 81       	ldd	r19, Y+4	; 0x04
    1438:	22 30       	cpi	r18, 0x02	; 2
    143a:	31 05       	cpc	r19, r1
    143c:	2c f4       	brge	.+10     	; 0x1448 <GPIO_tooglePin+0x38>
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	9c 81       	ldd	r25, Y+4	; 0x04
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	61 f0       	breq	.+24     	; 0x145e <GPIO_tooglePin+0x4e>
    1446:	5a c0       	rjmp	.+180    	; 0x14fc <GPIO_tooglePin+0xec>
    1448:	2b 81       	ldd	r18, Y+3	; 0x03
    144a:	3c 81       	ldd	r19, Y+4	; 0x04
    144c:	22 30       	cpi	r18, 0x02	; 2
    144e:	31 05       	cpc	r19, r1
    1450:	71 f1       	breq	.+92     	; 0x14ae <GPIO_tooglePin+0x9e>
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	83 30       	cpi	r24, 0x03	; 3
    1458:	91 05       	cpc	r25, r1
    145a:	e9 f1       	breq	.+122    	; 0x14d6 <GPIO_tooglePin+0xc6>
    145c:	4f c0       	rjmp	.+158    	; 0x14fc <GPIO_tooglePin+0xec>
	{
    case PORTA_ID:
	TOGGLE_BIT(PORTA, pin);
    145e:	ab e3       	ldi	r26, 0x3B	; 59
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	eb e3       	ldi	r30, 0x3B	; 59
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 2e       	mov	r0, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <GPIO_tooglePin+0x6c>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <GPIO_tooglePin+0x68>
    1480:	84 27       	eor	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	3b c0       	rjmp	.+118    	; 0x14fc <GPIO_tooglePin+0xec>
	break;
    case PORTB_ID:
	TOGGLE_BIT(PORTB, pin);
    1486:	a8 e3       	ldi	r26, 0x38	; 56
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e8 e3       	ldi	r30, 0x38	; 56
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 2e       	mov	r0, r18
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <GPIO_tooglePin+0x94>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	0a 94       	dec	r0
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <GPIO_tooglePin+0x90>
    14a8:	84 27       	eor	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	27 c0       	rjmp	.+78     	; 0x14fc <GPIO_tooglePin+0xec>
	break;
    case PORTC_ID:
	TOGGLE_BIT(PORTC, pin);
    14ae:	a5 e3       	ldi	r26, 0x35	; 53
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e5 e3       	ldi	r30, 0x35	; 53
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <GPIO_tooglePin+0xbc>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <GPIO_tooglePin+0xb8>
    14d0:	84 27       	eor	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	13 c0       	rjmp	.+38     	; 0x14fc <GPIO_tooglePin+0xec>
	break;
    case PORTD_ID:
	TOGGLE_BIT(PORTD, pin);
    14d6:	a2 e3       	ldi	r26, 0x32	; 50
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e2 e3       	ldi	r30, 0x32	; 50
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <GPIO_tooglePin+0xe4>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <GPIO_tooglePin+0xe0>
    14f8:	84 27       	eor	r24, r20
    14fa:	8c 93       	st	X, r24
	break;
	}
    }
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <GPIO_readPin>:
 * @param a_port The port ID (PORTA_ID, PORTB_ID, etc.)
 * @param pin The pin number on the port.
 * @return The current state of the pin (1 for HIGH, 0 for LOW).
 */
uint8 GPIO_readPin(uint8 a_port, uint8 pin)
    {
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <GPIO_readPin+0x6>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <GPIO_readPin+0x8>
    1512:	0f 92       	push	r0
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	6a 83       	std	Y+2, r22	; 0x02
    switch (a_port)
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	3d 83       	std	Y+5, r19	; 0x05
    1524:	2c 83       	std	Y+4, r18	; 0x04
    1526:	4c 81       	ldd	r20, Y+4	; 0x04
    1528:	5d 81       	ldd	r21, Y+5	; 0x05
    152a:	41 30       	cpi	r20, 0x01	; 1
    152c:	51 05       	cpc	r21, r1
    152e:	b1 f1       	breq	.+108    	; 0x159c <GPIO_readPin+0x92>
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	9d 81       	ldd	r25, Y+5	; 0x05
    1534:	82 30       	cpi	r24, 0x02	; 2
    1536:	91 05       	cpc	r25, r1
    1538:	34 f4       	brge	.+12     	; 0x1546 <GPIO_readPin+0x3c>
    153a:	2c 81       	ldd	r18, Y+4	; 0x04
    153c:	3d 81       	ldd	r19, Y+5	; 0x05
    153e:	21 15       	cp	r18, r1
    1540:	31 05       	cpc	r19, r1
    1542:	71 f0       	breq	.+28     	; 0x1560 <GPIO_readPin+0x56>
    1544:	85 c0       	rjmp	.+266    	; 0x1650 <GPIO_readPin+0x146>
    1546:	4c 81       	ldd	r20, Y+4	; 0x04
    1548:	5d 81       	ldd	r21, Y+5	; 0x05
    154a:	42 30       	cpi	r20, 0x02	; 2
    154c:	51 05       	cpc	r21, r1
    154e:	09 f4       	brne	.+2      	; 0x1552 <GPIO_readPin+0x48>
    1550:	43 c0       	rjmp	.+134    	; 0x15d8 <GPIO_readPin+0xce>
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	9d 81       	ldd	r25, Y+5	; 0x05
    1556:	83 30       	cpi	r24, 0x03	; 3
    1558:	91 05       	cpc	r25, r1
    155a:	09 f4       	brne	.+2      	; 0x155e <GPIO_readPin+0x54>
    155c:	5b c0       	rjmp	.+182    	; 0x1614 <GPIO_readPin+0x10a>
    155e:	78 c0       	rjmp	.+240    	; 0x1650 <GPIO_readPin+0x146>
	{
    case PORTA_ID:
	return GET_BIT(PINA, pin);
    1560:	e9 e3       	ldi	r30, 0x39	; 57
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 c0       	rjmp	.+4      	; 0x157a <GPIO_readPin+0x70>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	2a 95       	dec	r18
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <GPIO_readPin+0x6c>
    157e:	9a 01       	movw	r18, r20
    1580:	28 23       	and	r18, r24
    1582:	39 23       	and	r19, r25
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	a9 01       	movw	r20, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <GPIO_readPin+0x88>
    158e:	55 95       	asr	r21
    1590:	47 95       	ror	r20
    1592:	8a 95       	dec	r24
    1594:	e2 f7       	brpl	.-8      	; 0x158e <GPIO_readPin+0x84>
    1596:	ca 01       	movw	r24, r20
    1598:	8b 83       	std	Y+3, r24	; 0x03
    159a:	5b c0       	rjmp	.+182    	; 0x1652 <GPIO_readPin+0x148>
    case PORTB_ID:
	return GET_BIT(PINB, pin);
    159c:	e6 e3       	ldi	r30, 0x36	; 54
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <GPIO_readPin+0xac>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	2a 95       	dec	r18
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <GPIO_readPin+0xa8>
    15ba:	9a 01       	movw	r18, r20
    15bc:	28 23       	and	r18, r24
    15be:	39 23       	and	r19, r25
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	88 2f       	mov	r24, r24
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	a9 01       	movw	r20, r18
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <GPIO_readPin+0xc4>
    15ca:	55 95       	asr	r21
    15cc:	47 95       	ror	r20
    15ce:	8a 95       	dec	r24
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <GPIO_readPin+0xc0>
    15d2:	ca 01       	movw	r24, r20
    15d4:	8b 83       	std	Y+3, r24	; 0x03
    15d6:	3d c0       	rjmp	.+122    	; 0x1652 <GPIO_readPin+0x148>
    case PORTC_ID:
	return GET_BIT(PINC, pin);
    15d8:	e3 e3       	ldi	r30, 0x33	; 51
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <GPIO_readPin+0xe8>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	2a 95       	dec	r18
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <GPIO_readPin+0xe4>
    15f6:	9a 01       	movw	r18, r20
    15f8:	28 23       	and	r18, r24
    15fa:	39 23       	and	r19, r25
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a9 01       	movw	r20, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <GPIO_readPin+0x100>
    1606:	55 95       	asr	r21
    1608:	47 95       	ror	r20
    160a:	8a 95       	dec	r24
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <GPIO_readPin+0xfc>
    160e:	ca 01       	movw	r24, r20
    1610:	8b 83       	std	Y+3, r24	; 0x03
    1612:	1f c0       	rjmp	.+62     	; 0x1652 <GPIO_readPin+0x148>
    case PORTD_ID:
	return GET_BIT(PIND, pin);
    1614:	e0 e3       	ldi	r30, 0x30	; 48
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 c0       	rjmp	.+4      	; 0x162e <GPIO_readPin+0x124>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	2a 95       	dec	r18
    1630:	e2 f7       	brpl	.-8      	; 0x162a <GPIO_readPin+0x120>
    1632:	9a 01       	movw	r18, r20
    1634:	28 23       	and	r18, r24
    1636:	39 23       	and	r19, r25
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	88 2f       	mov	r24, r24
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	a9 01       	movw	r20, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <GPIO_readPin+0x13c>
    1642:	55 95       	asr	r21
    1644:	47 95       	ror	r20
    1646:	8a 95       	dec	r24
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <GPIO_readPin+0x138>
    164a:	ca 01       	movw	r24, r20
    164c:	8b 83       	std	Y+3, r24	; 0x03
    164e:	01 c0       	rjmp	.+2      	; 0x1652 <GPIO_readPin+0x148>
    default:
	return 0;
    1650:	1b 82       	std	Y+3, r1	; 0x03
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    }
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <GPIO_ARR_setPinState>:
 *
 * @param a_pin The index of the pin in the `ioPins` array stored in flash memory.
 * @param a_value The desired state (HIGH or LOW).
 */
void GPIO_ARR_setPinState(uint8 a_pin, uint8 a_value)
    {
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	28 97       	sbiw	r28, 0x08	; 8
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	8f 83       	std	Y+7, r24	; 0x07
    167a:	68 87       	std	Y+8, r22	; 0x08
    if (a_pin > NUM_OF_PINS)
    167c:	8f 81       	ldd	r24, Y+7	; 0x07
    167e:	81 32       	cpi	r24, 0x21	; 33
    1680:	08 f0       	brcs	.+2      	; 0x1684 <GPIO_ARR_setPinState+0x20>
    1682:	55 c0       	rjmp	.+170    	; 0x172e <GPIO_ARR_setPinState+0xca>
	return;
    volatile uint8 *port = (volatile uint8*) PGM_readPtrToRam(
	    (uint16) (&ioPins[a_pin].port_addr));
    1684:	8f 81       	ldd	r24, Y+7	; 0x07
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	c9 01       	movw	r24, r18
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	82 1b       	sub	r24, r18
    169a:	93 0b       	sbc	r25, r19
    169c:	02 96       	adiw	r24, 0x02	; 2
    169e:	8c 5a       	subi	r24, 0xAC	; 172
    16a0:	9f 4f       	sbci	r25, 0xFF	; 255
    16a2:	0e 94 bf 06 	call	0xd7e	; 0xd7e <PGM_readPtrToRam>
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	8d 83       	std	Y+5, r24	; 0x05
    uint8 pin = pgm_read_byte(&(ioPins[a_pin].pin));
    16aa:	8f 81       	ldd	r24, Y+7	; 0x07
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	c9 01       	movw	r24, r18
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	82 1b       	sub	r24, r18
    16c0:	93 0b       	sbc	r25, r19
    16c2:	06 96       	adiw	r24, 0x06	; 6
    16c4:	8c 5a       	subi	r24, 0xAC	; 172
    16c6:	9f 4f       	sbci	r25, 0xFF	; 255
    16c8:	9b 83       	std	Y+3, r25	; 0x03
    16ca:	8a 83       	std	Y+2, r24	; 0x02
    16cc:	ea 81       	ldd	r30, Y+2	; 0x02
    16ce:	fb 81       	ldd	r31, Y+3	; 0x03
    16d0:	84 91       	lpm	r24, Z+
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	8c 83       	std	Y+4, r24	; 0x04

    if (a_value == HIGH)
    16d8:	88 85       	ldd	r24, Y+8	; 0x08
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	a1 f4       	brne	.+40     	; 0x1706 <GPIO_ARR_setPinState+0xa2>
	{
	SET_BIT(*port, pin);
    16de:	ed 81       	ldd	r30, Y+5	; 0x05
    16e0:	fe 81       	ldd	r31, Y+6	; 0x06
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <GPIO_ARR_setPinState+0x94>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <GPIO_ARR_setPinState+0x90>
    16fc:	84 2b       	or	r24, r20
    16fe:	ed 81       	ldd	r30, Y+5	; 0x05
    1700:	fe 81       	ldd	r31, Y+6	; 0x06
    1702:	80 83       	st	Z, r24
    1704:	14 c0       	rjmp	.+40     	; 0x172e <GPIO_ARR_setPinState+0xca>
	}
    else
	{
	CLEAR_BIT(*port, pin);
    1706:	ed 81       	ldd	r30, Y+5	; 0x05
    1708:	fe 81       	ldd	r31, Y+6	; 0x06
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <GPIO_ARR_setPinState+0xbc>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <GPIO_ARR_setPinState+0xb8>
    1724:	80 95       	com	r24
    1726:	84 23       	and	r24, r20
    1728:	ed 81       	ldd	r30, Y+5	; 0x05
    172a:	fe 81       	ldd	r31, Y+6	; 0x06
    172c:	80 83       	st	Z, r24
	}
    }
    172e:	28 96       	adiw	r28, 0x08	; 8
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <GPIO_ARR_setPinDirection>:
 *
 * @param a_pin The index of the pin in the `ioPins` array stored in flash memory.
 * @param a_state The desired direction (PIN_INPUT, PIN_OUTPUT, PIN_INPUT_PULLUP).
 */
void GPIO_ARR_setPinDirection(uint8 a_pin, uint8 a_state)
    {
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	2a 97       	sbiw	r28, 0x0a	; 10
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	89 87       	std	Y+9, r24	; 0x09
    1756:	6a 87       	std	Y+10, r22	; 0x0a
    if (a_pin > NUM_OF_PINS)
    1758:	89 85       	ldd	r24, Y+9	; 0x09
    175a:	81 32       	cpi	r24, 0x21	; 33
    175c:	08 f0       	brcs	.+2      	; 0x1760 <GPIO_ARR_setPinDirection+0x20>
    175e:	95 c0       	rjmp	.+298    	; 0x188a <GPIO_ARR_setPinDirection+0x14a>
	return;
    volatile uint8 *ddr = (volatile uint8*) PGM_readPtrToRam(
	    (uint16) (&ioPins[a_pin].ddr_addr));
    1760:	89 85       	ldd	r24, Y+9	; 0x09
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	c9 01       	movw	r24, r18
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	82 1b       	sub	r24, r18
    1776:	93 0b       	sbc	r25, r19
    1778:	04 96       	adiw	r24, 0x04	; 4
    177a:	8c 5a       	subi	r24, 0xAC	; 172
    177c:	9f 4f       	sbci	r25, 0xFF	; 255
    177e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <PGM_readPtrToRam>
    1782:	98 87       	std	Y+8, r25	; 0x08
    1784:	8f 83       	std	Y+7, r24	; 0x07
    volatile uint8 *port = (volatile uint8*) PGM_readPtrToRam(
	    (uint16) (&ioPins[a_pin].port_addr));
    1786:	89 85       	ldd	r24, Y+9	; 0x09
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	c9 01       	movw	r24, r18
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	82 1b       	sub	r24, r18
    179c:	93 0b       	sbc	r25, r19
    179e:	02 96       	adiw	r24, 0x02	; 2
    17a0:	8c 5a       	subi	r24, 0xAC	; 172
    17a2:	9f 4f       	sbci	r25, 0xFF	; 255
    17a4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <PGM_readPtrToRam>
    17a8:	9e 83       	std	Y+6, r25	; 0x06
    17aa:	8d 83       	std	Y+5, r24	; 0x05
    uint8 pin = pgm_read_byte(&(ioPins[a_pin].pin));
    17ac:	89 85       	ldd	r24, Y+9	; 0x09
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	c9 01       	movw	r24, r18
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	82 1b       	sub	r24, r18
    17c2:	93 0b       	sbc	r25, r19
    17c4:	06 96       	adiw	r24, 0x06	; 6
    17c6:	8c 5a       	subi	r24, 0xAC	; 172
    17c8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ca:	9b 83       	std	Y+3, r25	; 0x03
    17cc:	8a 83       	std	Y+2, r24	; 0x02
    17ce:	ea 81       	ldd	r30, Y+2	; 0x02
    17d0:	fb 81       	ldd	r31, Y+3	; 0x03
    17d2:	84 91       	lpm	r24, Z+
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	8c 83       	std	Y+4, r24	; 0x04

    if (a_state == PIN_INPUT)
    17da:	8a 85       	ldd	r24, Y+10	; 0x0a
    17dc:	88 23       	and	r24, r24
    17de:	a9 f4       	brne	.+42     	; 0x180a <GPIO_ARR_setPinDirection+0xca>
	{
	CLEAR_BIT(*ddr, pin);
    17e0:	ef 81       	ldd	r30, Y+7	; 0x07
    17e2:	f8 85       	ldd	r31, Y+8	; 0x08
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <GPIO_ARR_setPinDirection+0xba>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <GPIO_ARR_setPinDirection+0xb6>
    17fe:	80 95       	com	r24
    1800:	84 23       	and	r24, r20
    1802:	ef 81       	ldd	r30, Y+7	; 0x07
    1804:	f8 85       	ldd	r31, Y+8	; 0x08
    1806:	80 83       	st	Z, r24
    1808:	40 c0       	rjmp	.+128    	; 0x188a <GPIO_ARR_setPinDirection+0x14a>
	}
    else if (a_state == PIN_OUTPUT)
    180a:	8a 85       	ldd	r24, Y+10	; 0x0a
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	a1 f4       	brne	.+40     	; 0x1838 <GPIO_ARR_setPinDirection+0xf8>
	{
	SET_BIT(*ddr, pin);
    1810:	ef 81       	ldd	r30, Y+7	; 0x07
    1812:	f8 85       	ldd	r31, Y+8	; 0x08
    1814:	80 81       	ld	r24, Z
    1816:	48 2f       	mov	r20, r24
    1818:	8c 81       	ldd	r24, Y+4	; 0x04
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	02 2e       	mov	r0, r18
    1824:	02 c0       	rjmp	.+4      	; 0x182a <GPIO_ARR_setPinDirection+0xea>
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	0a 94       	dec	r0
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <GPIO_ARR_setPinDirection+0xe6>
    182e:	84 2b       	or	r24, r20
    1830:	ef 81       	ldd	r30, Y+7	; 0x07
    1832:	f8 85       	ldd	r31, Y+8	; 0x08
    1834:	80 83       	st	Z, r24
    1836:	29 c0       	rjmp	.+82     	; 0x188a <GPIO_ARR_setPinDirection+0x14a>
	}
    else if (a_state == PIN_INPUT_PULLUP)
    1838:	8a 85       	ldd	r24, Y+10	; 0x0a
    183a:	82 30       	cpi	r24, 0x02	; 2
    183c:	31 f5       	brne	.+76     	; 0x188a <GPIO_ARR_setPinDirection+0x14a>
	{
	CLEAR_BIT(*ddr, pin);
    183e:	ef 81       	ldd	r30, Y+7	; 0x07
    1840:	f8 85       	ldd	r31, Y+8	; 0x08
    1842:	80 81       	ld	r24, Z
    1844:	48 2f       	mov	r20, r24
    1846:	8c 81       	ldd	r24, Y+4	; 0x04
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <GPIO_ARR_setPinDirection+0x116>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	2a 95       	dec	r18
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <GPIO_ARR_setPinDirection+0x112>
    185a:	80 95       	com	r24
    185c:	84 23       	and	r24, r20
    185e:	ef 81       	ldd	r30, Y+7	; 0x07
    1860:	f8 85       	ldd	r31, Y+8	; 0x08
    1862:	80 83       	st	Z, r24
	SET_BIT(*port, pin);
    1864:	ed 81       	ldd	r30, Y+5	; 0x05
    1866:	fe 81       	ldd	r31, Y+6	; 0x06
    1868:	80 81       	ld	r24, Z
    186a:	48 2f       	mov	r20, r24
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	02 2e       	mov	r0, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <GPIO_ARR_setPinDirection+0x13e>
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	0a 94       	dec	r0
    1880:	e2 f7       	brpl	.-8      	; 0x187a <GPIO_ARR_setPinDirection+0x13a>
    1882:	84 2b       	or	r24, r20
    1884:	ed 81       	ldd	r30, Y+5	; 0x05
    1886:	fe 81       	ldd	r31, Y+6	; 0x06
    1888:	80 83       	st	Z, r24
	}
    }
    188a:	2a 96       	adiw	r28, 0x0a	; 10
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <GPIO_ARR_readPin>:
 *
 * @param a_pin The index of the pin in the `ioPins` array stored in flash memory.
 * @return The current state of the pin (1 for HIGH, 0 for LOW).
 */
uint8 GPIO_ARR_readPin(uint8 a_pin)
    {
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	28 97       	sbiw	r28, 0x08	; 8
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	8f 83       	std	Y+7, r24	; 0x07
    if (a_pin > NUM_OF_PINS)
    18b2:	8f 81       	ldd	r24, Y+7	; 0x07
    18b4:	81 32       	cpi	r24, 0x21	; 33
    18b6:	10 f0       	brcs	.+4      	; 0x18bc <GPIO_ARR_readPin+0x20>
	return 0;
    18b8:	18 86       	std	Y+8, r1	; 0x08
    18ba:	46 c0       	rjmp	.+140    	; 0x1948 <GPIO_ARR_readPin+0xac>
    volatile uint8 *pin_addr = (volatile uint8*) PGM_readPtrToRam(
	    (uint16) (&ioPins[a_pin].pin_addr));
    18bc:	8f 81       	ldd	r24, Y+7	; 0x07
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	c9 01       	movw	r24, r18
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	88 0f       	add	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	82 1b       	sub	r24, r18
    18d2:	93 0b       	sbc	r25, r19
    18d4:	8c 5a       	subi	r24, 0xAC	; 172
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	0e 94 bf 06 	call	0xd7e	; 0xd7e <PGM_readPtrToRam>
    18dc:	9e 83       	std	Y+6, r25	; 0x06
    18de:	8d 83       	std	Y+5, r24	; 0x05
    uint8 pin = pgm_read_byte(&(ioPins[a_pin].pin));
    18e0:	8f 81       	ldd	r24, Y+7	; 0x07
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	c9 01       	movw	r24, r18
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	82 1b       	sub	r24, r18
    18f6:	93 0b       	sbc	r25, r19
    18f8:	06 96       	adiw	r24, 0x06	; 6
    18fa:	8c 5a       	subi	r24, 0xAC	; 172
    18fc:	9f 4f       	sbci	r25, 0xFF	; 255
    18fe:	9b 83       	std	Y+3, r25	; 0x03
    1900:	8a 83       	std	Y+2, r24	; 0x02
    1902:	ea 81       	ldd	r30, Y+2	; 0x02
    1904:	fb 81       	ldd	r31, Y+3	; 0x03
    1906:	84 91       	lpm	r24, Z+
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	8c 83       	std	Y+4, r24	; 0x04
    return GET_BIT(*pin_addr, pin);
    190e:	ed 81       	ldd	r30, Y+5	; 0x05
    1910:	fe 81       	ldd	r31, Y+6	; 0x06
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	8c 81       	ldd	r24, Y+4	; 0x04
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <GPIO_ARR_readPin+0x8c>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	2a 95       	dec	r18
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <GPIO_ARR_readPin+0x88>
    192c:	9a 01       	movw	r18, r20
    192e:	28 23       	and	r18, r24
    1930:	39 23       	and	r19, r25
    1932:	8c 81       	ldd	r24, Y+4	; 0x04
    1934:	88 2f       	mov	r24, r24
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	a9 01       	movw	r20, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <GPIO_ARR_readPin+0xa4>
    193c:	55 95       	asr	r21
    193e:	47 95       	ror	r20
    1940:	8a 95       	dec	r24
    1942:	e2 f7       	brpl	.-8      	; 0x193c <GPIO_ARR_readPin+0xa0>
    1944:	ca 01       	movw	r24, r20
    1946:	88 87       	std	Y+8, r24	; 0x08
    1948:	88 85       	ldd	r24, Y+8	; 0x08
    }
    194a:	28 96       	adiw	r28, 0x08	; 8
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <__vector_6>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect) {
    195c:	1f 92       	push	r1
    195e:	0f 92       	push	r0
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	0f 92       	push	r0
    1964:	11 24       	eor	r1, r1
    1966:	2f 93       	push	r18
    1968:	3f 93       	push	r19
    196a:	4f 93       	push	r20
    196c:	5f 93       	push	r21
    196e:	6f 93       	push	r22
    1970:	7f 93       	push	r23
    1972:	8f 93       	push	r24
    1974:	9f 93       	push	r25
    1976:	af 93       	push	r26
    1978:	bf 93       	push	r27
    197a:	ef 93       	push	r30
    197c:	ff 93       	push	r31
    197e:	df 93       	push	r29
    1980:	cf 93       	push	r28
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR) {
    1986:	80 91 b8 00 	lds	r24, 0x00B8
    198a:	90 91 b9 00 	lds	r25, 0x00B9
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	29 f0       	breq	.+10     	; 0x199c <__vector_6+0x40>
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1992:	e0 91 b8 00 	lds	r30, 0x00B8
    1996:	f0 91 b9 00 	lds	r31, 0x00B9
    199a:	09 95       	icall
	}
}
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	ff 91       	pop	r31
    19a2:	ef 91       	pop	r30
    19a4:	bf 91       	pop	r27
    19a6:	af 91       	pop	r26
    19a8:	9f 91       	pop	r25
    19aa:	8f 91       	pop	r24
    19ac:	7f 91       	pop	r23
    19ae:	6f 91       	pop	r22
    19b0:	5f 91       	pop	r21
    19b2:	4f 91       	pop	r20
    19b4:	3f 91       	pop	r19
    19b6:	2f 91       	pop	r18
    19b8:	0f 90       	pop	r0
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	0f 90       	pop	r0
    19be:	1f 90       	pop	r1
    19c0:	18 95       	reti

000019c2 <ICU_init>:
 * 	1. Set the required clock.
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType *Config_Ptr) {
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <ICU_init+0x6>
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	9a 83       	std	Y+2, r25	; 0x02
    19ce:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */

	DDRD_REG.bits.ddd6 = LOGIC_LOW;
    19d0:	e1 e3       	ldi	r30, 0x31	; 49
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	8f 7b       	andi	r24, 0xBF	; 191
    19d8:	80 83       	st	Z, r24
	/* Timer1 always operates in Normal Mode */
	TCCR1A_REG.bits.foc1a = LOGIC_HIGH;
    19da:	ef e4       	ldi	r30, 0x4F	; 79
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	88 60       	ori	r24, 0x08	; 8
    19e2:	80 83       	st	Z, r24
	TCCR1A_REG.bits.foc1b = LOGIC_HIGH;
    19e4:	ef e4       	ldi	r30, 0x4F	; 79
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	84 60       	ori	r24, 0x04	; 4
    19ec:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B_REG.byte = (TCCR1B_REG.byte & 0xF8) | (Config_Ptr->clock);
    19ee:	ae e4       	ldi	r26, 0x4E	; 78
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	ee e4       	ldi	r30, 0x4E	; 78
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	98 2f       	mov	r25, r24
    19fa:	98 7f       	andi	r25, 0xF8	; 248
    19fc:	e9 81       	ldd	r30, Y+1	; 0x01
    19fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1a00:	80 81       	ld	r24, Z
    1a02:	89 2b       	or	r24, r25
    1a04:	8c 93       	st	X, r24

	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B_REG.byte = (TCCR1B_REG.byte & 0xBF) | ((Config_Ptr->edge) << 6);
    1a06:	ae e4       	ldi	r26, 0x4E	; 78
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	ee e4       	ldi	r30, 0x4E	; 78
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	28 2f       	mov	r18, r24
    1a12:	2f 7b       	andi	r18, 0xBF	; 191
    1a14:	e9 81       	ldd	r30, Y+1	; 0x01
    1a16:	fa 81       	ldd	r31, Y+2	; 0x02
    1a18:	81 81       	ldd	r24, Z+1	; 0x01
    1a1a:	88 2f       	mov	r24, r24
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	00 24       	eor	r0, r0
    1a20:	96 95       	lsr	r25
    1a22:	87 95       	ror	r24
    1a24:	07 94       	ror	r0
    1a26:	96 95       	lsr	r25
    1a28:	87 95       	ror	r24
    1a2a:	07 94       	ror	r0
    1a2c:	98 2f       	mov	r25, r24
    1a2e:	80 2d       	mov	r24, r0
    1a30:	82 2b       	or	r24, r18
    1a32:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1_REG.word = 0;
    1a34:	ec e4       	ldi	r30, 0x4C	; 76
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	11 82       	std	Z+1, r1	; 0x01
    1a3a:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1_REG.word = 0;
    1a3c:	e6 e4       	ldi	r30, 0x46	; 70
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	11 82       	std	Z+1, r1	; 0x01
    1a42:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK_REG.bits.ticie1 = LOGIC_HIGH;
    1a44:	e9 e5       	ldi	r30, 0x59	; 89
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	80 62       	ori	r24, 0x20	; 32
    1a4c:	80 83       	st	Z, r24
}
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void (*a_ptr)(void)) {
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <ICU_setCallBack+0x6>
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	9a 83       	std	Y+2, r25	; 0x02
    1a64:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = (volatile void*) a_ptr;
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6a:	90 93 b9 00 	sts	0x00B9, r25
    1a6e:	80 93 b8 00 	sts	0x00B8, r24
}
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType) {
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	0f 92       	push	r0
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B_REG.byte = (TCCR1B_REG.byte & 0xBF) | (a_edgeType << 6);
    1a88:	ae e4       	ldi	r26, 0x4E	; 78
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	ee e4       	ldi	r30, 0x4E	; 78
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	28 2f       	mov	r18, r24
    1a94:	2f 7b       	andi	r18, 0xBF	; 191
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	88 2f       	mov	r24, r24
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	00 24       	eor	r0, r0
    1a9e:	96 95       	lsr	r25
    1aa0:	87 95       	ror	r24
    1aa2:	07 94       	ror	r0
    1aa4:	96 95       	lsr	r25
    1aa6:	87 95       	ror	r24
    1aa8:	07 94       	ror	r0
    1aaa:	98 2f       	mov	r25, r24
    1aac:	80 2d       	mov	r24, r0
    1aae:	82 2b       	or	r24, r18
    1ab0:	8c 93       	st	X, r24
}
    1ab2:	0f 90       	pop	r0
    1ab4:	cf 91       	pop	r28
    1ab6:	df 91       	pop	r29
    1ab8:	08 95       	ret

00001aba <ICU_getInputCaptureValue>:

/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void) {
    1aba:	df 93       	push	r29
    1abc:	cf 93       	push	r28
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG.word;
    1ac2:	e6 e4       	ldi	r30, 0x46	; 70
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	91 81       	ldd	r25, Z+1	; 0x01
}
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void) {
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
	TCNT1_REG.word = 0;
    1ad8:	ec e4       	ldi	r30, 0x4C	; 76
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	11 82       	std	Z+1, r1	; 0x01
    1ade:	10 82       	st	Z, r1
}
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void) {
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A_REG.byte = 0;
    1aee:	ef e4       	ldi	r30, 0x4F	; 79
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	10 82       	st	Z, r1
	TCCR1B_REG.byte = 0;
    1af4:	ee e4       	ldi	r30, 0x4E	; 78
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	10 82       	st	Z, r1
	TCNT1_REG.word = 0;
    1afa:	ec e4       	ldi	r30, 0x4C	; 76
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	11 82       	std	Z+1, r1	; 0x01
    1b00:	10 82       	st	Z, r1
	ICR1_REG.word = 0;
    1b02:	e6 e4       	ldi	r30, 0x46	; 70
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	11 82       	std	Z+1, r1	; 0x01
    1b08:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK_REG.bits.ticie1 = LOGIC_LOW;
    1b0a:	e9 e5       	ldi	r30, 0x59	; 89
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	8f 7d       	andi	r24, 0xDF	; 223
    1b12:	80 83       	st	Z, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    1b14:	10 92 b9 00 	sts	0x00B9, r1
    1b18:	10 92 b8 00 	sts	0x00B8, r1
}
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <ICU_interruptOn>:
void ICU_interruptOn() {
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
	TIMSK_REG.bits.ticie1 = LOGIC_HIGH;
    1b2a:	e9 e5       	ldi	r30, 0x59	; 89
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	80 62       	ori	r24, 0x20	; 32
    1b32:	80 83       	st	Z, r24

}
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <ICU_interruptOff>:
void ICU_interruptOff() {
    1b3a:	df 93       	push	r29
    1b3c:	cf 93       	push	r28
    1b3e:	cd b7       	in	r28, 0x3d	; 61
    1b40:	de b7       	in	r29, 0x3e	; 62
	TIMSK_REG.bits.ticie1 = LOGIC_HIGH;
    1b42:	e9 e5       	ldi	r30, 0x59	; 89
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	80 62       	ori	r24, 0x20	; 32
    1b4a:	80 83       	st	Z, r24

}
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <Timer0_init>:
 * The configuration parameters are passed via a pointer to a `Timer0_Config`
 * structure, which should be properly initialized before calling this function.
 *
 * @param a_timerConfig Pointer to `Timer0_Config` structure with the desired settings.
 */
void Timer0_init(Timer0_Config *a_timerConfig) {
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <Timer0_init+0x6>
    1b58:	00 d0       	rcall	.+0      	; 0x1b5a <Timer0_init+0x8>
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	9a 83       	std	Y+2, r25	; 0x02
    1b60:	89 83       	std	Y+1, r24	; 0x01

    /* Set initial timer count */
    TCNT0_REG.byte = (a_timerConfig)->intialCount;
    1b62:	a2 e5       	ldi	r26, 0x52	; 82
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e9 81       	ldd	r30, Y+1	; 0x01
    1b68:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6a:	85 81       	ldd	r24, Z+5	; 0x05
    1b6c:	8c 93       	st	X, r24

    /* Set clock source and prescaler */
    TCCR0_REG.byte &= ~(TIMER0_CS_BITMASK); // Clear lower three bits for clock source
    1b6e:	a3 e5       	ldi	r26, 0x53	; 83
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e3 e5       	ldi	r30, 0x53	; 83
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	88 7f       	andi	r24, 0xF8	; 248
    1b7a:	8c 93       	st	X, r24
    TCCR0_REG.byte |= (a_timerConfig->clockSource&(TIMER0_CS_BITMASK));
    1b7c:	a3 e5       	ldi	r26, 0x53	; 83
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e3 e5       	ldi	r30, 0x53	; 83
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	98 2f       	mov	r25, r24
    1b88:	e9 81       	ldd	r30, Y+1	; 0x01
    1b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b8c:	81 81       	ldd	r24, Z+1	; 0x01
    1b8e:	87 70       	andi	r24, 0x07	; 7
    1b90:	89 2b       	or	r24, r25
    1b92:	8c 93       	st	X, r24

    /* Configure the timer mode */
    switch (a_timerConfig->mode) {
    1b94:	e9 81       	ldd	r30, Y+1	; 0x01
    1b96:	fa 81       	ldd	r31, Y+2	; 0x02
    1b98:	80 81       	ld	r24, Z
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	3c 83       	std	Y+4, r19	; 0x04
    1ba0:	2b 83       	std	Y+3, r18	; 0x03
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	91 05       	cpc	r25, r1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <Timer0_init+0x5c>
    1bac:	41 c0       	rjmp	.+130    	; 0x1c30 <Timer0_init+0xde>
    1bae:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb2:	22 30       	cpi	r18, 0x02	; 2
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	31 f0       	breq	.+12     	; 0x1bc4 <Timer0_init+0x72>
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <Timer0_init+0x70>
    1bc0:	83 c0       	rjmp	.+262    	; 0x1cc8 <Timer0_init+0x176>
    1bc2:	aa c0       	rjmp	.+340    	; 0x1d18 <Timer0_init+0x1c6>
        case TIMER0_MODE_FAST_PWM:
            /* Configure Fast PWM mode */
            TCCR0_REG.bits.wgm00 = LOGIC_HIGH;
    1bc4:	e3 e5       	ldi	r30, 0x53	; 83
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	80 64       	ori	r24, 0x40	; 64
    1bcc:	80 83       	st	Z, r24
            TCCR0_REG.bits.wgm01 = LOGIC_HIGH;
    1bce:	e3 e5       	ldi	r30, 0x53	; 83
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	88 60       	ori	r24, 0x08	; 8
    1bd6:	80 83       	st	Z, r24

            /* Set Compare Output Mode */
            TCCR0_REG.bits.com00 = GET_BIT(a_timerConfig->compareOutputMode, TIMER_COMP_OUT_MODE_BIT_0);
    1bd8:	a3 e5       	ldi	r26, 0x53	; 83
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bde:	fa 81       	ldd	r31, Y+2	; 0x02
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	81 70       	andi	r24, 0x01	; 1
    1be4:	81 70       	andi	r24, 0x01	; 1
    1be6:	81 70       	andi	r24, 0x01	; 1
    1be8:	81 70       	andi	r24, 0x01	; 1
    1bea:	98 2f       	mov	r25, r24
    1bec:	92 95       	swap	r25
    1bee:	90 7f       	andi	r25, 0xF0	; 240
    1bf0:	8c 91       	ld	r24, X
    1bf2:	8f 7e       	andi	r24, 0xEF	; 239
    1bf4:	89 2b       	or	r24, r25
    1bf6:	8c 93       	st	X, r24
            TCCR0_REG.bits.com01 = GET_BIT(a_timerConfig->compareOutputMode, TIMER_COMP_OUT_MODE_BIT_1);
    1bf8:	a3 e5       	ldi	r26, 0x53	; 83
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1c00:	82 81       	ldd	r24, Z+2	; 0x02
    1c02:	88 2f       	mov	r24, r24
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	82 70       	andi	r24, 0x02	; 2
    1c08:	90 70       	andi	r25, 0x00	; 0
    1c0a:	95 95       	asr	r25
    1c0c:	87 95       	ror	r24
    1c0e:	81 70       	andi	r24, 0x01	; 1
    1c10:	81 70       	andi	r24, 0x01	; 1
    1c12:	98 2f       	mov	r25, r24
    1c14:	92 95       	swap	r25
    1c16:	99 0f       	add	r25, r25
    1c18:	90 7e       	andi	r25, 0xE0	; 224
    1c1a:	8c 91       	ld	r24, X
    1c1c:	8f 7d       	andi	r24, 0xDF	; 223
    1c1e:	89 2b       	or	r24, r25
    1c20:	8c 93       	st	X, r24

            /* Set the duty cycle value (OCR0) */
            OCR0_REG.byte = a_timerConfig->tick;
    1c22:	ac e5       	ldi	r26, 0x5C	; 92
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e9 81       	ldd	r30, Y+1	; 0x01
    1c28:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2a:	84 81       	ldd	r24, Z+4	; 0x04
    1c2c:	8c 93       	st	X, r24
    1c2e:	74 c0       	rjmp	.+232    	; 0x1d18 <Timer0_init+0x1c6>
            break;

        case TIMER0_MODE_CTC:
            /* Configure CTC mode */
            TCCR0_REG.bits.foc0 = LOGIC_HIGH;
    1c30:	e3 e5       	ldi	r30, 0x53	; 83
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	80 68       	ori	r24, 0x80	; 128
    1c38:	80 83       	st	Z, r24
            TCCR0_REG.bits.wgm00 = LOGIC_LOW;
    1c3a:	e3 e5       	ldi	r30, 0x53	; 83
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	8f 7b       	andi	r24, 0xBF	; 191
    1c42:	80 83       	st	Z, r24
            TCCR0_REG.bits.wgm01 = LOGIC_HIGH;
    1c44:	e3 e5       	ldi	r30, 0x53	; 83
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	88 60       	ori	r24, 0x08	; 8
    1c4c:	80 83       	st	Z, r24


            /* Set Compare Output Mode */
            TCCR0_REG.bits.com00 = GET_BIT(a_timerConfig->compareOutputMode, TIMER_COMP_OUT_MODE_BIT_0);
    1c4e:	a3 e5       	ldi	r26, 0x53	; 83
    1c50:	b0 e0       	ldi	r27, 0x00	; 0
    1c52:	e9 81       	ldd	r30, Y+1	; 0x01
    1c54:	fa 81       	ldd	r31, Y+2	; 0x02
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	81 70       	andi	r24, 0x01	; 1
    1c5a:	81 70       	andi	r24, 0x01	; 1
    1c5c:	81 70       	andi	r24, 0x01	; 1
    1c5e:	81 70       	andi	r24, 0x01	; 1
    1c60:	98 2f       	mov	r25, r24
    1c62:	92 95       	swap	r25
    1c64:	90 7f       	andi	r25, 0xF0	; 240
    1c66:	8c 91       	ld	r24, X
    1c68:	8f 7e       	andi	r24, 0xEF	; 239
    1c6a:	89 2b       	or	r24, r25
    1c6c:	8c 93       	st	X, r24
            TCCR0_REG.bits.com01 = GET_BIT(a_timerConfig->compareOutputMode, TIMER_COMP_OUT_MODE_BIT_1);
    1c6e:	a3 e5       	ldi	r26, 0x53	; 83
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e9 81       	ldd	r30, Y+1	; 0x01
    1c74:	fa 81       	ldd	r31, Y+2	; 0x02
    1c76:	82 81       	ldd	r24, Z+2	; 0x02
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	82 70       	andi	r24, 0x02	; 2
    1c7e:	90 70       	andi	r25, 0x00	; 0
    1c80:	95 95       	asr	r25
    1c82:	87 95       	ror	r24
    1c84:	81 70       	andi	r24, 0x01	; 1
    1c86:	81 70       	andi	r24, 0x01	; 1
    1c88:	98 2f       	mov	r25, r24
    1c8a:	92 95       	swap	r25
    1c8c:	99 0f       	add	r25, r25
    1c8e:	90 7e       	andi	r25, 0xE0	; 224
    1c90:	8c 91       	ld	r24, X
    1c92:	8f 7d       	andi	r24, 0xDF	; 223
    1c94:	89 2b       	or	r24, r25
    1c96:	8c 93       	st	X, r24

            /* Enable interrupts if requested */
            if (a_timerConfig->interrupt) {
    1c98:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c9c:	83 81       	ldd	r24, Z+3	; 0x03
    1c9e:	88 23       	and	r24, r24
    1ca0:	51 f0       	breq	.+20     	; 0x1cb6 <Timer0_init+0x164>
                TIMSK_REG.bits.ocie0 = LOGIC_HIGH;
    1ca2:	e9 e5       	ldi	r30, 0x59	; 89
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	82 60       	ori	r24, 0x02	; 2
    1caa:	80 83       	st	Z, r24
                TIMSK_REG.bits.toie0 = LOGIC_LOW;
    1cac:	e9 e5       	ldi	r30, 0x59	; 89
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	8e 7f       	andi	r24, 0xFE	; 254
    1cb4:	80 83       	st	Z, r24
            }

            /* Set the compare match value (OCR0) */
            OCR0_REG.byte = a_timerConfig->tick;
    1cb6:	ec e5       	ldi	r30, 0x5C	; 92
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	a9 81       	ldd	r26, Y+1	; 0x01
    1cbc:	ba 81       	ldd	r27, Y+2	; 0x02
    1cbe:	14 96       	adiw	r26, 0x04	; 4
    1cc0:	8c 91       	ld	r24, X
    1cc2:	14 97       	sbiw	r26, 0x04	; 4
    1cc4:	80 83       	st	Z, r24
    1cc6:	28 c0       	rjmp	.+80     	; 0x1d18 <Timer0_init+0x1c6>
            break;

        case TIMER0_MODE_NORMAL:
            /* Configure Normal mode */
            TCCR0_REG.bits.foc0 = LOGIC_HIGH; // Force Output Compare
    1cc8:	e3 e5       	ldi	r30, 0x53	; 83
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	80 68       	ori	r24, 0x80	; 128
    1cd0:	80 83       	st	Z, r24
            TCCR0_REG.bits.wgm00 = LOGIC_LOW;
    1cd2:	e3 e5       	ldi	r30, 0x53	; 83
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	8f 7b       	andi	r24, 0xBF	; 191
    1cda:	80 83       	st	Z, r24
            TCCR0_REG.bits.wgm01 = LOGIC_LOW;
    1cdc:	e3 e5       	ldi	r30, 0x53	; 83
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	87 7f       	andi	r24, 0xF7	; 247
    1ce4:	80 83       	st	Z, r24

            /* Disable Compare Output Mode */
            TCCR0_REG.bits.com00 = LOGIC_LOW;
    1ce6:	e3 e5       	ldi	r30, 0x53	; 83
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	8f 7e       	andi	r24, 0xEF	; 239
    1cee:	80 83       	st	Z, r24
            TCCR0_REG.bits.com01 = LOGIC_LOW;
    1cf0:	e3 e5       	ldi	r30, 0x53	; 83
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	8f 7d       	andi	r24, 0xDF	; 223
    1cf8:	80 83       	st	Z, r24

            /* Enable overflow interrupt if requested */
            if (a_timerConfig->interrupt) {
    1cfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfe:	83 81       	ldd	r24, Z+3	; 0x03
    1d00:	88 23       	and	r24, r24
    1d02:	51 f0       	breq	.+20     	; 0x1d18 <Timer0_init+0x1c6>
                TIMSK_REG.bits.toie0 = LOGIC_HIGH; // Enable Overflow Interrupt
    1d04:	e9 e5       	ldi	r30, 0x59	; 89
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	81 60       	ori	r24, 0x01	; 1
    1d0c:	80 83       	st	Z, r24
                TIMSK_REG.bits.ocie0 = LOGIC_LOW;  // Disable Output Compare Match Interrupt
    1d0e:	e9 e5       	ldi	r30, 0x59	; 89
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	8d 7f       	andi	r24, 0xFD	; 253
    1d16:	80 83       	st	Z, r24
            }
            break;
    }
}
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <Timer0_setCallback>:
 * be executed during Timer 0 interrupts (either Output Compare Match or
 * Overflow interrupts).
 *
 * @param a_ptr2func Pointer to the callback function to be executed.
 */
void Timer0_setCallback(volatile void (a_ptr2func)(void)) {
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <Timer0_setCallback+0x6>
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
    PTR2_Timer0_CallBack = a_ptr2func;
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	90 93 bb 00 	sts	0x00BB, r25
    1d3c:	80 93 ba 00 	sts	0x00BA, r24
}
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <Timer0_setDutyCycle>:
 * This function allows the user to set the duty cycle in Fast PWM mode by
 * updating the OCR0 register with the desired duty cycle value.
 *
 * @param a_duty The duty cycle value to be set (0-255).
 */
void Timer0_setDutyCycle(uint8 a_duty) {
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	0f 92       	push	r0
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	89 83       	std	Y+1, r24	; 0x01
    OCR0_REG.byte = a_duty;
    1d56:	ec e5       	ldi	r30, 0x5C	; 92
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	80 83       	st	Z, r24
}
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <__vector_10>:
 *
 * This interrupt service routine is executed when a compare match occurs
 * in Timer 0. If a callback function has been registered via
 * `Timer0_setCallback`, it will be called within this ISR.
 */
ISR(TIMER0_COMP_vect) {
    1d66:	1f 92       	push	r1
    1d68:	0f 92       	push	r0
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	0f 92       	push	r0
    1d6e:	11 24       	eor	r1, r1
    1d70:	2f 93       	push	r18
    1d72:	3f 93       	push	r19
    1d74:	4f 93       	push	r20
    1d76:	5f 93       	push	r21
    1d78:	6f 93       	push	r22
    1d7a:	7f 93       	push	r23
    1d7c:	8f 93       	push	r24
    1d7e:	9f 93       	push	r25
    1d80:	af 93       	push	r26
    1d82:	bf 93       	push	r27
    1d84:	ef 93       	push	r30
    1d86:	ff 93       	push	r31
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    if (PTR2_Timer0_CallBack != NULL_PTR) {
    1d90:	80 91 ba 00 	lds	r24, 0x00BA
    1d94:	90 91 bb 00 	lds	r25, 0x00BB
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	29 f0       	breq	.+10     	; 0x1da6 <__vector_10+0x40>
        PTR2_Timer0_CallBack();
    1d9c:	e0 91 ba 00 	lds	r30, 0x00BA
    1da0:	f0 91 bb 00 	lds	r31, 0x00BB
    1da4:	09 95       	icall
    }
}
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	ff 91       	pop	r31
    1dac:	ef 91       	pop	r30
    1dae:	bf 91       	pop	r27
    1db0:	af 91       	pop	r26
    1db2:	9f 91       	pop	r25
    1db4:	8f 91       	pop	r24
    1db6:	7f 91       	pop	r23
    1db8:	6f 91       	pop	r22
    1dba:	5f 91       	pop	r21
    1dbc:	4f 91       	pop	r20
    1dbe:	3f 91       	pop	r19
    1dc0:	2f 91       	pop	r18
    1dc2:	0f 90       	pop	r0
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	0f 90       	pop	r0
    1dc8:	1f 90       	pop	r1
    1dca:	18 95       	reti

00001dcc <__vector_11>:
 * This interrupt service routine is executed when Timer 0 overflows
 * (i.e., the timer count rolls over from 0xFF to 0x00). If a callback
 * function has been registered via `Timer0_setCallback`, it will be called
 * within this ISR.
 */
ISR(TIMER0_OVF_vect) {
    1dcc:	1f 92       	push	r1
    1dce:	0f 92       	push	r0
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	0f 92       	push	r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	2f 93       	push	r18
    1dd8:	3f 93       	push	r19
    1dda:	4f 93       	push	r20
    1ddc:	5f 93       	push	r21
    1dde:	6f 93       	push	r22
    1de0:	7f 93       	push	r23
    1de2:	8f 93       	push	r24
    1de4:	9f 93       	push	r25
    1de6:	af 93       	push	r26
    1de8:	bf 93       	push	r27
    1dea:	ef 93       	push	r30
    1dec:	ff 93       	push	r31
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    if (PTR2_Timer0_CallBack != NULL_PTR) {
    1df6:	80 91 ba 00 	lds	r24, 0x00BA
    1dfa:	90 91 bb 00 	lds	r25, 0x00BB
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	29 f0       	breq	.+10     	; 0x1e0c <__vector_11+0x40>
        PTR2_Timer0_CallBack();
    1e02:	e0 91 ba 00 	lds	r30, 0x00BA
    1e06:	f0 91 bb 00 	lds	r31, 0x00BB
    1e0a:	09 95       	icall
    }
}
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	ff 91       	pop	r31
    1e12:	ef 91       	pop	r30
    1e14:	bf 91       	pop	r27
    1e16:	af 91       	pop	r26
    1e18:	9f 91       	pop	r25
    1e1a:	8f 91       	pop	r24
    1e1c:	7f 91       	pop	r23
    1e1e:	6f 91       	pop	r22
    1e20:	5f 91       	pop	r21
    1e22:	4f 91       	pop	r20
    1e24:	3f 91       	pop	r19
    1e26:	2f 91       	pop	r18
    1e28:	0f 90       	pop	r0
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	0f 90       	pop	r0
    1e2e:	1f 90       	pop	r1
    1e30:	18 95       	reti

00001e32 <Timer2_init>:
 * The configuration parameters are passed via a pointer to a `Timer2_Config`
 * structure, which should be properly initialized before calling this function.
 *
 * @param a_timerConfig Pointer to `Timer2_Config` structure with the desired settings.
 */
void Timer2_init(Timer2_Config *a_timerConfig) {
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <Timer2_init+0x6>
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <Timer2_init+0x8>
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	9a 83       	std	Y+2, r25	; 0x02
    1e40:	89 83       	std	Y+1, r24	; 0x01

    /* Set initial timer count */
    TCNT2_REG.byte = (a_timerConfig)->intialCount;
    1e42:	a4 e4       	ldi	r26, 0x44	; 68
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e9 81       	ldd	r30, Y+1	; 0x01
    1e48:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4a:	85 81       	ldd	r24, Z+5	; 0x05
    1e4c:	8c 93       	st	X, r24

    /* Set clock source and prescaler */
    TCCR2_REG.byte &= ~(TIMER2_CS_BITMASK); // Clear lower three bits for clock source
    1e4e:	a5 e4       	ldi	r26, 0x45	; 69
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e5 e4       	ldi	r30, 0x45	; 69
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	88 7f       	andi	r24, 0xF8	; 248
    1e5a:	8c 93       	st	X, r24
    TCCR2_REG.byte |= (a_timerConfig->clockSource&(TIMER2_CS_BITMASK));
    1e5c:	a5 e4       	ldi	r26, 0x45	; 69
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e5 e4       	ldi	r30, 0x45	; 69
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	98 2f       	mov	r25, r24
    1e68:	e9 81       	ldd	r30, Y+1	; 0x01
    1e6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6c:	81 81       	ldd	r24, Z+1	; 0x01
    1e6e:	87 70       	andi	r24, 0x07	; 7
    1e70:	89 2b       	or	r24, r25
    1e72:	8c 93       	st	X, r24
    g_lastClockSource = a_timerConfig->clockSource;
    1e74:	e9 81       	ldd	r30, Y+1	; 0x01
    1e76:	fa 81       	ldd	r31, Y+2	; 0x02
    1e78:	81 81       	ldd	r24, Z+1	; 0x01
    1e7a:	80 93 be 00 	sts	0x00BE, r24
    /* Configure the timer mode */
    switch (a_timerConfig->mode) {
    1e7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e80:	fa 81       	ldd	r31, Y+2	; 0x02
    1e82:	80 81       	ld	r24, Z
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	3c 83       	std	Y+4, r19	; 0x04
    1e8a:	2b 83       	std	Y+3, r18	; 0x03
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	91 05       	cpc	r25, r1
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <Timer2_init+0x66>
    1e96:	41 c0       	rjmp	.+130    	; 0x1f1a <Timer2_init+0xe8>
    1e98:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9c:	22 30       	cpi	r18, 0x02	; 2
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	31 f0       	breq	.+12     	; 0x1eae <Timer2_init+0x7c>
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <Timer2_init+0x7a>
    1eaa:	83 c0       	rjmp	.+262    	; 0x1fb2 <Timer2_init+0x180>
    1eac:	aa c0       	rjmp	.+340    	; 0x2002 <Timer2_init+0x1d0>
        case TIMER2_MODE_FAST_PWM:
            /* Configure Fast PWM mode */
            TCCR2_REG.bits.wgm20 = LOGIC_HIGH;
    1eae:	e5 e4       	ldi	r30, 0x45	; 69
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	80 64       	ori	r24, 0x40	; 64
    1eb6:	80 83       	st	Z, r24
            TCCR2_REG.bits.wgm21 = LOGIC_HIGH;
    1eb8:	e5 e4       	ldi	r30, 0x45	; 69
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	88 60       	ori	r24, 0x08	; 8
    1ec0:	80 83       	st	Z, r24

            /* Set Compare Output Mode */
            TCCR2_REG.bits.com20 = GET_BIT(a_timerConfig->compareOutputMode, TIMER_COMP_OUT_MODE_BIT_0);
    1ec2:	a5 e4       	ldi	r26, 0x45	; 69
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eca:	82 81       	ldd	r24, Z+2	; 0x02
    1ecc:	81 70       	andi	r24, 0x01	; 1
    1ece:	81 70       	andi	r24, 0x01	; 1
    1ed0:	81 70       	andi	r24, 0x01	; 1
    1ed2:	81 70       	andi	r24, 0x01	; 1
    1ed4:	98 2f       	mov	r25, r24
    1ed6:	92 95       	swap	r25
    1ed8:	90 7f       	andi	r25, 0xF0	; 240
    1eda:	8c 91       	ld	r24, X
    1edc:	8f 7e       	andi	r24, 0xEF	; 239
    1ede:	89 2b       	or	r24, r25
    1ee0:	8c 93       	st	X, r24
            TCCR2_REG.bits.com21 = GET_BIT(a_timerConfig->compareOutputMode, TIMER_COMP_OUT_MODE_BIT_1);
    1ee2:	a5 e4       	ldi	r26, 0x45	; 69
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eea:	82 81       	ldd	r24, Z+2	; 0x02
    1eec:	88 2f       	mov	r24, r24
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	82 70       	andi	r24, 0x02	; 2
    1ef2:	90 70       	andi	r25, 0x00	; 0
    1ef4:	95 95       	asr	r25
    1ef6:	87 95       	ror	r24
    1ef8:	81 70       	andi	r24, 0x01	; 1
    1efa:	81 70       	andi	r24, 0x01	; 1
    1efc:	98 2f       	mov	r25, r24
    1efe:	92 95       	swap	r25
    1f00:	99 0f       	add	r25, r25
    1f02:	90 7e       	andi	r25, 0xE0	; 224
    1f04:	8c 91       	ld	r24, X
    1f06:	8f 7d       	andi	r24, 0xDF	; 223
    1f08:	89 2b       	or	r24, r25
    1f0a:	8c 93       	st	X, r24

            /* Set the duty cycle value (OCR0) */
            OCR2_REG.byte = a_timerConfig->tick;
    1f0c:	a3 e4       	ldi	r26, 0x43	; 67
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e9 81       	ldd	r30, Y+1	; 0x01
    1f12:	fa 81       	ldd	r31, Y+2	; 0x02
    1f14:	84 81       	ldd	r24, Z+4	; 0x04
    1f16:	8c 93       	st	X, r24
    1f18:	74 c0       	rjmp	.+232    	; 0x2002 <Timer2_init+0x1d0>
            break;

        case TIMER2_MODE_CTC:
            /* Configure CTC mode */
            TCCR2_REG.bits.foc2 = LOGIC_HIGH;
    1f1a:	e5 e4       	ldi	r30, 0x45	; 69
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	80 68       	ori	r24, 0x80	; 128
    1f22:	80 83       	st	Z, r24
            TCCR2_REG.bits.wgm20 = LOGIC_LOW;
    1f24:	e5 e4       	ldi	r30, 0x45	; 69
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	8f 7b       	andi	r24, 0xBF	; 191
    1f2c:	80 83       	st	Z, r24
            TCCR2_REG.bits.wgm21 = LOGIC_HIGH;
    1f2e:	e5 e4       	ldi	r30, 0x45	; 69
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	88 60       	ori	r24, 0x08	; 8
    1f36:	80 83       	st	Z, r24


            /* Set Compare Output Mode */
            TCCR2_REG.bits.com20 = GET_BIT(a_timerConfig->compareOutputMode, TIMER_COMP_OUT_MODE_BIT_0);
    1f38:	a5 e4       	ldi	r26, 0x45	; 69
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	81 70       	andi	r24, 0x01	; 1
    1f44:	81 70       	andi	r24, 0x01	; 1
    1f46:	81 70       	andi	r24, 0x01	; 1
    1f48:	81 70       	andi	r24, 0x01	; 1
    1f4a:	98 2f       	mov	r25, r24
    1f4c:	92 95       	swap	r25
    1f4e:	90 7f       	andi	r25, 0xF0	; 240
    1f50:	8c 91       	ld	r24, X
    1f52:	8f 7e       	andi	r24, 0xEF	; 239
    1f54:	89 2b       	or	r24, r25
    1f56:	8c 93       	st	X, r24
            TCCR2_REG.bits.com21 = GET_BIT(a_timerConfig->compareOutputMode, TIMER_COMP_OUT_MODE_BIT_1);
    1f58:	a5 e4       	ldi	r26, 0x45	; 69
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	88 2f       	mov	r24, r24
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	82 70       	andi	r24, 0x02	; 2
    1f68:	90 70       	andi	r25, 0x00	; 0
    1f6a:	95 95       	asr	r25
    1f6c:	87 95       	ror	r24
    1f6e:	81 70       	andi	r24, 0x01	; 1
    1f70:	81 70       	andi	r24, 0x01	; 1
    1f72:	98 2f       	mov	r25, r24
    1f74:	92 95       	swap	r25
    1f76:	99 0f       	add	r25, r25
    1f78:	90 7e       	andi	r25, 0xE0	; 224
    1f7a:	8c 91       	ld	r24, X
    1f7c:	8f 7d       	andi	r24, 0xDF	; 223
    1f7e:	89 2b       	or	r24, r25
    1f80:	8c 93       	st	X, r24

            /* Enable interrupts if requested */
            if (a_timerConfig->interrupt) {
    1f82:	e9 81       	ldd	r30, Y+1	; 0x01
    1f84:	fa 81       	ldd	r31, Y+2	; 0x02
    1f86:	83 81       	ldd	r24, Z+3	; 0x03
    1f88:	88 23       	and	r24, r24
    1f8a:	51 f0       	breq	.+20     	; 0x1fa0 <Timer2_init+0x16e>
                TIMSK_REG.bits.ocie2 = LOGIC_HIGH;
    1f8c:	e9 e5       	ldi	r30, 0x59	; 89
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	80 68       	ori	r24, 0x80	; 128
    1f94:	80 83       	st	Z, r24
                TIMSK_REG.bits.toie2 = LOGIC_LOW;
    1f96:	e9 e5       	ldi	r30, 0x59	; 89
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	8f 7b       	andi	r24, 0xBF	; 191
    1f9e:	80 83       	st	Z, r24
            }

            /* Set the compare match value (OCR0) */
            OCR2_REG.byte = a_timerConfig->tick;
    1fa0:	e3 e4       	ldi	r30, 0x43	; 67
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	a9 81       	ldd	r26, Y+1	; 0x01
    1fa6:	ba 81       	ldd	r27, Y+2	; 0x02
    1fa8:	14 96       	adiw	r26, 0x04	; 4
    1faa:	8c 91       	ld	r24, X
    1fac:	14 97       	sbiw	r26, 0x04	; 4
    1fae:	80 83       	st	Z, r24
    1fb0:	28 c0       	rjmp	.+80     	; 0x2002 <Timer2_init+0x1d0>
            break;

        case TIMER2_MODE_NORMAL:
            /* Configure Normal mode */
            TCCR2_REG.bits.foc2 = LOGIC_HIGH; // Force Output Compare
    1fb2:	e5 e4       	ldi	r30, 0x45	; 69
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	80 68       	ori	r24, 0x80	; 128
    1fba:	80 83       	st	Z, r24
            TCCR2_REG.bits.wgm20 = LOGIC_LOW;
    1fbc:	e5 e4       	ldi	r30, 0x45	; 69
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	8f 7b       	andi	r24, 0xBF	; 191
    1fc4:	80 83       	st	Z, r24
            TCCR2_REG.bits.wgm21 = LOGIC_LOW;
    1fc6:	e5 e4       	ldi	r30, 0x45	; 69
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	87 7f       	andi	r24, 0xF7	; 247
    1fce:	80 83       	st	Z, r24

            /* Disable Compare Output Mode */
            TCCR2_REG.bits.com20 = LOGIC_LOW;
    1fd0:	e5 e4       	ldi	r30, 0x45	; 69
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	8f 7e       	andi	r24, 0xEF	; 239
    1fd8:	80 83       	st	Z, r24
            TCCR2_REG.bits.com21 = LOGIC_LOW;
    1fda:	e5 e4       	ldi	r30, 0x45	; 69
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	8f 7d       	andi	r24, 0xDF	; 223
    1fe2:	80 83       	st	Z, r24

            /* Enable overflow interrupt if requested */
            if (a_timerConfig->interrupt) {
    1fe4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe8:	83 81       	ldd	r24, Z+3	; 0x03
    1fea:	88 23       	and	r24, r24
    1fec:	51 f0       	breq	.+20     	; 0x2002 <Timer2_init+0x1d0>
                TIMSK_REG.bits.toie2 = LOGIC_HIGH; // Enable Overflow Interrupt
    1fee:	e9 e5       	ldi	r30, 0x59	; 89
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	80 64       	ori	r24, 0x40	; 64
    1ff6:	80 83       	st	Z, r24
                TIMSK_REG.bits.ocie2 = LOGIC_LOW;  // Disable Output Compare Match Interrupt
    1ff8:	e9 e5       	ldi	r30, 0x59	; 89
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	8f 77       	andi	r24, 0x7F	; 127
    2000:	80 83       	st	Z, r24
            }
            break;
    }
    SREG_REG.bits.i=LOGIC_HIGH;
    2002:	ef e5       	ldi	r30, 0x5F	; 95
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	80 68       	ori	r24, 0x80	; 128
    200a:	80 83       	st	Z, r24
}
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <Timer2_setCallback>:
 * be executed during Timer 2 interrupts (either Output Compare Match or
 * Overflow interrupts).
 *
 * @param a_ptr2func Pointer to the callback function to be executed.
 */
void Timer2_setCallback(volatile void (a_ptr2func)(void)) {
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	00 d0       	rcall	.+0      	; 0x2020 <Timer2_setCallback+0x6>
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	9a 83       	std	Y+2, r25	; 0x02
    2026:	89 83       	std	Y+1, r24	; 0x01
    PTR2_Timer2_CallBack = a_ptr2func;
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	9a 81       	ldd	r25, Y+2	; 0x02
    202c:	90 93 bd 00 	sts	0x00BD, r25
    2030:	80 93 bc 00 	sts	0x00BC, r24
}
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <Timer2_setDutyCycle>:
 * This function allows the user to set the duty cycle in Fast PWM mode by
 * updating the OCR0 register with the desired duty cycle value.
 *
 * @param a_duty The duty cycle value to be set (0-255).
 */
void Timer2_setDutyCycle(uint8 a_duty) {
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	0f 92       	push	r0
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	89 83       	std	Y+1, r24	; 0x01
    OCR2_REG.byte = a_duty;
    204a:	e3 e4       	ldi	r30, 0x43	; 67
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	80 83       	st	Z, r24
}
    2052:	0f 90       	pop	r0
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <Timer2_stop>:
 * @brief Stops Timer 2 by clearing the clock source bits.
 *
 * This function stops the timer by disabling the clock source, effectively
 * halting any counting or PWM operations.
 */
void Timer2_stop(void) {
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    TCCR2_REG.byte &= ~(TIMER2_CS_BITMASK); // Clear clock source bits to stop the timer
    2062:	a5 e4       	ldi	r26, 0x45	; 69
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	e5 e4       	ldi	r30, 0x45	; 69
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	88 7f       	andi	r24, 0xF8	; 248
    206e:	8c 93       	st	X, r24
}
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <Timer2_resume>:


void Timer2_resume(void) {
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    TCCR2_REG.byte &= ~TIMER2_CS_BITMASK;       // Clear the clock source bits
    207e:	a5 e4       	ldi	r26, 0x45	; 69
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e5 e4       	ldi	r30, 0x45	; 69
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	88 7f       	andi	r24, 0xF8	; 248
    208a:	8c 93       	st	X, r24
    TCCR2_REG.byte |= (g_lastClockSource & TIMER2_CS_BITMASK);  // Restore last-used clock source
    208c:	a5 e4       	ldi	r26, 0x45	; 69
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e5 e4       	ldi	r30, 0x45	; 69
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	98 2f       	mov	r25, r24
    2098:	80 91 be 00 	lds	r24, 0x00BE
    209c:	87 70       	andi	r24, 0x07	; 7
    209e:	89 2b       	or	r24, r25
    20a0:	8c 93       	st	X, r24
}
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <__vector_4>:
 *
 * This interrupt service routine is executed when a compare match occurs
 * in Timer 2. If a callback function has been registered via
 * `Timer2_setCallback`, it will be called within this ISR.
 */
ISR(TIMER2_COMP_vect) {
    20a8:	1f 92       	push	r1
    20aa:	0f 92       	push	r0
    20ac:	0f b6       	in	r0, 0x3f	; 63
    20ae:	0f 92       	push	r0
    20b0:	11 24       	eor	r1, r1
    20b2:	2f 93       	push	r18
    20b4:	3f 93       	push	r19
    20b6:	4f 93       	push	r20
    20b8:	5f 93       	push	r21
    20ba:	6f 93       	push	r22
    20bc:	7f 93       	push	r23
    20be:	8f 93       	push	r24
    20c0:	9f 93       	push	r25
    20c2:	af 93       	push	r26
    20c4:	bf 93       	push	r27
    20c6:	ef 93       	push	r30
    20c8:	ff 93       	push	r31
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    if (PTR2_Timer2_CallBack != NULL_PTR) {
    20d2:	80 91 bc 00 	lds	r24, 0x00BC
    20d6:	90 91 bd 00 	lds	r25, 0x00BD
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	29 f0       	breq	.+10     	; 0x20e8 <__vector_4+0x40>
        PTR2_Timer2_CallBack();
    20de:	e0 91 bc 00 	lds	r30, 0x00BC
    20e2:	f0 91 bd 00 	lds	r31, 0x00BD
    20e6:	09 95       	icall
    }
}
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	ff 91       	pop	r31
    20ee:	ef 91       	pop	r30
    20f0:	bf 91       	pop	r27
    20f2:	af 91       	pop	r26
    20f4:	9f 91       	pop	r25
    20f6:	8f 91       	pop	r24
    20f8:	7f 91       	pop	r23
    20fa:	6f 91       	pop	r22
    20fc:	5f 91       	pop	r21
    20fe:	4f 91       	pop	r20
    2100:	3f 91       	pop	r19
    2102:	2f 91       	pop	r18
    2104:	0f 90       	pop	r0
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	0f 90       	pop	r0
    210a:	1f 90       	pop	r1
    210c:	18 95       	reti

0000210e <__vector_5>:
 * This interrupt service routine is executed when Timer 2 overflows
 * (i.e., the timer count rolls over from 0xFF to 0x00). If a callback
 * function has been registered via `Timer2_setCallback`, it will be called
 * within this ISR.
 */
ISR(TIMER2_OVF_vect) {
    210e:	1f 92       	push	r1
    2110:	0f 92       	push	r0
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	0f 92       	push	r0
    2116:	11 24       	eor	r1, r1
    2118:	2f 93       	push	r18
    211a:	3f 93       	push	r19
    211c:	4f 93       	push	r20
    211e:	5f 93       	push	r21
    2120:	6f 93       	push	r22
    2122:	7f 93       	push	r23
    2124:	8f 93       	push	r24
    2126:	9f 93       	push	r25
    2128:	af 93       	push	r26
    212a:	bf 93       	push	r27
    212c:	ef 93       	push	r30
    212e:	ff 93       	push	r31
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    if (PTR2_Timer2_CallBack != NULL_PTR) {
    2138:	80 91 bc 00 	lds	r24, 0x00BC
    213c:	90 91 bd 00 	lds	r25, 0x00BD
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	29 f0       	breq	.+10     	; 0x214e <__vector_5+0x40>
        PTR2_Timer2_CallBack();
    2144:	e0 91 bc 00 	lds	r30, 0x00BC
    2148:	f0 91 bd 00 	lds	r31, 0x00BD
    214c:	09 95       	icall
    }
}
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	ff 91       	pop	r31
    2154:	ef 91       	pop	r30
    2156:	bf 91       	pop	r27
    2158:	af 91       	pop	r26
    215a:	9f 91       	pop	r25
    215c:	8f 91       	pop	r24
    215e:	7f 91       	pop	r23
    2160:	6f 91       	pop	r22
    2162:	5f 91       	pop	r21
    2164:	4f 91       	pop	r20
    2166:	3f 91       	pop	r19
    2168:	2f 91       	pop	r18
    216a:	0f 90       	pop	r0
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	0f 90       	pop	r0
    2170:	1f 90       	pop	r1
    2172:	18 95       	reti

00002174 <TWI_init>:
#include "twi.h"
#include "../common/common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    217c:	e0 e2       	ldi	r30, 0x20	; 32
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	82 e0       	ldi	r24, 0x02	; 2
    2182:	80 83       	st	Z, r24
	TWSR = 0x00;
    2184:	e1 e2       	ldi	r30, 0x21	; 33
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    218a:	e2 e2       	ldi	r30, 0x22	; 34
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	82 e0       	ldi	r24, 0x02	; 2
    2190:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2192:	e6 e5       	ldi	r30, 0x56	; 86
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	84 e0       	ldi	r24, 0x04	; 4
    2198:	80 83       	st	Z, r24
}
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	08 95       	ret

000021a0 <TWI_start>:

void TWI_start(void)
{
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    21a8:	e6 e5       	ldi	r30, 0x56	; 86
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	84 ea       	ldi	r24, 0xA4	; 164
    21ae:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    21b0:	e6 e5       	ldi	r30, 0x56	; 86
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	88 23       	and	r24, r24
    21b8:	dc f7       	brge	.-10     	; 0x21b0 <TWI_start+0x10>
}
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <TWI_stop>:

void TWI_stop(void)
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    21c8:	e6 e5       	ldi	r30, 0x56	; 86
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	84 e9       	ldi	r24, 0x94	; 148
    21ce:	80 83       	st	Z, r24
}
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	0f 92       	push	r0
    21dc:	cd b7       	in	r28, 0x3d	; 61
    21de:	de b7       	in	r29, 0x3e	; 62
    21e0:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    21e2:	e3 e2       	ldi	r30, 0x23	; 35
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    21ea:	e6 e5       	ldi	r30, 0x56	; 86
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	84 e8       	ldi	r24, 0x84	; 132
    21f0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    21f2:	e6 e5       	ldi	r30, 0x56	; 86
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	88 23       	and	r24, r24
    21fa:	dc f7       	brge	.-10     	; 0x21f2 <TWI_writeByte+0x1c>
}
    21fc:	0f 90       	pop	r0
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    220c:	e6 e5       	ldi	r30, 0x56	; 86
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	84 ec       	ldi	r24, 0xC4	; 196
    2212:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2214:	e6 e5       	ldi	r30, 0x56	; 86
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	88 23       	and	r24, r24
    221c:	dc f7       	brge	.-10     	; 0x2214 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    221e:	e3 e2       	ldi	r30, 0x23	; 35
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
}
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2232:	e6 e5       	ldi	r30, 0x56	; 86
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	84 e8       	ldi	r24, 0x84	; 132
    2238:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    223a:	e6 e5       	ldi	r30, 0x56	; 86
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	88 23       	and	r24, r24
    2242:	dc f7       	brge	.-10     	; 0x223a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2244:	e3 e2       	ldi	r30, 0x23	; 35
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
}
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	0f 92       	push	r0
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    225a:	e1 e2       	ldi	r30, 0x21	; 33
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	88 7f       	andi	r24, 0xF8	; 248
    2262:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2264:	89 81       	ldd	r24, Y+1	; 0x01
}
    2266:	0f 90       	pop	r0
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <UART_init>:
#include"../common/common_macros.h"
#include <util/delay.h>

static uint16 g_timeOutCount = 0;

void UART_init(const UART_ConfigType *const a_config) {
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	00 d0       	rcall	.+0      	; 0x2274 <UART_init+0x6>
    2274:	00 d0       	rcall	.+0      	; 0x2276 <UART_init+0x8>
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	9c 83       	std	Y+4, r25	; 0x04
    227c:	8b 83       	std	Y+3, r24	; 0x03

	uint16 l_ubbrVal = 0;
    227e:	1a 82       	std	Y+2, r1	; 0x02
    2280:	19 82       	std	Y+1, r1	; 0x01
	g_timeOutCount = 2 * a_config->timeoutMs;
    2282:	eb 81       	ldd	r30, Y+3	; 0x03
    2284:	fc 81       	ldd	r31, Y+4	; 0x04
    2286:	80 85       	ldd	r24, Z+8	; 0x08
    2288:	91 85       	ldd	r25, Z+9	; 0x09
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	90 93 c0 00 	sts	0x00C0, r25
    2292:	80 93 bf 00 	sts	0x00BF, r24
	/* Calculate the UBRR value for 2x transmission speed */
	l_ubbrVal = (uint16) (((F_CPU / (a_config->baudRate * 8UL))) - 1);
    2296:	eb 81       	ldd	r30, Y+3	; 0x03
    2298:	fc 81       	ldd	r31, Y+4	; 0x04
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	a2 81       	ldd	r26, Z+2	; 0x02
    22a0:	b3 81       	ldd	r27, Z+3	; 0x03
    22a2:	88 0f       	add	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	aa 1f       	adc	r26, r26
    22a8:	bb 1f       	adc	r27, r27
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	aa 1f       	adc	r26, r26
    22b0:	bb 1f       	adc	r27, r27
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	aa 1f       	adc	r26, r26
    22b8:	bb 1f       	adc	r27, r27
    22ba:	9c 01       	movw	r18, r24
    22bc:	ad 01       	movw	r20, r26
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	92 e1       	ldi	r25, 0x12	; 18
    22c2:	aa e7       	ldi	r26, 0x7A	; 122
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 9a 20 	call	0x4134	; 0x4134 <__udivmodsi4>
    22ce:	da 01       	movw	r26, r20
    22d0:	c9 01       	movw	r24, r18
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01

	/* Enable 2x transmission speed for asynchronous communication */
	UCSRA_REG.bits.u2x = LOGIC_HIGH;
    22d8:	eb e2       	ldi	r30, 0x2B	; 43
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	82 60       	ori	r24, 0x02	; 2
    22e0:	80 83       	st	Z, r24

	/* Set UCSRC_REG and select it with URSEL set to 1 */
	UCSRC_REG.byte = 0x80;
    22e2:	e0 e4       	ldi	r30, 0x40	; 64
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 e8       	ldi	r24, 0x80	; 128
    22e8:	80 83       	st	Z, r24

	/* Configure character size */
	UCSRC_REG.bits.ucsz0 = GET_BIT(a_config->charSize, 0);
    22ea:	a0 e4       	ldi	r26, 0x40	; 64
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	eb 81       	ldd	r30, Y+3	; 0x03
    22f0:	fc 81       	ldd	r31, Y+4	; 0x04
    22f2:	86 81       	ldd	r24, Z+6	; 0x06
    22f4:	81 70       	andi	r24, 0x01	; 1
    22f6:	81 70       	andi	r24, 0x01	; 1
    22f8:	81 70       	andi	r24, 0x01	; 1
    22fa:	81 70       	andi	r24, 0x01	; 1
    22fc:	98 2f       	mov	r25, r24
    22fe:	99 0f       	add	r25, r25
    2300:	8c 91       	ld	r24, X
    2302:	8d 7f       	andi	r24, 0xFD	; 253
    2304:	89 2b       	or	r24, r25
    2306:	8c 93       	st	X, r24
	UCSRC_REG.bits.ucsz1 = GET_BIT(a_config->charSize, 1);
    2308:	a0 e4       	ldi	r26, 0x40	; 64
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	eb 81       	ldd	r30, Y+3	; 0x03
    230e:	fc 81       	ldd	r31, Y+4	; 0x04
    2310:	86 81       	ldd	r24, Z+6	; 0x06
    2312:	88 2f       	mov	r24, r24
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	82 70       	andi	r24, 0x02	; 2
    2318:	90 70       	andi	r25, 0x00	; 0
    231a:	95 95       	asr	r25
    231c:	87 95       	ror	r24
    231e:	81 70       	andi	r24, 0x01	; 1
    2320:	81 70       	andi	r24, 0x01	; 1
    2322:	98 2f       	mov	r25, r24
    2324:	99 0f       	add	r25, r25
    2326:	99 0f       	add	r25, r25
    2328:	8c 91       	ld	r24, X
    232a:	8b 7f       	andi	r24, 0xFB	; 251
    232c:	89 2b       	or	r24, r25
    232e:	8c 93       	st	X, r24
	UCSRB_REG.bits.ucsz2 = GET_BIT(a_config->charSize, 2);
    2330:	aa e2       	ldi	r26, 0x2A	; 42
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	eb 81       	ldd	r30, Y+3	; 0x03
    2336:	fc 81       	ldd	r31, Y+4	; 0x04
    2338:	86 81       	ldd	r24, Z+6	; 0x06
    233a:	88 2f       	mov	r24, r24
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	84 70       	andi	r24, 0x04	; 4
    2340:	90 70       	andi	r25, 0x00	; 0
    2342:	95 95       	asr	r25
    2344:	87 95       	ror	r24
    2346:	95 95       	asr	r25
    2348:	87 95       	ror	r24
    234a:	81 70       	andi	r24, 0x01	; 1
    234c:	81 70       	andi	r24, 0x01	; 1
    234e:	98 2f       	mov	r25, r24
    2350:	99 0f       	add	r25, r25
    2352:	99 0f       	add	r25, r25
    2354:	8c 91       	ld	r24, X
    2356:	8b 7f       	andi	r24, 0xFB	; 251
    2358:	89 2b       	or	r24, r25
    235a:	8c 93       	st	X, r24

	/* Configure parity settings */
	UCSRC_REG.bits.upm0 = GET_BIT(a_config->parity, 0);
    235c:	a0 e4       	ldi	r26, 0x40	; 64
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	eb 81       	ldd	r30, Y+3	; 0x03
    2362:	fc 81       	ldd	r31, Y+4	; 0x04
    2364:	84 81       	ldd	r24, Z+4	; 0x04
    2366:	81 70       	andi	r24, 0x01	; 1
    2368:	81 70       	andi	r24, 0x01	; 1
    236a:	81 70       	andi	r24, 0x01	; 1
    236c:	81 70       	andi	r24, 0x01	; 1
    236e:	98 2f       	mov	r25, r24
    2370:	92 95       	swap	r25
    2372:	90 7f       	andi	r25, 0xF0	; 240
    2374:	8c 91       	ld	r24, X
    2376:	8f 7e       	andi	r24, 0xEF	; 239
    2378:	89 2b       	or	r24, r25
    237a:	8c 93       	st	X, r24
	UCSRC_REG.bits.upm1 = GET_BIT(a_config->parity, 1);
    237c:	a0 e4       	ldi	r26, 0x40	; 64
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	eb 81       	ldd	r30, Y+3	; 0x03
    2382:	fc 81       	ldd	r31, Y+4	; 0x04
    2384:	84 81       	ldd	r24, Z+4	; 0x04
    2386:	88 2f       	mov	r24, r24
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	82 70       	andi	r24, 0x02	; 2
    238c:	90 70       	andi	r25, 0x00	; 0
    238e:	95 95       	asr	r25
    2390:	87 95       	ror	r24
    2392:	81 70       	andi	r24, 0x01	; 1
    2394:	81 70       	andi	r24, 0x01	; 1
    2396:	98 2f       	mov	r25, r24
    2398:	92 95       	swap	r25
    239a:	99 0f       	add	r25, r25
    239c:	90 7e       	andi	r25, 0xE0	; 224
    239e:	8c 91       	ld	r24, X
    23a0:	8f 7d       	andi	r24, 0xDF	; 223
    23a2:	89 2b       	or	r24, r25
    23a4:	8c 93       	st	X, r24
	/* configure stop bit 1 or 2 */
	UCSRC_REG.bits.usbs = a_config->stopBit;
    23a6:	a0 e4       	ldi	r26, 0x40	; 64
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	eb 81       	ldd	r30, Y+3	; 0x03
    23ac:	fc 81       	ldd	r31, Y+4	; 0x04
    23ae:	85 81       	ldd	r24, Z+5	; 0x05
    23b0:	81 70       	andi	r24, 0x01	; 1
    23b2:	81 70       	andi	r24, 0x01	; 1
    23b4:	98 2f       	mov	r25, r24
    23b6:	99 0f       	add	r25, r25
    23b8:	99 0f       	add	r25, r25
    23ba:	99 0f       	add	r25, r25
    23bc:	8c 91       	ld	r24, X
    23be:	87 7f       	andi	r24, 0xF7	; 247
    23c0:	89 2b       	or	r24, r25
    23c2:	8c 93       	st	X, r24
	/* Select synchronous or asynchronous mode */
	UCSRC_REG.bits.umsel = a_config->asyncMode;
    23c4:	a0 e4       	ldi	r26, 0x40	; 64
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	eb 81       	ldd	r30, Y+3	; 0x03
    23ca:	fc 81       	ldd	r31, Y+4	; 0x04
    23cc:	87 81       	ldd	r24, Z+7	; 0x07
    23ce:	81 70       	andi	r24, 0x01	; 1
    23d0:	81 70       	andi	r24, 0x01	; 1
    23d2:	98 2f       	mov	r25, r24
    23d4:	92 95       	swap	r25
    23d6:	99 0f       	add	r25, r25
    23d8:	99 0f       	add	r25, r25
    23da:	90 7c       	andi	r25, 0xC0	; 192
    23dc:	8c 91       	ld	r24, X
    23de:	8f 7b       	andi	r24, 0xBF	; 191
    23e0:	89 2b       	or	r24, r25
    23e2:	8c 93       	st	X, r24

	/* Enable the UART transmitter and receiver */
	UCSRB_REG.bits.rxen = LOGIC_HIGH;
    23e4:	ea e2       	ldi	r30, 0x2A	; 42
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	80 61       	ori	r24, 0x10	; 16
    23ec:	80 83       	st	Z, r24
	UCSRB_REG.bits.txen = LOGIC_HIGH;
    23ee:	ea e2       	ldi	r30, 0x2A	; 42
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	88 60       	ori	r24, 0x08	; 8
    23f6:	80 83       	st	Z, r24

	/* Set baud rate in UBRR registers */
	UBRRH_REG.byte = (uint8) (l_ubbrVal >> 8);  // High byte
    23f8:	e0 e4       	ldi	r30, 0x40	; 64
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2400:	89 2f       	mov	r24, r25
    2402:	99 27       	eor	r25, r25
    2404:	80 83       	st	Z, r24
	UBRRL_REG.byte = (uint8) l_ubbrVal;         // Low byte
    2406:	e9 e2       	ldi	r30, 0x29	; 41
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	80 83       	st	Z, r24
}
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <UART_sendByte>:
void UART_sendByte(const uint8 a_data) {
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	0f 92       	push	r0
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (!UCSRA_REG.bits.udre) {
    2428:	eb e2       	ldi	r30, 0x2B	; 43
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	80 72       	andi	r24, 0x20	; 32
    2430:	88 23       	and	r24, r24
    2432:	d1 f3       	breq	.-12     	; 0x2428 <UART_sendByte+0xc>
	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */

	UDR_REG.byte = a_data;
    2434:	ec e2       	ldi	r30, 0x2C	; 44
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	80 83       	st	Z, r24

}
    243c:	0f 90       	pop	r0
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	08 95       	ret

00002444 <UART_receiveByte>:
sint16 UART_receiveByte() {
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62

    while (!UCSRA_REG.bits.rxc) {
    244c:	eb e2       	ldi	r30, 0x2B	; 43
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	80 78       	andi	r24, 0x80	; 128
    2454:	88 23       	and	r24, r24
    2456:	d1 f3       	breq	.-12     	; 0x244c <UART_receiveByte+0x8>

    }
    return UDR_REG.byte;  // Return the received byte
    2458:	ec e2       	ldi	r30, 0x2C	; 44
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	88 2f       	mov	r24, r24
    2460:	90 e0       	ldi	r25, 0x00	; 0
}
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	00 d0       	rcall	.+0      	; 0x246e <UART_sendString+0x6>
    246e:	0f 92       	push	r0
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	9b 83       	std	Y+3, r25	; 0x03
    2476:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2478:	19 82       	std	Y+1, r1	; 0x01
    247a:	0e c0       	rjmp	.+28     	; 0x2498 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	28 2f       	mov	r18, r24
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	9b 81       	ldd	r25, Y+3	; 0x03
    2486:	fc 01       	movw	r30, r24
    2488:	e2 0f       	add	r30, r18
    248a:	f3 1f       	adc	r31, r19
    248c:	80 81       	ld	r24, Z
    248e:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>
		i++;
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	8f 5f       	subi	r24, 0xFF	; 255
    2496:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	28 2f       	mov	r18, r24
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	9b 81       	ldd	r25, Y+3	; 0x03
    24a2:	fc 01       	movw	r30, r24
    24a4:	e2 0f       	add	r30, r18
    24a6:	f3 1f       	adc	r31, r19
    24a8:	80 81       	ld	r24, Z
    24aa:	88 23       	and	r24, r24
    24ac:	39 f7       	brne	.-50     	; 0x247c <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}UART_sendByte('#');
    24ae:	83 e2       	ldi	r24, 0x23	; 35
    24b0:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <UART_receiveString+0xa>
    24ca:	0f 92       	push	r0
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	9b 83       	std	Y+3, r25	; 0x03
    24d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24d4:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte(1000);
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	9b 81       	ldd	r25, Y+3	; 0x03
    24e0:	8c 01       	movw	r16, r24
    24e2:	02 0f       	add	r16, r18
    24e4:	13 1f       	adc	r17, r19
    24e6:	88 ee       	ldi	r24, 0xE8	; 232
    24e8:	93 e0       	ldi	r25, 0x03	; 3
    24ea:	0e 94 22 12 	call	0x2444	; 0x2444 <UART_receiveByte>
    24ee:	f8 01       	movw	r30, r16
    24f0:	80 83       	st	Z, r24
    24f2:	11 c0       	rjmp	.+34     	; 0x2516 <UART_receiveString+0x56>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	8f 5f       	subi	r24, 0xFF	; 255
    24f8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte(1000);
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	28 2f       	mov	r18, r24
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	9b 81       	ldd	r25, Y+3	; 0x03
    2504:	8c 01       	movw	r16, r24
    2506:	02 0f       	add	r16, r18
    2508:	13 1f       	adc	r17, r19
    250a:	88 ee       	ldi	r24, 0xE8	; 232
    250c:	93 e0       	ldi	r25, 0x03	; 3
    250e:	0e 94 22 12 	call	0x2444	; 0x2444 <UART_receiveByte>
    2512:	f8 01       	movw	r30, r16
    2514:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte(1000);

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	28 2f       	mov	r18, r24
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	9b 81       	ldd	r25, Y+3	; 0x03
    2520:	fc 01       	movw	r30, r24
    2522:	e2 0f       	add	r30, r18
    2524:	f3 1f       	adc	r31, r19
    2526:	80 81       	ld	r24, Z
    2528:	83 32       	cpi	r24, 0x23	; 35
    252a:	21 f7       	brne	.-56     	; 0x24f4 <UART_receiveString+0x34>
		i++;
		Str[i] = UART_receiveByte(1000);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	28 2f       	mov	r18, r24
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	9b 81       	ldd	r25, Y+3	; 0x03
    2536:	fc 01       	movw	r30, r24
    2538:	e2 0f       	add	r30, r18
    253a:	f3 1f       	adc	r31, r19
    253c:	10 82       	st	Z, r1
}
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	1f 91       	pop	r17
    254a:	0f 91       	pop	r16
    254c:	08 95       	ret

0000254e <Buzzer_init>:
#include "buzzer.h"

#include"../common/std_types.h"
#include "../mcal/gpio.h"

void Buzzer_init() {
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62

		GPIO_ARR_setPinDirection(BUZZER_PIN, PIN_OUTPUT);
    2556:	85 e1       	ldi	r24, 0x15	; 21
    2558:	61 e0       	ldi	r22, 0x01	; 1
    255a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_ARR_setPinDirection>

}
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <Buzzer_on>:

void Buzzer_on() {
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
#ifdef BUZZER_POSTIVE_LOGIC
	GPIO_ARR_setPinState(BUZZER_PIN, LOGIC_HIGH);
    256c:	85 e1       	ldi	r24, 0x15	; 21
    256e:	61 e0       	ldi	r22, 0x01	; 1
    2570:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_ARR_setPinState>
#else
	GPIO_ARR_setPinState(BUZZER_PIN,LOGIC_LOW);
#endif

}
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <Buzzer_off>:

void Buzzer_off() {
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
#ifdef BUZZER_POSTIVE_LOGIC
	GPIO_ARR_setPinState(BUZZER_PIN, LOGIC_LOW);
    2582:	85 e1       	ldi	r24, 0x15	; 21
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_ARR_setPinState>
#else
	GPIO_ARR_setPinState(BUZZER_PIN,LOGIC_HIGH);
#endif

}
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <DcMotor_Timer2_ISR>:
Timer2_Config timer2_config = { .mode = TIMER2_MODE_CTC, .clockSource =
		TIMER2_PRESCALER_1024, .compareOutputMode = TIMER2_COMPARE_CLEAR,.interrupt= TRUE , .tick =
		255, .intialCount = 0

};
 void  DcMotor_Timer2_ISR(){
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
if (g_ticks<64)
    2598:	80 91 c1 00 	lds	r24, 0x00C1
    259c:	80 34       	cpi	r24, 0x40	; 64
    259e:	30 f4       	brcc	.+12     	; 0x25ac <DcMotor_Timer2_ISR+0x1c>
	g_ticks++;
    25a0:	80 91 c1 00 	lds	r24, 0x00C1
    25a4:	8f 5f       	subi	r24, 0xFF	; 255
    25a6:	80 93 c1 00 	sts	0x00C1, r24
    25aa:	15 c0       	rjmp	.+42     	; 0x25d6 <DcMotor_Timer2_ISR+0x46>
else {
	g_ticks=0;
    25ac:	10 92 c1 00 	sts	0x00C1, r1
	g_sec++;
    25b0:	80 91 c2 00 	lds	r24, 0x00C2
    25b4:	90 91 c3 00 	lds	r25, 0x00C3
    25b8:	a0 91 c4 00 	lds	r26, 0x00C4
    25bc:	b0 91 c5 00 	lds	r27, 0x00C5
    25c0:	01 96       	adiw	r24, 0x01	; 1
    25c2:	a1 1d       	adc	r26, r1
    25c4:	b1 1d       	adc	r27, r1
    25c6:	80 93 c2 00 	sts	0x00C2, r24
    25ca:	90 93 c3 00 	sts	0x00C3, r25
    25ce:	a0 93 c4 00 	sts	0x00C4, r26
    25d2:	b0 93 c5 00 	sts	0x00C5, r27
}

}
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	08 95       	ret

000025dc <Reset_Timer2Conter>:
static  void Reset_Timer2Conter(){
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    Timer2_stop();
    25e4:	0e 94 2d 10 	call	0x205a	; 0x205a <Timer2_stop>
	g_ticks=0;
    25e8:	10 92 c1 00 	sts	0x00C1, r1
	g_sec=0;
    25ec:	10 92 c2 00 	sts	0x00C2, r1
    25f0:	10 92 c3 00 	sts	0x00C3, r1
    25f4:	10 92 c4 00 	sts	0x00C4, r1
    25f8:	10 92 c5 00 	sts	0x00C5, r1

}
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <DcMotor_init>:

void DcMotor_init() {
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
	Timer0_init(&timer0_config);
    260a:	81 ea       	ldi	r24, 0xA1	; 161
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <Timer0_init>
	Timer2_init(&timer2_config);
    2612:	87 ea       	ldi	r24, 0xA7	; 167
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <Timer2_init>
	Timer2_setCallback(DcMotor_Timer2_ISR);
    261a:	88 ec       	ldi	r24, 0xC8	; 200
    261c:	92 e1       	ldi	r25, 0x12	; 18
    261e:	0e 94 0d 10 	call	0x201a	; 0x201a <Timer2_setCallback>
	Timer2_stop();
    2622:	0e 94 2d 10 	call	0x205a	; 0x205a <Timer2_stop>
	//GPIO_setupPinDirection(PORTD_ID,6,PIN_OUTPUT);
	//GPIO_setupPinDirection(PORTD_ID,7,PIN_OUTPUT);
	GPIO_ARR_setPinDirection(DCMOTOR_IN_1, PIN_OUTPUT);
    2626:	8e e1       	ldi	r24, 0x1E	; 30
    2628:	61 e0       	ldi	r22, 0x01	; 1
    262a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_ARR_setPinDirection>
	GPIO_ARR_setPinDirection(DCMOTOR_IN_2, PIN_OUTPUT);
    262e:	8f e1       	ldi	r24, 0x1F	; 31
    2630:	61 e0       	ldi	r22, 0x01	; 1
    2632:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_ARR_setPinDirection>

	GPIO_ARR_setPinDirection(DCMOTOR_E1, PIN_OUTPUT);
    2636:	8b e0       	ldi	r24, 0x0B	; 11
    2638:	61 e0       	ldi	r22, 0x01	; 1
    263a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_ARR_setPinDirection>

}
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <DcMotor_rotate>:
void DcMotor_rotate(DCMOTOR_STATE a_state, uint8 a_speed) {
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	00 d0       	rcall	.+0      	; 0x264a <DcMotor_rotate+0x6>
    264a:	00 d0       	rcall	.+0      	; 0x264c <DcMotor_rotate+0x8>
    264c:	0f 92       	push	r0
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	8a 83       	std	Y+2, r24	; 0x02
    2654:	6b 83       	std	Y+3, r22	; 0x03
	switch (a_state) {
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	3d 83       	std	Y+5, r19	; 0x05
    265e:	2c 83       	std	Y+4, r18	; 0x04
    2660:	8c 81       	ldd	r24, Y+4	; 0x04
    2662:	9d 81       	ldd	r25, Y+5	; 0x05
    2664:	81 30       	cpi	r24, 0x01	; 1
    2666:	91 05       	cpc	r25, r1
    2668:	79 f1       	breq	.+94     	; 0x26c8 <DcMotor_rotate+0x84>
    266a:	2c 81       	ldd	r18, Y+4	; 0x04
    266c:	3d 81       	ldd	r19, Y+5	; 0x05
    266e:	22 30       	cpi	r18, 0x02	; 2
    2670:	31 05       	cpc	r19, r1
    2672:	d9 f1       	breq	.+118    	; 0x26ea <DcMotor_rotate+0xa6>
    2674:	8c 81       	ldd	r24, Y+4	; 0x04
    2676:	9d 81       	ldd	r25, Y+5	; 0x05
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	09 f0       	breq	.+2      	; 0x267e <DcMotor_rotate+0x3a>
    267c:	3e c0       	rjmp	.+124    	; 0x26fa <DcMotor_rotate+0xb6>
	case CW:
		LCD_displayString("cw");
    267e:	80 e6       	ldi	r24, 0x60	; 96
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <LCD_displayString>

		//GPIO_ARR_setPinState(/*DCMOTOR_IN_1*/30, HIGH);
		//GPIO_ARR_setPinState(/*DCMOTOR_IN_2*/31, LOW);
		DDRD|=(1<<6);
    2686:	a1 e3       	ldi	r26, 0x31	; 49
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	e1 e3       	ldi	r30, 0x31	; 49
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	80 64       	ori	r24, 0x40	; 64
    2692:	8c 93       	st	X, r24
		DDRD|=(1<<7);
    2694:	a1 e3       	ldi	r26, 0x31	; 49
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e1 e3       	ldi	r30, 0x31	; 49
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	80 68       	ori	r24, 0x80	; 128
    26a0:	8c 93       	st	X, r24
		PORTD|=(1<<6);
    26a2:	a2 e3       	ldi	r26, 0x32	; 50
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e2 e3       	ldi	r30, 0x32	; 50
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	80 64       	ori	r24, 0x40	; 64
    26ae:	8c 93       	st	X, r24
		PORTD&=~(1<<7);
    26b0:	a2 e3       	ldi	r26, 0x32	; 50
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	e2 e3       	ldi	r30, 0x32	; 50
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	8f 77       	andi	r24, 0x7F	; 127
    26bc:	8c 93       	st	X, r24

		LCD_displayString("end cw");
    26be:	83 e6       	ldi	r24, 0x63	; 99
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <LCD_displayString>
    26c6:	19 c0       	rjmp	.+50     	; 0x26fa <DcMotor_rotate+0xb6>

		break;
	case ACW:
		LCD_displayString(" acw");
    26c8:	8a e6       	ldi	r24, 0x6A	; 106
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <LCD_displayString>
		GPIO_ARR_setPinState(DCMOTOR_IN_2, HIGH);
    26d0:	8f e1       	ldi	r24, 0x1F	; 31
    26d2:	61 e0       	ldi	r22, 0x01	; 1
    26d4:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_ARR_setPinState>
		GPIO_ARR_setPinState(DCMOTOR_IN_1, LOW);
    26d8:	8e e1       	ldi	r24, 0x1E	; 30
    26da:	60 e0       	ldi	r22, 0x00	; 0
    26dc:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_ARR_setPinState>
		/*DDRD|=(1<<6);
		DDRD|=(1<<7);
		PORTD|=(1<<7);
		PORTD&=~(1<<6);*/
		LCD_displayString("end acw");
    26e0:	8f e6       	ldi	r24, 0x6F	; 111
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <LCD_displayString>
    26e8:	08 c0       	rjmp	.+16     	; 0x26fa <DcMotor_rotate+0xb6>
		break;
	case STOP:
		GPIO_ARR_setPinState(DCMOTOR_IN_1, LOGIC_LOW);
    26ea:	8e e1       	ldi	r24, 0x1E	; 30
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_ARR_setPinState>
		GPIO_ARR_setPinState(DCMOTOR_IN_2, LOGIC_LOW);
    26f2:	8f e1       	ldi	r24, 0x1F	; 31
    26f4:	60 e0       	ldi	r22, 0x00	; 0
    26f6:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_ARR_setPinState>
		break;
	};
	uint8 l_duty = MAP(a_speed, 0, 100, 0, 255);
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	48 2f       	mov	r20, r24
    26fe:	50 e0       	ldi	r21, 0x00	; 0
    2700:	ca 01       	movw	r24, r20
    2702:	9c 01       	movw	r18, r24
    2704:	22 0f       	add	r18, r18
    2706:	33 1f       	adc	r19, r19
    2708:	c9 01       	movw	r24, r18
    270a:	96 95       	lsr	r25
    270c:	98 2f       	mov	r25, r24
    270e:	88 27       	eor	r24, r24
    2710:	97 95       	ror	r25
    2712:	87 95       	ror	r24
    2714:	82 1b       	sub	r24, r18
    2716:	93 0b       	sbc	r25, r19
    2718:	84 0f       	add	r24, r20
    271a:	95 1f       	adc	r25, r21
    271c:	24 e6       	ldi	r18, 0x64	; 100
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	b9 01       	movw	r22, r18
    2722:	0e 94 87 20 	call	0x410e	; 0x410e <__divmodhi4>
    2726:	cb 01       	movw	r24, r22
    2728:	89 83       	std	Y+1, r24	; 0x01
	Timer0_setDutyCycle(l_duty);
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <Timer0_setDutyCycle>

}
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <DcMotor_OnForTime>:
void DcMotor_OnForTime(DCMOTOR_STATE a_state, uint8 a_speed,uint16 a_time){
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	00 d0       	rcall	.+0      	; 0x2746 <DcMotor_OnForTime+0x6>
    2746:	00 d0       	rcall	.+0      	; 0x2748 <DcMotor_OnForTime+0x8>
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	89 83       	std	Y+1, r24	; 0x01
    274e:	6a 83       	std	Y+2, r22	; 0x02
    2750:	5c 83       	std	Y+4, r21	; 0x04
    2752:	4b 83       	std	Y+3, r20	; 0x03
	Reset_Timer2Conter();
    2754:	0e 94 ee 12 	call	0x25dc	; 0x25dc <Reset_Timer2Conter>
	Timer2_resume();
    2758:	0e 94 3b 10 	call	0x2076	; 0x2076 <Timer2_resume>
	DcMotor_rotate(a_state,a_speed);
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	6a 81       	ldd	r22, Y+2	; 0x02
    2760:	0e 94 22 13 	call	0x2644	; 0x2644 <DcMotor_rotate>
	while (g_sec<=a_time){}
    2764:	8b 81       	ldd	r24, Y+3	; 0x03
    2766:	9c 81       	ldd	r25, Y+4	; 0x04
    2768:	9c 01       	movw	r18, r24
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	80 91 c2 00 	lds	r24, 0x00C2
    2772:	90 91 c3 00 	lds	r25, 0x00C3
    2776:	a0 91 c4 00 	lds	r26, 0x00C4
    277a:	b0 91 c5 00 	lds	r27, 0x00C5
    277e:	28 17       	cp	r18, r24
    2780:	39 07       	cpc	r19, r25
    2782:	4a 07       	cpc	r20, r26
    2784:	5b 07       	cpc	r21, r27
    2786:	70 f7       	brcc	.-36     	; 0x2764 <DcMotor_OnForTime+0x24>
	DcMotor_rotate(STOP,0);
    2788:	82 e0       	ldi	r24, 0x02	; 2
    278a:	60 e0       	ldi	r22, 0x00	; 0
    278c:	0e 94 22 13 	call	0x2644	; 0x2644 <DcMotor_rotate>
	Reset_Timer2Conter();
    2790:	0e 94 ee 12 	call	0x25dc	; 0x25dc <Reset_Timer2Conter>
}
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../mcal/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <EEPROM_writeByte+0x6>
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <EEPROM_writeByte+0x8>
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
    27b2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    27b4:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    27b8:	0e 94 28 11 	call	0x2250	; 0x2250 <TWI_getStatus>
    27bc:	88 30       	cpi	r24, 0x08	; 8
    27be:	11 f0       	breq	.+4      	; 0x27c4 <EEPROM_writeByte+0x22>
        return ERROR;
    27c0:	1c 82       	std	Y+4, r1	; 0x04
    27c2:	28 c0       	rjmp	.+80     	; 0x2814 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	9a 81       	ldd	r25, Y+2	; 0x02
    27c8:	80 70       	andi	r24, 0x00	; 0
    27ca:	97 70       	andi	r25, 0x07	; 7
    27cc:	88 0f       	add	r24, r24
    27ce:	89 2f       	mov	r24, r25
    27d0:	88 1f       	adc	r24, r24
    27d2:	99 0b       	sbc	r25, r25
    27d4:	91 95       	neg	r25
    27d6:	80 6a       	ori	r24, 0xA0	; 160
    27d8:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    27dc:	0e 94 28 11 	call	0x2250	; 0x2250 <TWI_getStatus>
    27e0:	88 31       	cpi	r24, 0x18	; 24
    27e2:	11 f0       	breq	.+4      	; 0x27e8 <EEPROM_writeByte+0x46>
        return ERROR; 
    27e4:	1c 82       	std	Y+4, r1	; 0x04
    27e6:	16 c0       	rjmp	.+44     	; 0x2814 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    27ee:	0e 94 28 11 	call	0x2250	; 0x2250 <TWI_getStatus>
    27f2:	88 32       	cpi	r24, 0x28	; 40
    27f4:	11 f0       	breq	.+4      	; 0x27fa <EEPROM_writeByte+0x58>
        return ERROR;
    27f6:	1c 82       	std	Y+4, r1	; 0x04
    27f8:	0d c0       	rjmp	.+26     	; 0x2814 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    27fa:	8b 81       	ldd	r24, Y+3	; 0x03
    27fc:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2800:	0e 94 28 11 	call	0x2250	; 0x2250 <TWI_getStatus>
    2804:	88 32       	cpi	r24, 0x28	; 40
    2806:	11 f0       	breq	.+4      	; 0x280c <EEPROM_writeByte+0x6a>
        return ERROR;
    2808:	1c 82       	std	Y+4, r1	; 0x04
    280a:	04 c0       	rjmp	.+8      	; 0x2814 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    280c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <TWI_stop>
	
    return SUCCESS;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	8c 83       	std	Y+4, r24	; 0x04
    2814:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	00 d0       	rcall	.+0      	; 0x282a <EEPROM_readByte+0x6>
    282a:	00 d0       	rcall	.+0      	; 0x282c <EEPROM_readByte+0x8>
    282c:	0f 92       	push	r0
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	9a 83       	std	Y+2, r25	; 0x02
    2834:	89 83       	std	Y+1, r24	; 0x01
    2836:	7c 83       	std	Y+4, r23	; 0x04
    2838:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    283a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    283e:	0e 94 28 11 	call	0x2250	; 0x2250 <TWI_getStatus>
    2842:	88 30       	cpi	r24, 0x08	; 8
    2844:	11 f0       	breq	.+4      	; 0x284a <EEPROM_readByte+0x26>
        return ERROR;
    2846:	1d 82       	std	Y+5, r1	; 0x05
    2848:	44 c0       	rjmp	.+136    	; 0x28d2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	9a 81       	ldd	r25, Y+2	; 0x02
    284e:	80 70       	andi	r24, 0x00	; 0
    2850:	97 70       	andi	r25, 0x07	; 7
    2852:	88 0f       	add	r24, r24
    2854:	89 2f       	mov	r24, r25
    2856:	88 1f       	adc	r24, r24
    2858:	99 0b       	sbc	r25, r25
    285a:	91 95       	neg	r25
    285c:	80 6a       	ori	r24, 0xA0	; 160
    285e:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2862:	0e 94 28 11 	call	0x2250	; 0x2250 <TWI_getStatus>
    2866:	88 31       	cpi	r24, 0x18	; 24
    2868:	11 f0       	breq	.+4      	; 0x286e <EEPROM_readByte+0x4a>
        return ERROR;
    286a:	1d 82       	std	Y+5, r1	; 0x05
    286c:	32 c0       	rjmp	.+100    	; 0x28d2 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2874:	0e 94 28 11 	call	0x2250	; 0x2250 <TWI_getStatus>
    2878:	88 32       	cpi	r24, 0x28	; 40
    287a:	11 f0       	breq	.+4      	; 0x2880 <EEPROM_readByte+0x5c>
        return ERROR;
    287c:	1d 82       	std	Y+5, r1	; 0x05
    287e:	29 c0       	rjmp	.+82     	; 0x28d2 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2880:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2884:	0e 94 28 11 	call	0x2250	; 0x2250 <TWI_getStatus>
    2888:	80 31       	cpi	r24, 0x10	; 16
    288a:	11 f0       	breq	.+4      	; 0x2890 <EEPROM_readByte+0x6c>
        return ERROR;
    288c:	1d 82       	std	Y+5, r1	; 0x05
    288e:	21 c0       	rjmp	.+66     	; 0x28d2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	9a 81       	ldd	r25, Y+2	; 0x02
    2894:	80 70       	andi	r24, 0x00	; 0
    2896:	97 70       	andi	r25, 0x07	; 7
    2898:	88 0f       	add	r24, r24
    289a:	89 2f       	mov	r24, r25
    289c:	88 1f       	adc	r24, r24
    289e:	99 0b       	sbc	r25, r25
    28a0:	91 95       	neg	r25
    28a2:	81 6a       	ori	r24, 0xA1	; 161
    28a4:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    28a8:	0e 94 28 11 	call	0x2250	; 0x2250 <TWI_getStatus>
    28ac:	80 34       	cpi	r24, 0x40	; 64
    28ae:	11 f0       	breq	.+4      	; 0x28b4 <EEPROM_readByte+0x90>
        return ERROR;
    28b0:	1d 82       	std	Y+5, r1	; 0x05
    28b2:	0f c0       	rjmp	.+30     	; 0x28d2 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    28b4:	0e 94 15 11 	call	0x222a	; 0x222a <TWI_readByteWithNACK>
    28b8:	eb 81       	ldd	r30, Y+3	; 0x03
    28ba:	fc 81       	ldd	r31, Y+4	; 0x04
    28bc:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    28be:	0e 94 28 11 	call	0x2250	; 0x2250 <TWI_getStatus>
    28c2:	88 35       	cpi	r24, 0x58	; 88
    28c4:	11 f0       	breq	.+4      	; 0x28ca <EEPROM_readByte+0xa6>
        return ERROR;
    28c6:	1d 82       	std	Y+5, r1	; 0x05
    28c8:	04 c0       	rjmp	.+8      	; 0x28d2 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    28ca:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <TWI_stop>

    return SUCCESS;
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	8d 83       	std	Y+5, r24	; 0x05
    28d2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <HMI_recievePassword>:
#include<util/delay.h>
#include "../hal/external_eeprom.h"
#include"pir.h"
uint8 g_pass[6];

static void HMI_recievePassword(uint8 *a_pass) {
    28e4:	0f 93       	push	r16
    28e6:	1f 93       	push	r17
    28e8:	df 93       	push	r29
    28ea:	cf 93       	push	r28
    28ec:	00 d0       	rcall	.+0      	; 0x28ee <HMI_recievePassword+0xa>
    28ee:	0f 92       	push	r0
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
    28f4:	9b 83       	std	Y+3, r25	; 0x03
    28f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28f8:	19 82       	std	Y+1, r1	; 0x01
	a_pass[i] = UART_receiveByte();
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	9b 81       	ldd	r25, Y+3	; 0x03
    2904:	8c 01       	movw	r16, r24
    2906:	02 0f       	add	r16, r18
    2908:	13 1f       	adc	r17, r19
    290a:	0e 94 22 12 	call	0x2444	; 0x2444 <UART_receiveByte>
    290e:	f8 01       	movw	r30, r16
    2910:	80 83       	st	Z, r24
	UART_sendByte(HMI_ACK);
    2912:	81 e4       	ldi	r24, 0x41	; 65
    2914:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>
	i++;
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	8f 5f       	subi	r24, 0xFF	; 255
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	12 c0       	rjmp	.+36     	; 0x2944 <HMI_recievePassword+0x60>
	while (i < 5) {

		a_pass[i] = UART_receiveByte();
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	8a 81       	ldd	r24, Y+2	; 0x02
    2928:	9b 81       	ldd	r25, Y+3	; 0x03
    292a:	8c 01       	movw	r16, r24
    292c:	02 0f       	add	r16, r18
    292e:	13 1f       	adc	r17, r19
    2930:	0e 94 22 12 	call	0x2444	; 0x2444 <UART_receiveByte>
    2934:	f8 01       	movw	r30, r16
    2936:	80 83       	st	Z, r24
		UART_sendByte(HMI_ACK);
    2938:	81 e4       	ldi	r24, 0x41	; 65
    293a:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>
		i++;
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	8f 5f       	subi	r24, 0xFF	; 255
    2942:	89 83       	std	Y+1, r24	; 0x01
static void HMI_recievePassword(uint8 *a_pass) {
	uint8 i = 0;
	a_pass[i] = UART_receiveByte();
	UART_sendByte(HMI_ACK);
	i++;
	while (i < 5) {
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	85 30       	cpi	r24, 0x05	; 5
    2948:	58 f3       	brcs	.-42     	; 0x2920 <HMI_recievePassword+0x3c>

		a_pass[i] = UART_receiveByte();
		UART_sendByte(HMI_ACK);
		i++;
	}
	a_pass[5] = '\0';
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	9b 81       	ldd	r25, Y+3	; 0x03
    294e:	fc 01       	movw	r30, r24
    2950:	35 96       	adiw	r30, 0x05	; 5
    2952:	10 82       	st	Z, r1
}
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	cf 91       	pop	r28
    295c:	df 91       	pop	r29
    295e:	1f 91       	pop	r17
    2960:	0f 91       	pop	r16
    2962:	08 95       	ret

00002964 <HMI_init>:

uint8 HMI_init() {
    2964:	df 93       	push	r29
    2966:	cf 93       	push	r28
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	60 97       	sbiw	r28, 0x10	; 16
    296e:	0f b6       	in	r0, 0x3f	; 63
    2970:	f8 94       	cli
    2972:	de bf       	out	0x3e, r29	; 62
    2974:	0f be       	out	0x3f, r0	; 63
    2976:	cd bf       	out	0x3d, r28	; 61

	UART_ConfigType uartConfig = { .baudRate = 9600, .parity =
			UART_PARITY_DISABLED, .stopBit = UART_STOP_BIT_1, .charSize =
			UART_CHAR_SIZE_8, .asyncMode = LOGIC_LOW, .timeoutMs = 200

	};
    2978:	ce 01       	movw	r24, r28
    297a:	01 96       	adiw	r24, 0x01	; 1
    297c:	9d 87       	std	Y+13, r25	; 0x0d
    297e:	8c 87       	std	Y+12, r24	; 0x0c
    2980:	ed ea       	ldi	r30, 0xAD	; 173
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	ff 87       	std	Y+15, r31	; 0x0f
    2986:	ee 87       	std	Y+14, r30	; 0x0e
    2988:	fa e0       	ldi	r31, 0x0A	; 10
    298a:	f8 8b       	std	Y+16, r31	; 0x10
    298c:	ee 85       	ldd	r30, Y+14	; 0x0e
    298e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2990:	00 80       	ld	r0, Z
    2992:	8e 85       	ldd	r24, Y+14	; 0x0e
    2994:	9f 85       	ldd	r25, Y+15	; 0x0f
    2996:	01 96       	adiw	r24, 0x01	; 1
    2998:	9f 87       	std	Y+15, r25	; 0x0f
    299a:	8e 87       	std	Y+14, r24	; 0x0e
    299c:	ec 85       	ldd	r30, Y+12	; 0x0c
    299e:	fd 85       	ldd	r31, Y+13	; 0x0d
    29a0:	00 82       	st	Z, r0
    29a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    29a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    29a6:	01 96       	adiw	r24, 0x01	; 1
    29a8:	9d 87       	std	Y+13, r25	; 0x0d
    29aa:	8c 87       	std	Y+12, r24	; 0x0c
    29ac:	98 89       	ldd	r25, Y+16	; 0x10
    29ae:	91 50       	subi	r25, 0x01	; 1
    29b0:	98 8b       	std	Y+16, r25	; 0x10
    29b2:	e8 89       	ldd	r30, Y+16	; 0x10
    29b4:	ee 23       	and	r30, r30
    29b6:	51 f7       	brne	.-44     	; 0x298c <HMI_init+0x28>
	UART_init(&uartConfig);
    29b8:	ce 01       	movw	r24, r28
    29ba:	01 96       	adiw	r24, 0x01	; 1
    29bc:	0e 94 37 11 	call	0x226e	; 0x226e <UART_init>
	DcMotor_init();
    29c0:	0e 94 01 13 	call	0x2602	; 0x2602 <DcMotor_init>
	PIR_init();
    29c4:	0e 94 00 20 	call	0x4000	; 0x4000 <PIR_init>
	UART_sendByte(HMI_READY);
    29c8:	82 e5       	ldi	r24, 0x52	; 82
    29ca:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>
	 return (UART_receiveByte() == HMI_READY) ?
    29ce:	0e 94 22 12 	call	0x2444	; 0x2444 <UART_receiveByte>
    29d2:	82 35       	cpi	r24, 0x52	; 82
    29d4:	91 05       	cpc	r25, r1
    29d6:	19 f4       	brne	.+6      	; 0x29de <HMI_init+0x7a>
    29d8:	ff e4       	ldi	r31, 0x4F	; 79
    29da:	fb 87       	std	Y+11, r31	; 0x0b
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <HMI_init+0x7e>
    29de:	81 e5       	ldi	r24, 0x51	; 81
    29e0:	8b 87       	std	Y+11, r24	; 0x0b
    29e2:	8b 85       	ldd	r24, Y+11	; 0x0b
	 HMI_CONNECTION_SUCSSES :
	 HMI_CONNECTION_FAIL;
}
    29e4:	60 96       	adiw	r28, 0x10	; 16
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	cd bf       	out	0x3d, r28	; 61
    29f0:	cf 91       	pop	r28
    29f2:	df 91       	pop	r29
    29f4:	08 95       	ret

000029f6 <HMI_ready>:
uint8 HMI_ready() {
    29f6:	df 93       	push	r29
    29f8:	cf 93       	push	r28
    29fa:	0f 92       	push	r0
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
	//UART_sendByte(HMI_READY);
	LCD_displayString("wait com");
    2a00:	87 e7       	ldi	r24, 0x77	; 119
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <LCD_displayString>
	uint8 byte = UART_receiveByte();
    2a08:	0e 94 22 12 	call	0x2444	; 0x2444 <UART_receiveByte>
    2a0c:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
    2a0e:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <LCD_clearScreen>
	return byte;
    2a12:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a14:	0f 90       	pop	r0
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	08 95       	ret

00002a1c <HMI_checkPassMatch>:
uint8* HMI_checkPassMatch() {
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	60 97       	sbiw	r28, 0x10	; 16
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	f8 94       	cli
    2a2a:	de bf       	out	0x3e, r29	; 62
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	cd bf       	out	0x3d, r28	; 61
	uint8 l_pass1[6] = { 0 };
    2a30:	86 e0       	ldi	r24, 0x06	; 6
    2a32:	fe 01       	movw	r30, r28
    2a34:	33 96       	adiw	r30, 0x03	; 3
    2a36:	df 01       	movw	r26, r30
    2a38:	98 2f       	mov	r25, r24
    2a3a:	1d 92       	st	X+, r1
    2a3c:	9a 95       	dec	r25
    2a3e:	e9 f7       	brne	.-6      	; 0x2a3a <HMI_checkPassMatch+0x1e>
	uint8 l_pass2[6] = { 0 };
    2a40:	86 e0       	ldi	r24, 0x06	; 6
    2a42:	fe 01       	movw	r30, r28
    2a44:	39 96       	adiw	r30, 0x09	; 9
    2a46:	df 01       	movw	r26, r30
    2a48:	98 2f       	mov	r25, r24
    2a4a:	1d 92       	st	X+, r1
    2a4c:	9a 95       	dec	r25
    2a4e:	e9 f7       	brne	.-6      	; 0x2a4a <HMI_checkPassMatch+0x2e>

	UART_sendByte(HMI_ACK);
    2a50:	81 e4       	ldi	r24, 0x41	; 65
    2a52:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>

	/* Receive the first password */

	HMI_recievePassword(l_pass1);
    2a56:	ce 01       	movw	r24, r28
    2a58:	03 96       	adiw	r24, 0x03	; 3
    2a5a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <HMI_recievePassword>

	UART_sendByte(HMI_ACK);  // Acknowledge receipt of first password
    2a5e:	81 e4       	ldi	r24, 0x41	; 65
    2a60:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>

	/* Receive the second password */
	HMI_recievePassword(l_pass2);
    2a64:	ce 01       	movw	r24, r28
    2a66:	09 96       	adiw	r24, 0x09	; 9
    2a68:	0e 94 72 14 	call	0x28e4	; 0x28e4 <HMI_recievePassword>
	UART_sendByte(HMI_ACK);  // Acknowledge receipt of second password
    2a6c:	81 e4       	ldi	r24, 0x41	; 65
    2a6e:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>

	/* Check if passwords match */
	for (uint8 i = 0; i < 5; i++) {
    2a72:	1a 82       	std	Y+2, r1	; 0x02
    2a74:	24 c0       	rjmp	.+72     	; 0x2abe <HMI_checkPassMatch+0xa2>

		if (l_pass1[i] != l_pass2[i]) {
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	28 2f       	mov	r18, r24
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	03 96       	adiw	r24, 0x03	; 3
    2a80:	fc 01       	movw	r30, r24
    2a82:	e2 0f       	add	r30, r18
    2a84:	f3 1f       	adc	r31, r19
    2a86:	40 81       	ld	r20, Z
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	28 2f       	mov	r18, r24
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	ce 01       	movw	r24, r28
    2a90:	09 96       	adiw	r24, 0x09	; 9
    2a92:	fc 01       	movw	r30, r24
    2a94:	e2 0f       	add	r30, r18
    2a96:	f3 1f       	adc	r31, r19
    2a98:	80 81       	ld	r24, Z
    2a9a:	48 17       	cp	r20, r24
    2a9c:	69 f0       	breq	.+26     	; 0x2ab8 <HMI_checkPassMatch+0x9c>

			UART_sendByte(HMI_PASSNOTMATCH);
    2a9e:	8d e6       	ldi	r24, 0x6D	; 109
    2aa0:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>
			LCD_displayStringRowColumn(0, 0, "passMiss");
    2aa4:	20 e8       	ldi	r18, 0x80	; 128
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	a9 01       	movw	r20, r18
    2aae:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <LCD_displayStringRowColumn>
			return NULL_PTR;  // Exit early if passwords don't match
    2ab2:	18 8a       	std	Y+16, r1	; 0x10
    2ab4:	1f 86       	std	Y+15, r1	; 0x0f
    2ab6:	25 c0       	rjmp	.+74     	; 0x2b02 <HMI_checkPassMatch+0xe6>
	/* Receive the second password */
	HMI_recievePassword(l_pass2);
	UART_sendByte(HMI_ACK);  // Acknowledge receipt of second password

	/* Check if passwords match */
	for (uint8 i = 0; i < 5; i++) {
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	8f 5f       	subi	r24, 0xFF	; 255
    2abc:	8a 83       	std	Y+2, r24	; 0x02
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	85 30       	cpi	r24, 0x05	; 5
    2ac2:	c8 f2       	brcs	.-78     	; 0x2a76 <HMI_checkPassMatch+0x5a>
			return NULL_PTR;  // Exit early if passwords don't match
		}
	}

	/* If passwords match, confirm success */
	UART_sendByte(HMI_PASSMATCH);
    2ac4:	8d e4       	ldi	r24, 0x4D	; 77
    2ac6:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>
	for (uint8 i = 0; i < 5; i++) {
    2aca:	19 82       	std	Y+1, r1	; 0x01
    2acc:	13 c0       	rjmp	.+38     	; 0x2af4 <HMI_checkPassMatch+0xd8>
		g_pass[i] = l_pass1[i];
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	48 2f       	mov	r20, r24
    2ad2:	50 e0       	ldi	r21, 0x00	; 0
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
    2ad6:	28 2f       	mov	r18, r24
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	ce 01       	movw	r24, r28
    2adc:	03 96       	adiw	r24, 0x03	; 3
    2ade:	fc 01       	movw	r30, r24
    2ae0:	e2 0f       	add	r30, r18
    2ae2:	f3 1f       	adc	r31, r19
    2ae4:	80 81       	ld	r24, Z
    2ae6:	fa 01       	movw	r30, r20
    2ae8:	ea 53       	subi	r30, 0x3A	; 58
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	80 83       	st	Z, r24
		}
	}

	/* If passwords match, confirm success */
	UART_sendByte(HMI_PASSMATCH);
	for (uint8 i = 0; i < 5; i++) {
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	8f 5f       	subi	r24, 0xFF	; 255
    2af2:	89 83       	std	Y+1, r24	; 0x01
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	85 30       	cpi	r24, 0x05	; 5
    2af8:	50 f3       	brcs	.-44     	; 0x2ace <HMI_checkPassMatch+0xb2>
		g_pass[i] = l_pass1[i];
	}
	return g_pass;
    2afa:	a6 ec       	ldi	r26, 0xC6	; 198
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	b8 8b       	std	Y+16, r27	; 0x10
    2b00:	af 87       	std	Y+15, r26	; 0x0f
    2b02:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b04:	98 89       	ldd	r25, Y+16	; 0x10
}
    2b06:	60 96       	adiw	r28, 0x10	; 16
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	08 95       	ret

00002b18 <HMI_checkPass>:
void HMI_checkPass() {
    2b18:	1f 93       	push	r17
    2b1a:	df 93       	push	r29
    2b1c:	cf 93       	push	r28
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
    2b22:	27 97       	sbiw	r28, 0x07	; 7
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
	uint8 l_pass[6] = { 0 };
    2b2e:	86 e0       	ldi	r24, 0x06	; 6
    2b30:	fe 01       	movw	r30, r28
    2b32:	32 96       	adiw	r30, 0x02	; 2
    2b34:	df 01       	movw	r26, r30
    2b36:	98 2f       	mov	r25, r24
    2b38:	1d 92       	st	X+, r1
    2b3a:	9a 95       	dec	r25
    2b3c:	e9 f7       	brne	.-6      	; 0x2b38 <HMI_checkPass+0x20>

	UART_sendByte(HMI_ACK);
    2b3e:	81 e4       	ldi	r24, 0x41	; 65
    2b40:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>
	HMI_recievePassword(l_pass);
    2b44:	ce 01       	movw	r24, r28
    2b46:	02 96       	adiw	r24, 0x02	; 2
    2b48:	0e 94 72 14 	call	0x28e4	; 0x28e4 <HMI_recievePassword>

	UART_sendByte(HMI_ACK);  // Acknowledge receipt of  password
    2b4c:	81 e4       	ldi	r24, 0x41	; 65
    2b4e:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>
	for (uint8 i = 0; i < 5; i++) {
    2b52:	19 82       	std	Y+1, r1	; 0x01
    2b54:	1c c0       	rjmp	.+56     	; 0x2b8e <HMI_checkPass+0x76>

		if (l_pass[i] != MEM_getPassElem(i)) {
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	28 2f       	mov	r18, r24
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	02 96       	adiw	r24, 0x02	; 2
    2b60:	fc 01       	movw	r30, r24
    2b62:	e2 0f       	add	r30, r18
    2b64:	f3 1f       	adc	r31, r19
    2b66:	10 81       	ld	r17, Z
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	0e 94 d7 15 	call	0x2bae	; 0x2bae <MEM_getPassElem>
    2b6e:	18 17       	cp	r17, r24
    2b70:	59 f0       	breq	.+22     	; 0x2b88 <HMI_checkPass+0x70>

			UART_sendByte(HMI_PASSNOTMATCH);
    2b72:	8d e6       	ldi	r24, 0x6D	; 109
    2b74:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>
			LCD_displayStringRowColumn(0, 0, "passMiss");
    2b78:	20 e8       	ldi	r18, 0x80	; 128
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	60 e0       	ldi	r22, 0x00	; 0
    2b80:	a9 01       	movw	r20, r18
    2b82:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <LCD_displayStringRowColumn>
    2b86:	09 c0       	rjmp	.+18     	; 0x2b9a <HMI_checkPass+0x82>

	UART_sendByte(HMI_ACK);
	HMI_recievePassword(l_pass);

	UART_sendByte(HMI_ACK);  // Acknowledge receipt of  password
	for (uint8 i = 0; i < 5; i++) {
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	8f 5f       	subi	r24, 0xFF	; 255
    2b8c:	89 83       	std	Y+1, r24	; 0x01
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	85 30       	cpi	r24, 0x05	; 5
    2b92:	08 f3       	brcs	.-62     	; 0x2b56 <HMI_checkPass+0x3e>
			UART_sendByte(HMI_PASSNOTMATCH);
			LCD_displayStringRowColumn(0, 0, "passMiss");
			return;  // Exit early if passwords don't match
		}
	}
	UART_sendByte(HMI_PASSMATCH);
    2b94:	8d e4       	ldi	r24, 0x4D	; 77
    2b96:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>
}
    2b9a:	27 96       	adiw	r28, 0x07	; 7
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	de bf       	out	0x3e, r29	; 62
    2ba2:	0f be       	out	0x3f, r0	; 63
    2ba4:	cd bf       	out	0x3d, r28	; 61
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	1f 91       	pop	r17
    2bac:	08 95       	ret

00002bae <MEM_getPassElem>:

uint8 MEM_getPassElem(uint8 a_passIndex) {
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	00 d0       	rcall	.+0      	; 0x2bb4 <MEM_getPassElem+0x6>
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62
    2bb8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 byte;

	EEPROM_readByte(0xf + a_passIndex, &byte);
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	88 2f       	mov	r24, r24
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	0f 96       	adiw	r24, 0x0f	; 15
    2bc2:	9e 01       	movw	r18, r28
    2bc4:	2f 5f       	subi	r18, 0xFF	; 255
    2bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc8:	b9 01       	movw	r22, r18
    2bca:	0e 94 12 14 	call	0x2824	; 0x2824 <EEPROM_readByte>
	return byte;
    2bce:	89 81       	ldd	r24, Y+1	; 0x01

}
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	08 95       	ret

00002bda <MEM_savePass>:
void MEM_savePass(uint8 *a_pass) {
    2bda:	df 93       	push	r29
    2bdc:	cf 93       	push	r28
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
    2be2:	61 97       	sbiw	r28, 0x11	; 17
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	cd bf       	out	0x3d, r28	; 61
    2bee:	99 8b       	std	Y+17, r25	; 0x11
    2bf0:	88 8b       	std	Y+16, r24	; 0x10

	for (uint8 i = 0; i < 5; i++) {
    2bf2:	1f 86       	std	Y+15, r1	; 0x0f
    2bf4:	87 c0       	rjmp	.+270    	; 0x2d04 <MEM_savePass+0x12a>
		EEPROM_writeByte(0xf + i, a_pass[i]);
    2bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf8:	88 2f       	mov	r24, r24
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	0f 96       	adiw	r24, 0x0f	; 15
    2bfe:	ac 01       	movw	r20, r24
    2c00:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c02:	28 2f       	mov	r18, r24
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	88 89       	ldd	r24, Y+16	; 0x10
    2c08:	99 89       	ldd	r25, Y+17	; 0x11
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	e2 0f       	add	r30, r18
    2c0e:	f3 1f       	adc	r31, r19
    2c10:	20 81       	ld	r18, Z
    2c12:	ca 01       	movw	r24, r20
    2c14:	62 2f       	mov	r22, r18
    2c16:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <EEPROM_writeByte>
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	a0 e2       	ldi	r26, 0x20	; 32
    2c20:	b1 e4       	ldi	r27, 0x41	; 65
    2c22:	8b 87       	std	Y+11, r24	; 0x0b
    2c24:	9c 87       	std	Y+12, r25	; 0x0c
    2c26:	ad 87       	std	Y+13, r26	; 0x0d
    2c28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	4a ef       	ldi	r20, 0xFA	; 250
    2c38:	54 e4       	ldi	r21, 0x44	; 68
    2c3a:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	8f 83       	std	Y+7, r24	; 0x07
    2c44:	98 87       	std	Y+8, r25	; 0x08
    2c46:	a9 87       	std	Y+9, r26	; 0x09
    2c48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4c:	78 85       	ldd	r23, Y+8	; 0x08
    2c4e:	89 85       	ldd	r24, Y+9	; 0x09
    2c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e8       	ldi	r20, 0x80	; 128
    2c58:	5f e3       	ldi	r21, 0x3F	; 63
    2c5a:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    2c5e:	88 23       	and	r24, r24
    2c60:	2c f4       	brge	.+10     	; 0x2c6c <MEM_savePass+0x92>
		__ticks = 1;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	9e 83       	std	Y+6, r25	; 0x06
    2c68:	8d 83       	std	Y+5, r24	; 0x05
    2c6a:	3f c0       	rjmp	.+126    	; 0x2cea <MEM_savePass+0x110>
	else if (__tmp > 65535)
    2c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6e:	78 85       	ldd	r23, Y+8	; 0x08
    2c70:	89 85       	ldd	r24, Y+9	; 0x09
    2c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	3f ef       	ldi	r19, 0xFF	; 255
    2c78:	4f e7       	ldi	r20, 0x7F	; 127
    2c7a:	57 e4       	ldi	r21, 0x47	; 71
    2c7c:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2c80:	18 16       	cp	r1, r24
    2c82:	4c f5       	brge	.+82     	; 0x2cd6 <MEM_savePass+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e2       	ldi	r20, 0x20	; 32
    2c92:	51 e4       	ldi	r21, 0x41	; 65
    2c94:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	9e 83       	std	Y+6, r25	; 0x06
    2caa:	8d 83       	std	Y+5, r24	; 0x05
    2cac:	0f c0       	rjmp	.+30     	; 0x2ccc <MEM_savePass+0xf2>
    2cae:	88 ec       	ldi	r24, 0xC8	; 200
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	9c 83       	std	Y+4, r25	; 0x04
    2cb4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <MEM_savePass+0xe0>
    2cbe:	9c 83       	std	Y+4, r25	; 0x04
    2cc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	9e 83       	std	Y+6, r25	; 0x06
    2cca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cce:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	69 f7       	brne	.-38     	; 0x2cae <MEM_savePass+0xd4>
    2cd4:	14 c0       	rjmp	.+40     	; 0x2cfe <MEM_savePass+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd8:	78 85       	ldd	r23, Y+8	; 0x08
    2cda:	89 85       	ldd	r24, Y+9	; 0x09
    2cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cde:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	9e 83       	std	Y+6, r25	; 0x06
    2ce8:	8d 83       	std	Y+5, r24	; 0x05
    2cea:	8d 81       	ldd	r24, Y+5	; 0x05
    2cec:	9e 81       	ldd	r25, Y+6	; 0x06
    2cee:	9a 83       	std	Y+2, r25	; 0x02
    2cf0:	89 83       	std	Y+1, r24	; 0x01
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <MEM_savePass+0x11c>
    2cfa:	9a 83       	std	Y+2, r25	; 0x02
    2cfc:	89 83       	std	Y+1, r24	; 0x01
	return byte;

}
void MEM_savePass(uint8 *a_pass) {

	for (uint8 i = 0; i < 5; i++) {
    2cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d00:	8f 5f       	subi	r24, 0xFF	; 255
    2d02:	8f 87       	std	Y+15, r24	; 0x0f
    2d04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d06:	85 30       	cpi	r24, 0x05	; 5
    2d08:	08 f4       	brcc	.+2      	; 0x2d0c <MEM_savePass+0x132>
    2d0a:	75 cf       	rjmp	.-278    	; 0x2bf6 <MEM_savePass+0x1c>
		EEPROM_writeByte(0xf + i, a_pass[i]);
		_delay_ms(10);
	}
}
    2d0c:	61 96       	adiw	r28, 0x11	; 17
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <OpenDoor>:

void OpenDoor() {
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
	DcMotor_OnForTime(ACW, 100, 15);
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	64 e6       	ldi	r22, 0x64	; 100
    2d2a:	4f e0       	ldi	r20, 0x0F	; 15
    2d2c:	50 e0       	ldi	r21, 0x00	; 0
    2d2e:	0e 94 a0 13 	call	0x2740	; 0x2740 <DcMotor_OnForTime>
	UART_sendByte(HMI_OPEN_DOOR);
    2d32:	84 e4       	ldi	r24, 0x44	; 68
    2d34:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>

}
    2d38:	cf 91       	pop	r28
    2d3a:	df 91       	pop	r29
    2d3c:	08 95       	ret

00002d3e <CloseDoor>:

void CloseDoor() {
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
	DcMotor_OnForTime(CW, 100, 15);
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	64 e6       	ldi	r22, 0x64	; 100
    2d4a:	4f e0       	ldi	r20, 0x0F	; 15
    2d4c:	50 e0       	ldi	r21, 0x00	; 0
    2d4e:	0e 94 a0 13 	call	0x2740	; 0x2740 <DcMotor_OnForTime>
	UART_sendByte(HMI_CLOSE_DOOR);
    2d52:	84 e6       	ldi	r24, 0x64	; 100
    2d54:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>

}
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	08 95       	ret

00002d5e <waitForPeople>:

void waitForPeople(){
    2d5e:	df 93       	push	r29
    2d60:	cf 93       	push	r28
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	2e 97       	sbiw	r28, 0x0e	; 14
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	f8 94       	cli
    2d6c:	de bf       	out	0x3e, r29	; 62
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	cd bf       	out	0x3d, r28	; 61
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	aa ef       	ldi	r26, 0xFA	; 250
    2d78:	b3 e4       	ldi	r27, 0x43	; 67
    2d7a:	8b 87       	std	Y+11, r24	; 0x0b
    2d7c:	9c 87       	std	Y+12, r25	; 0x0c
    2d7e:	ad 87       	std	Y+13, r26	; 0x0d
    2d80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	4a ef       	ldi	r20, 0xFA	; 250
    2d90:	54 e4       	ldi	r21, 0x44	; 68
    2d92:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	8f 83       	std	Y+7, r24	; 0x07
    2d9c:	98 87       	std	Y+8, r25	; 0x08
    2d9e:	a9 87       	std	Y+9, r26	; 0x09
    2da0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2da2:	6f 81       	ldd	r22, Y+7	; 0x07
    2da4:	78 85       	ldd	r23, Y+8	; 0x08
    2da6:	89 85       	ldd	r24, Y+9	; 0x09
    2da8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	40 e8       	ldi	r20, 0x80	; 128
    2db0:	5f e3       	ldi	r21, 0x3F	; 63
    2db2:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    2db6:	88 23       	and	r24, r24
    2db8:	2c f4       	brge	.+10     	; 0x2dc4 <waitForPeople+0x66>
		__ticks = 1;
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	9e 83       	std	Y+6, r25	; 0x06
    2dc0:	8d 83       	std	Y+5, r24	; 0x05
    2dc2:	3f c0       	rjmp	.+126    	; 0x2e42 <waitForPeople+0xe4>
	else if (__tmp > 65535)
    2dc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc6:	78 85       	ldd	r23, Y+8	; 0x08
    2dc8:	89 85       	ldd	r24, Y+9	; 0x09
    2dca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	3f ef       	ldi	r19, 0xFF	; 255
    2dd0:	4f e7       	ldi	r20, 0x7F	; 127
    2dd2:	57 e4       	ldi	r21, 0x47	; 71
    2dd4:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2dd8:	18 16       	cp	r1, r24
    2dda:	4c f5       	brge	.+82     	; 0x2e2e <waitForPeople+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ddc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dde:	7c 85       	ldd	r23, Y+12	; 0x0c
    2de0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2de2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	40 e2       	ldi	r20, 0x20	; 32
    2dea:	51 e4       	ldi	r21, 0x41	; 65
    2dec:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	bc 01       	movw	r22, r24
    2df6:	cd 01       	movw	r24, r26
    2df8:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	9e 83       	std	Y+6, r25	; 0x06
    2e02:	8d 83       	std	Y+5, r24	; 0x05
    2e04:	0f c0       	rjmp	.+30     	; 0x2e24 <waitForPeople+0xc6>
    2e06:	88 ec       	ldi	r24, 0xC8	; 200
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	9c 83       	std	Y+4, r25	; 0x04
    2e0c:	8b 83       	std	Y+3, r24	; 0x03
    2e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e10:	9c 81       	ldd	r25, Y+4	; 0x04
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	f1 f7       	brne	.-4      	; 0x2e12 <waitForPeople+0xb4>
    2e16:	9c 83       	std	Y+4, r25	; 0x04
    2e18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	01 97       	sbiw	r24, 0x01	; 1
    2e20:	9e 83       	std	Y+6, r25	; 0x06
    2e22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e24:	8d 81       	ldd	r24, Y+5	; 0x05
    2e26:	9e 81       	ldd	r25, Y+6	; 0x06
    2e28:	00 97       	sbiw	r24, 0x00	; 0
    2e2a:	69 f7       	brne	.-38     	; 0x2e06 <waitForPeople+0xa8>
    2e2c:	14 c0       	rjmp	.+40     	; 0x2e56 <waitForPeople+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e30:	78 85       	ldd	r23, Y+8	; 0x08
    2e32:	89 85       	ldd	r24, Y+9	; 0x09
    2e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e36:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	9e 83       	std	Y+6, r25	; 0x06
    2e40:	8d 83       	std	Y+5, r24	; 0x05
    2e42:	8d 81       	ldd	r24, Y+5	; 0x05
    2e44:	9e 81       	ldd	r25, Y+6	; 0x06
    2e46:	9a 83       	std	Y+2, r25	; 0x02
    2e48:	89 83       	std	Y+1, r24	; 0x01
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4e:	01 97       	sbiw	r24, 0x01	; 1
    2e50:	f1 f7       	brne	.-4      	; 0x2e4e <waitForPeople+0xf0>
    2e52:	9a 83       	std	Y+2, r25	; 0x02
    2e54:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(500);
while(PIR_read());
    2e56:	0e 94 0b 20 	call	0x4016	; 0x4016 <PIR_read>
    2e5a:	88 23       	and	r24, r24
    2e5c:	e1 f7       	brne	.-8      	; 0x2e56 <waitForPeople+0xf8>
UART_sendByte(HMI_PIR);
    2e5e:	89 e4       	ldi	r24, 0x49	; 73
    2e60:	0e 94 0e 12 	call	0x241c	; 0x241c <UART_sendByte>
}
    2e64:	2e 96       	adiw	r28, 0x0e	; 14
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	de bf       	out	0x3e, r29	; 62
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	cd bf       	out	0x3d, r28	; 61
    2e70:	cf 91       	pop	r28
    2e72:	df 91       	pop	r29
    2e74:	08 95       	ret

00002e76 <LCD_sendCommand>:
 * This function sends a command to the LCD to perform specific operations
 * such as clearing the screen, setting display modes, or moving the cursor.
 *
 * @param a_lcdCommand The command to be sent to the LCD (e.g., LCD_CLEAR_SCREEN_COMMAND).
 */
void LCD_sendCommand(uint8 a_lcdCommand) {
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
    2e82:	c1 56       	subi	r28, 0x61	; 97
    2e84:	d0 40       	sbci	r29, 0x00	; 0
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
    2e90:	fe 01       	movw	r30, r28
    2e92:	ef 59       	subi	r30, 0x9F	; 159
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 83       	st	Z, r24
	GPIO_ARR_setPinState(LCD_RS, LOW); /* Set RS to 0 for command mode */
    2e98:	88 e0       	ldi	r24, 0x08	; 8
    2e9a:	60 e0       	ldi	r22, 0x00	; 0
    2e9c:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_ARR_setPinState>
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e3 5a       	subi	r30, 0xA3	; 163
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	a0 e8       	ldi	r26, 0x80	; 128
    2eac:	bf e3       	ldi	r27, 0x3F	; 63
    2eae:	80 83       	st	Z, r24
    2eb0:	91 83       	std	Z+1, r25	; 0x01
    2eb2:	a2 83       	std	Z+2, r26	; 0x02
    2eb4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2eb6:	8e 01       	movw	r16, r28
    2eb8:	07 5a       	subi	r16, 0xA7	; 167
    2eba:	1f 4f       	sbci	r17, 0xFF	; 255
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e3 5a       	subi	r30, 0xA3	; 163
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	60 81       	ld	r22, Z
    2ec4:	71 81       	ldd	r23, Z+1	; 0x01
    2ec6:	82 81       	ldd	r24, Z+2	; 0x02
    2ec8:	93 81       	ldd	r25, Z+3	; 0x03
    2eca:	2b ea       	ldi	r18, 0xAB	; 171
    2ecc:	3a ea       	ldi	r19, 0xAA	; 170
    2ece:	4a e2       	ldi	r20, 0x2A	; 42
    2ed0:	50 e4       	ldi	r21, 0x40	; 64
    2ed2:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	f8 01       	movw	r30, r16
    2edc:	80 83       	st	Z, r24
    2ede:	91 83       	std	Z+1, r25	; 0x01
    2ee0:	a2 83       	std	Z+2, r26	; 0x02
    2ee2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	e7 5a       	subi	r30, 0xA7	; 167
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	60 81       	ld	r22, Z
    2eec:	71 81       	ldd	r23, Z+1	; 0x01
    2eee:	82 81       	ldd	r24, Z+2	; 0x02
    2ef0:	93 81       	ldd	r25, Z+3	; 0x03
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	40 e8       	ldi	r20, 0x80	; 128
    2ef8:	5f e3       	ldi	r21, 0x3F	; 63
    2efa:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    2efe:	88 23       	and	r24, r24
    2f00:	34 f4       	brge	.+12     	; 0x2f0e <LCD_sendCommand+0x98>
		__ticks = 1;
    2f02:	fe 01       	movw	r30, r28
    2f04:	e8 5a       	subi	r30, 0xA8	; 168
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	80 83       	st	Z, r24
    2f0c:	e0 c0       	rjmp	.+448    	; 0x30ce <LCD_sendCommand+0x258>
	else if (__tmp > 255)
    2f0e:	fe 01       	movw	r30, r28
    2f10:	e7 5a       	subi	r30, 0xA7	; 167
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	60 81       	ld	r22, Z
    2f16:	71 81       	ldd	r23, Z+1	; 0x01
    2f18:	82 81       	ldd	r24, Z+2	; 0x02
    2f1a:	93 81       	ldd	r25, Z+3	; 0x03
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	4f e7       	ldi	r20, 0x7F	; 127
    2f22:	53 e4       	ldi	r21, 0x43	; 67
    2f24:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2f28:	18 16       	cp	r1, r24
    2f2a:	0c f0       	brlt	.+2      	; 0x2f2e <LCD_sendCommand+0xb8>
    2f2c:	c0 c0       	rjmp	.+384    	; 0x30ae <LCD_sendCommand+0x238>
	{
		_delay_ms(__us / 1000.0);
    2f2e:	fe 01       	movw	r30, r28
    2f30:	e3 5a       	subi	r30, 0xA3	; 163
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	60 81       	ld	r22, Z
    2f36:	71 81       	ldd	r23, Z+1	; 0x01
    2f38:	82 81       	ldd	r24, Z+2	; 0x02
    2f3a:	93 81       	ldd	r25, Z+3	; 0x03
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	4a e7       	ldi	r20, 0x7A	; 122
    2f42:	54 e4       	ldi	r21, 0x44	; 68
    2f44:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	ec 5a       	subi	r30, 0xAC	; 172
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	80 83       	st	Z, r24
    2f54:	91 83       	std	Z+1, r25	; 0x01
    2f56:	a2 83       	std	Z+2, r26	; 0x02
    2f58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5a:	8e 01       	movw	r16, r28
    2f5c:	00 5b       	subi	r16, 0xB0	; 176
    2f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f60:	fe 01       	movw	r30, r28
    2f62:	ec 5a       	subi	r30, 0xAC	; 172
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	60 81       	ld	r22, Z
    2f68:	71 81       	ldd	r23, Z+1	; 0x01
    2f6a:	82 81       	ldd	r24, Z+2	; 0x02
    2f6c:	93 81       	ldd	r25, Z+3	; 0x03
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	4a ef       	ldi	r20, 0xFA	; 250
    2f74:	54 e4       	ldi	r21, 0x44	; 68
    2f76:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	f8 01       	movw	r30, r16
    2f80:	80 83       	st	Z, r24
    2f82:	91 83       	std	Z+1, r25	; 0x01
    2f84:	a2 83       	std	Z+2, r26	; 0x02
    2f86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f88:	fe 01       	movw	r30, r28
    2f8a:	e0 5b       	subi	r30, 0xB0	; 176
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	60 81       	ld	r22, Z
    2f90:	71 81       	ldd	r23, Z+1	; 0x01
    2f92:	82 81       	ldd	r24, Z+2	; 0x02
    2f94:	93 81       	ldd	r25, Z+3	; 0x03
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e8       	ldi	r20, 0x80	; 128
    2f9c:	5f e3       	ldi	r21, 0x3F	; 63
    2f9e:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    2fa2:	88 23       	and	r24, r24
    2fa4:	44 f4       	brge	.+16     	; 0x2fb6 <LCD_sendCommand+0x140>
		__ticks = 1;
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e2 5b       	subi	r30, 0xB2	; 178
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	91 83       	std	Z+1, r25	; 0x01
    2fb2:	80 83       	st	Z, r24
    2fb4:	64 c0       	rjmp	.+200    	; 0x307e <LCD_sendCommand+0x208>
	else if (__tmp > 65535)
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	e0 5b       	subi	r30, 0xB0	; 176
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	60 81       	ld	r22, Z
    2fbe:	71 81       	ldd	r23, Z+1	; 0x01
    2fc0:	82 81       	ldd	r24, Z+2	; 0x02
    2fc2:	93 81       	ldd	r25, Z+3	; 0x03
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	3f ef       	ldi	r19, 0xFF	; 255
    2fc8:	4f e7       	ldi	r20, 0x7F	; 127
    2fca:	57 e4       	ldi	r21, 0x47	; 71
    2fcc:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    2fd0:	18 16       	cp	r1, r24
    2fd2:	0c f0       	brlt	.+2      	; 0x2fd6 <LCD_sendCommand+0x160>
    2fd4:	43 c0       	rjmp	.+134    	; 0x305c <LCD_sendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	ec 5a       	subi	r30, 0xAC	; 172
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	60 81       	ld	r22, Z
    2fde:	71 81       	ldd	r23, Z+1	; 0x01
    2fe0:	82 81       	ldd	r24, Z+2	; 0x02
    2fe2:	93 81       	ldd	r25, Z+3	; 0x03
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	40 e2       	ldi	r20, 0x20	; 32
    2fea:	51 e4       	ldi	r21, 0x41	; 65
    2fec:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	8e 01       	movw	r16, r28
    2ff6:	02 5b       	subi	r16, 0xB2	; 178
    2ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    2ffa:	bc 01       	movw	r22, r24
    2ffc:	cd 01       	movw	r24, r26
    2ffe:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	f8 01       	movw	r30, r16
    3008:	91 83       	std	Z+1, r25	; 0x01
    300a:	80 83       	st	Z, r24
    300c:	1f c0       	rjmp	.+62     	; 0x304c <LCD_sendCommand+0x1d6>
    300e:	fe 01       	movw	r30, r28
    3010:	e4 5b       	subi	r30, 0xB4	; 180
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	88 ec       	ldi	r24, 0xC8	; 200
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	91 83       	std	Z+1, r25	; 0x01
    301a:	80 83       	st	Z, r24
    301c:	fe 01       	movw	r30, r28
    301e:	e4 5b       	subi	r30, 0xB4	; 180
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	80 81       	ld	r24, Z
    3024:	91 81       	ldd	r25, Z+1	; 0x01
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	f1 f7       	brne	.-4      	; 0x3026 <LCD_sendCommand+0x1b0>
    302a:	fe 01       	movw	r30, r28
    302c:	e4 5b       	subi	r30, 0xB4	; 180
    302e:	ff 4f       	sbci	r31, 0xFF	; 255
    3030:	91 83       	std	Z+1, r25	; 0x01
    3032:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3034:	de 01       	movw	r26, r28
    3036:	a2 5b       	subi	r26, 0xB2	; 178
    3038:	bf 4f       	sbci	r27, 0xFF	; 255
    303a:	fe 01       	movw	r30, r28
    303c:	e2 5b       	subi	r30, 0xB2	; 178
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	80 81       	ld	r24, Z
    3042:	91 81       	ldd	r25, Z+1	; 0x01
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	11 96       	adiw	r26, 0x01	; 1
    3048:	9c 93       	st	X, r25
    304a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304c:	fe 01       	movw	r30, r28
    304e:	e2 5b       	subi	r30, 0xB2	; 178
    3050:	ff 4f       	sbci	r31, 0xFF	; 255
    3052:	80 81       	ld	r24, Z
    3054:	91 81       	ldd	r25, Z+1	; 0x01
    3056:	00 97       	sbiw	r24, 0x00	; 0
    3058:	d1 f6       	brne	.-76     	; 0x300e <LCD_sendCommand+0x198>
    305a:	4b c0       	rjmp	.+150    	; 0x30f2 <LCD_sendCommand+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305c:	8e 01       	movw	r16, r28
    305e:	02 5b       	subi	r16, 0xB2	; 178
    3060:	1f 4f       	sbci	r17, 0xFF	; 255
    3062:	fe 01       	movw	r30, r28
    3064:	e0 5b       	subi	r30, 0xB0	; 176
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	60 81       	ld	r22, Z
    306a:	71 81       	ldd	r23, Z+1	; 0x01
    306c:	82 81       	ldd	r24, Z+2	; 0x02
    306e:	93 81       	ldd	r25, Z+3	; 0x03
    3070:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	f8 01       	movw	r30, r16
    307a:	91 83       	std	Z+1, r25	; 0x01
    307c:	80 83       	st	Z, r24
    307e:	de 01       	movw	r26, r28
    3080:	a6 5b       	subi	r26, 0xB6	; 182
    3082:	bf 4f       	sbci	r27, 0xFF	; 255
    3084:	fe 01       	movw	r30, r28
    3086:	e2 5b       	subi	r30, 0xB2	; 178
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	80 81       	ld	r24, Z
    308c:	91 81       	ldd	r25, Z+1	; 0x01
    308e:	11 96       	adiw	r26, 0x01	; 1
    3090:	9c 93       	st	X, r25
    3092:	8e 93       	st	-X, r24
    3094:	fe 01       	movw	r30, r28
    3096:	e6 5b       	subi	r30, 0xB6	; 182
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	80 81       	ld	r24, Z
    309c:	91 81       	ldd	r25, Z+1	; 0x01
    309e:	01 97       	sbiw	r24, 0x01	; 1
    30a0:	f1 f7       	brne	.-4      	; 0x309e <LCD_sendCommand+0x228>
    30a2:	fe 01       	movw	r30, r28
    30a4:	e6 5b       	subi	r30, 0xB6	; 182
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	91 83       	std	Z+1, r25	; 0x01
    30aa:	80 83       	st	Z, r24
    30ac:	22 c0       	rjmp	.+68     	; 0x30f2 <LCD_sendCommand+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    30ae:	8e 01       	movw	r16, r28
    30b0:	08 5a       	subi	r16, 0xA8	; 168
    30b2:	1f 4f       	sbci	r17, 0xFF	; 255
    30b4:	fe 01       	movw	r30, r28
    30b6:	e7 5a       	subi	r30, 0xA7	; 167
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	60 81       	ld	r22, Z
    30bc:	71 81       	ldd	r23, Z+1	; 0x01
    30be:	82 81       	ldd	r24, Z+2	; 0x02
    30c0:	93 81       	ldd	r25, Z+3	; 0x03
    30c2:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	f8 01       	movw	r30, r16
    30cc:	80 83       	st	Z, r24
    30ce:	de 01       	movw	r26, r28
    30d0:	a7 5b       	subi	r26, 0xB7	; 183
    30d2:	bf 4f       	sbci	r27, 0xFF	; 255
    30d4:	fe 01       	movw	r30, r28
    30d6:	e8 5a       	subi	r30, 0xA8	; 168
    30d8:	ff 4f       	sbci	r31, 0xFF	; 255
    30da:	80 81       	ld	r24, Z
    30dc:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    30de:	fe 01       	movw	r30, r28
    30e0:	e7 5b       	subi	r30, 0xB7	; 183
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	80 81       	ld	r24, Z
    30e6:	8a 95       	dec	r24
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <LCD_sendCommand+0x270>
    30ea:	fe 01       	movw	r30, r28
    30ec:	e7 5b       	subi	r30, 0xB7	; 183
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	80 83       	st	Z, r24
	_delay_us(LCD_TA_DELAY_US); /* Delay for timing */
	GPIO_ARR_setPinState(LCD_E, HIGH); /* Enable the LCD */
    30f2:	89 e0       	ldi	r24, 0x09	; 9
    30f4:	61 e0       	ldi	r22, 0x01	; 1
    30f6:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_ARR_setPinState>
    30fa:	fe 01       	movw	r30, r28
    30fc:	eb 5b       	subi	r30, 0xBB	; 187
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	a0 e8       	ldi	r26, 0x80	; 128
    3106:	bf e3       	ldi	r27, 0x3F	; 63
    3108:	80 83       	st	Z, r24
    310a:	91 83       	std	Z+1, r25	; 0x01
    310c:	a2 83       	std	Z+2, r26	; 0x02
    310e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3110:	8e 01       	movw	r16, r28
    3112:	0f 5b       	subi	r16, 0xBF	; 191
    3114:	1f 4f       	sbci	r17, 0xFF	; 255
    3116:	fe 01       	movw	r30, r28
    3118:	eb 5b       	subi	r30, 0xBB	; 187
    311a:	ff 4f       	sbci	r31, 0xFF	; 255
    311c:	60 81       	ld	r22, Z
    311e:	71 81       	ldd	r23, Z+1	; 0x01
    3120:	82 81       	ldd	r24, Z+2	; 0x02
    3122:	93 81       	ldd	r25, Z+3	; 0x03
    3124:	2b ea       	ldi	r18, 0xAB	; 171
    3126:	3a ea       	ldi	r19, 0xAA	; 170
    3128:	4a e2       	ldi	r20, 0x2A	; 42
    312a:	50 e4       	ldi	r21, 0x40	; 64
    312c:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	f8 01       	movw	r30, r16
    3136:	80 83       	st	Z, r24
    3138:	91 83       	std	Z+1, r25	; 0x01
    313a:	a2 83       	std	Z+2, r26	; 0x02
    313c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    313e:	fe 01       	movw	r30, r28
    3140:	ef 5b       	subi	r30, 0xBF	; 191
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	60 81       	ld	r22, Z
    3146:	71 81       	ldd	r23, Z+1	; 0x01
    3148:	82 81       	ldd	r24, Z+2	; 0x02
    314a:	93 81       	ldd	r25, Z+3	; 0x03
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	40 e8       	ldi	r20, 0x80	; 128
    3152:	5f e3       	ldi	r21, 0x3F	; 63
    3154:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    3158:	88 23       	and	r24, r24
    315a:	34 f4       	brge	.+12     	; 0x3168 <LCD_sendCommand+0x2f2>
		__ticks = 1;
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	fe 01       	movw	r30, r28
    3160:	e0 5c       	subi	r30, 0xC0	; 192
    3162:	ff 4f       	sbci	r31, 0xFF	; 255
    3164:	80 83       	st	Z, r24
    3166:	9d c0       	rjmp	.+314    	; 0x32a2 <LCD_sendCommand+0x42c>
	else if (__tmp > 255)
    3168:	fe 01       	movw	r30, r28
    316a:	ef 5b       	subi	r30, 0xBF	; 191
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	60 81       	ld	r22, Z
    3170:	71 81       	ldd	r23, Z+1	; 0x01
    3172:	82 81       	ldd	r24, Z+2	; 0x02
    3174:	93 81       	ldd	r25, Z+3	; 0x03
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	4f e7       	ldi	r20, 0x7F	; 127
    317c:	53 e4       	ldi	r21, 0x43	; 67
    317e:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    3182:	18 16       	cp	r1, r24
    3184:	0c f0       	brlt	.+2      	; 0x3188 <LCD_sendCommand+0x312>
    3186:	7e c0       	rjmp	.+252    	; 0x3284 <LCD_sendCommand+0x40e>
	{
		_delay_ms(__us / 1000.0);
    3188:	fe 01       	movw	r30, r28
    318a:	eb 5b       	subi	r30, 0xBB	; 187
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	60 81       	ld	r22, Z
    3190:	71 81       	ldd	r23, Z+1	; 0x01
    3192:	82 81       	ldd	r24, Z+2	; 0x02
    3194:	93 81       	ldd	r25, Z+3	; 0x03
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	4a e7       	ldi	r20, 0x7A	; 122
    319c:	54 e4       	ldi	r21, 0x44	; 68
    319e:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	8c af       	std	Y+60, r24	; 0x3c
    31a8:	9d af       	std	Y+61, r25	; 0x3d
    31aa:	ae af       	std	Y+62, r26	; 0x3e
    31ac:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    31b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    31b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    31b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	4a ef       	ldi	r20, 0xFA	; 250
    31bc:	54 e4       	ldi	r21, 0x44	; 68
    31be:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	88 af       	std	Y+56, r24	; 0x38
    31c8:	99 af       	std	Y+57, r25	; 0x39
    31ca:	aa af       	std	Y+58, r26	; 0x3a
    31cc:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    31ce:	68 ad       	ldd	r22, Y+56	; 0x38
    31d0:	79 ad       	ldd	r23, Y+57	; 0x39
    31d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    31d4:	9b ad       	ldd	r25, Y+59	; 0x3b
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	40 e8       	ldi	r20, 0x80	; 128
    31dc:	5f e3       	ldi	r21, 0x3F	; 63
    31de:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    31e2:	88 23       	and	r24, r24
    31e4:	2c f4       	brge	.+10     	; 0x31f0 <LCD_sendCommand+0x37a>
		__ticks = 1;
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	9f ab       	std	Y+55, r25	; 0x37
    31ec:	8e ab       	std	Y+54, r24	; 0x36
    31ee:	3f c0       	rjmp	.+126    	; 0x326e <LCD_sendCommand+0x3f8>
	else if (__tmp > 65535)
    31f0:	68 ad       	ldd	r22, Y+56	; 0x38
    31f2:	79 ad       	ldd	r23, Y+57	; 0x39
    31f4:	8a ad       	ldd	r24, Y+58	; 0x3a
    31f6:	9b ad       	ldd	r25, Y+59	; 0x3b
    31f8:	20 e0       	ldi	r18, 0x00	; 0
    31fa:	3f ef       	ldi	r19, 0xFF	; 255
    31fc:	4f e7       	ldi	r20, 0x7F	; 127
    31fe:	57 e4       	ldi	r21, 0x47	; 71
    3200:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    3204:	18 16       	cp	r1, r24
    3206:	4c f5       	brge	.+82     	; 0x325a <LCD_sendCommand+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3208:	6c ad       	ldd	r22, Y+60	; 0x3c
    320a:	7d ad       	ldd	r23, Y+61	; 0x3d
    320c:	8e ad       	ldd	r24, Y+62	; 0x3e
    320e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3210:	20 e0       	ldi	r18, 0x00	; 0
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	40 e2       	ldi	r20, 0x20	; 32
    3216:	51 e4       	ldi	r21, 0x41	; 65
    3218:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	bc 01       	movw	r22, r24
    3222:	cd 01       	movw	r24, r26
    3224:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	9f ab       	std	Y+55, r25	; 0x37
    322e:	8e ab       	std	Y+54, r24	; 0x36
    3230:	0f c0       	rjmp	.+30     	; 0x3250 <LCD_sendCommand+0x3da>
    3232:	88 ec       	ldi	r24, 0xC8	; 200
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	9d ab       	std	Y+53, r25	; 0x35
    3238:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    323a:	8c a9       	ldd	r24, Y+52	; 0x34
    323c:	9d a9       	ldd	r25, Y+53	; 0x35
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	f1 f7       	brne	.-4      	; 0x323e <LCD_sendCommand+0x3c8>
    3242:	9d ab       	std	Y+53, r25	; 0x35
    3244:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3246:	8e a9       	ldd	r24, Y+54	; 0x36
    3248:	9f a9       	ldd	r25, Y+55	; 0x37
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	9f ab       	std	Y+55, r25	; 0x37
    324e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3250:	8e a9       	ldd	r24, Y+54	; 0x36
    3252:	9f a9       	ldd	r25, Y+55	; 0x37
    3254:	00 97       	sbiw	r24, 0x00	; 0
    3256:	69 f7       	brne	.-38     	; 0x3232 <LCD_sendCommand+0x3bc>
    3258:	2d c0       	rjmp	.+90     	; 0x32b4 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    325a:	68 ad       	ldd	r22, Y+56	; 0x38
    325c:	79 ad       	ldd	r23, Y+57	; 0x39
    325e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3260:	9b ad       	ldd	r25, Y+59	; 0x3b
    3262:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	9f ab       	std	Y+55, r25	; 0x37
    326c:	8e ab       	std	Y+54, r24	; 0x36
    326e:	8e a9       	ldd	r24, Y+54	; 0x36
    3270:	9f a9       	ldd	r25, Y+55	; 0x37
    3272:	9b ab       	std	Y+51, r25	; 0x33
    3274:	8a ab       	std	Y+50, r24	; 0x32
    3276:	8a a9       	ldd	r24, Y+50	; 0x32
    3278:	9b a9       	ldd	r25, Y+51	; 0x33
    327a:	01 97       	sbiw	r24, 0x01	; 1
    327c:	f1 f7       	brne	.-4      	; 0x327a <LCD_sendCommand+0x404>
    327e:	9b ab       	std	Y+51, r25	; 0x33
    3280:	8a ab       	std	Y+50, r24	; 0x32
    3282:	18 c0       	rjmp	.+48     	; 0x32b4 <LCD_sendCommand+0x43e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3284:	fe 01       	movw	r30, r28
    3286:	ef 5b       	subi	r30, 0xBF	; 191
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	60 81       	ld	r22, Z
    328c:	71 81       	ldd	r23, Z+1	; 0x01
    328e:	82 81       	ldd	r24, Z+2	; 0x02
    3290:	93 81       	ldd	r25, Z+3	; 0x03
    3292:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	fe 01       	movw	r30, r28
    329c:	e0 5c       	subi	r30, 0xC0	; 192
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	80 83       	st	Z, r24
    32a2:	fe 01       	movw	r30, r28
    32a4:	e0 5c       	subi	r30, 0xC0	; 192
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	80 81       	ld	r24, Z
    32aa:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32ac:	89 a9       	ldd	r24, Y+49	; 0x31
    32ae:	8a 95       	dec	r24
    32b0:	f1 f7       	brne	.-4      	; 0x32ae <LCD_sendCommand+0x438>
    32b2:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(LCD_TA_DELAY_US); /* Delay for timing */

#ifdef LCD_8_BIT_MODE
    GPIO_writePort(LCD_DATA_PORT, a_lcdCommand);  /* Send character to data port */
    32b4:	fe 01       	movw	r30, r28
    32b6:	ef 59       	subi	r30, 0x9F	; 159
    32b8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	60 81       	ld	r22, Z
    32be:	0e 94 1a 07 	call	0xe34	; 0xe34 <GPIO_writePort>
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	a0 e8       	ldi	r26, 0x80	; 128
    32c8:	bf e3       	ldi	r27, 0x3F	; 63
    32ca:	8d a7       	std	Y+45, r24	; 0x2d
    32cc:	9e a7       	std	Y+46, r25	; 0x2e
    32ce:	af a7       	std	Y+47, r26	; 0x2f
    32d0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32d2:	6d a5       	ldd	r22, Y+45	; 0x2d
    32d4:	7e a5       	ldd	r23, Y+46	; 0x2e
    32d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    32d8:	98 a9       	ldd	r25, Y+48	; 0x30
    32da:	2b ea       	ldi	r18, 0xAB	; 171
    32dc:	3a ea       	ldi	r19, 0xAA	; 170
    32de:	4a e2       	ldi	r20, 0x2A	; 42
    32e0:	50 e4       	ldi	r21, 0x40	; 64
    32e2:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	89 a7       	std	Y+41, r24	; 0x29
    32ec:	9a a7       	std	Y+42, r25	; 0x2a
    32ee:	ab a7       	std	Y+43, r26	; 0x2b
    32f0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    32f2:	69 a5       	ldd	r22, Y+41	; 0x29
    32f4:	7a a5       	ldd	r23, Y+42	; 0x2a
    32f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    32f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	40 e8       	ldi	r20, 0x80	; 128
    3300:	5f e3       	ldi	r21, 0x3F	; 63
    3302:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    3306:	88 23       	and	r24, r24
    3308:	1c f4       	brge	.+6      	; 0x3310 <LCD_sendCommand+0x49a>
		__ticks = 1;
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	88 a7       	std	Y+40, r24	; 0x28
    330e:	91 c0       	rjmp	.+290    	; 0x3432 <LCD_sendCommand+0x5bc>
	else if (__tmp > 255)
    3310:	69 a5       	ldd	r22, Y+41	; 0x29
    3312:	7a a5       	ldd	r23, Y+42	; 0x2a
    3314:	8b a5       	ldd	r24, Y+43	; 0x2b
    3316:	9c a5       	ldd	r25, Y+44	; 0x2c
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	4f e7       	ldi	r20, 0x7F	; 127
    331e:	53 e4       	ldi	r21, 0x43	; 67
    3320:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    3324:	18 16       	cp	r1, r24
    3326:	0c f0       	brlt	.+2      	; 0x332a <LCD_sendCommand+0x4b4>
    3328:	7b c0       	rjmp	.+246    	; 0x3420 <LCD_sendCommand+0x5aa>
	{
		_delay_ms(__us / 1000.0);
    332a:	6d a5       	ldd	r22, Y+45	; 0x2d
    332c:	7e a5       	ldd	r23, Y+46	; 0x2e
    332e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3330:	98 a9       	ldd	r25, Y+48	; 0x30
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	4a e7       	ldi	r20, 0x7A	; 122
    3338:	54 e4       	ldi	r21, 0x44	; 68
    333a:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	8c a3       	std	Y+36, r24	; 0x24
    3344:	9d a3       	std	Y+37, r25	; 0x25
    3346:	ae a3       	std	Y+38, r26	; 0x26
    3348:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    334a:	6c a1       	ldd	r22, Y+36	; 0x24
    334c:	7d a1       	ldd	r23, Y+37	; 0x25
    334e:	8e a1       	ldd	r24, Y+38	; 0x26
    3350:	9f a1       	ldd	r25, Y+39	; 0x27
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	4a ef       	ldi	r20, 0xFA	; 250
    3358:	54 e4       	ldi	r21, 0x44	; 68
    335a:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	88 a3       	std	Y+32, r24	; 0x20
    3364:	99 a3       	std	Y+33, r25	; 0x21
    3366:	aa a3       	std	Y+34, r26	; 0x22
    3368:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    336a:	68 a1       	ldd	r22, Y+32	; 0x20
    336c:	79 a1       	ldd	r23, Y+33	; 0x21
    336e:	8a a1       	ldd	r24, Y+34	; 0x22
    3370:	9b a1       	ldd	r25, Y+35	; 0x23
    3372:	20 e0       	ldi	r18, 0x00	; 0
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	40 e8       	ldi	r20, 0x80	; 128
    3378:	5f e3       	ldi	r21, 0x3F	; 63
    337a:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    337e:	88 23       	and	r24, r24
    3380:	2c f4       	brge	.+10     	; 0x338c <LCD_sendCommand+0x516>
		__ticks = 1;
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	9f 8f       	std	Y+31, r25	; 0x1f
    3388:	8e 8f       	std	Y+30, r24	; 0x1e
    338a:	3f c0       	rjmp	.+126    	; 0x340a <LCD_sendCommand+0x594>
	else if (__tmp > 65535)
    338c:	68 a1       	ldd	r22, Y+32	; 0x20
    338e:	79 a1       	ldd	r23, Y+33	; 0x21
    3390:	8a a1       	ldd	r24, Y+34	; 0x22
    3392:	9b a1       	ldd	r25, Y+35	; 0x23
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	3f ef       	ldi	r19, 0xFF	; 255
    3398:	4f e7       	ldi	r20, 0x7F	; 127
    339a:	57 e4       	ldi	r21, 0x47	; 71
    339c:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    33a0:	18 16       	cp	r1, r24
    33a2:	4c f5       	brge	.+82     	; 0x33f6 <LCD_sendCommand+0x580>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a4:	6c a1       	ldd	r22, Y+36	; 0x24
    33a6:	7d a1       	ldd	r23, Y+37	; 0x25
    33a8:	8e a1       	ldd	r24, Y+38	; 0x26
    33aa:	9f a1       	ldd	r25, Y+39	; 0x27
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	40 e2       	ldi	r20, 0x20	; 32
    33b2:	51 e4       	ldi	r21, 0x41	; 65
    33b4:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    33b8:	dc 01       	movw	r26, r24
    33ba:	cb 01       	movw	r24, r22
    33bc:	bc 01       	movw	r22, r24
    33be:	cd 01       	movw	r24, r26
    33c0:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	9f 8f       	std	Y+31, r25	; 0x1f
    33ca:	8e 8f       	std	Y+30, r24	; 0x1e
    33cc:	0f c0       	rjmp	.+30     	; 0x33ec <LCD_sendCommand+0x576>
    33ce:	88 ec       	ldi	r24, 0xC8	; 200
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	9d 8f       	std	Y+29, r25	; 0x1d
    33d4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    33d8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	f1 f7       	brne	.-4      	; 0x33da <LCD_sendCommand+0x564>
    33de:	9d 8f       	std	Y+29, r25	; 0x1d
    33e0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    33e6:	01 97       	sbiw	r24, 0x01	; 1
    33e8:	9f 8f       	std	Y+31, r25	; 0x1f
    33ea:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33ee:	9f 8d       	ldd	r25, Y+31	; 0x1f
    33f0:	00 97       	sbiw	r24, 0x00	; 0
    33f2:	69 f7       	brne	.-38     	; 0x33ce <LCD_sendCommand+0x558>
    33f4:	24 c0       	rjmp	.+72     	; 0x343e <LCD_sendCommand+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f6:	68 a1       	ldd	r22, Y+32	; 0x20
    33f8:	79 a1       	ldd	r23, Y+33	; 0x21
    33fa:	8a a1       	ldd	r24, Y+34	; 0x22
    33fc:	9b a1       	ldd	r25, Y+35	; 0x23
    33fe:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	9f 8f       	std	Y+31, r25	; 0x1f
    3408:	8e 8f       	std	Y+30, r24	; 0x1e
    340a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    340c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    340e:	9b 8f       	std	Y+27, r25	; 0x1b
    3410:	8a 8f       	std	Y+26, r24	; 0x1a
    3412:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3414:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	f1 f7       	brne	.-4      	; 0x3416 <LCD_sendCommand+0x5a0>
    341a:	9b 8f       	std	Y+27, r25	; 0x1b
    341c:	8a 8f       	std	Y+26, r24	; 0x1a
    341e:	0f c0       	rjmp	.+30     	; 0x343e <LCD_sendCommand+0x5c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3420:	69 a5       	ldd	r22, Y+41	; 0x29
    3422:	7a a5       	ldd	r23, Y+42	; 0x2a
    3424:	8b a5       	ldd	r24, Y+43	; 0x2b
    3426:	9c a5       	ldd	r25, Y+44	; 0x2c
    3428:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	88 a7       	std	Y+40, r24	; 0x28
    3432:	88 a5       	ldd	r24, Y+40	; 0x28
    3434:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3436:	89 8d       	ldd	r24, Y+25	; 0x19
    3438:	8a 95       	dec	r24
    343a:	f1 f7       	brne	.-4      	; 0x3438 <LCD_sendCommand+0x5c2>
    343c:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(LCD_TA_DELAY_US);          /* Delay for timing */
    GPIO_ARR_setPinState(LCD_E, LOW);    /* Disable the LCD to latch the character */
    343e:	89 e0       	ldi	r24, 0x09	; 9
    3440:	60 e0       	ldi	r22, 0x00	; 0
    3442:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_ARR_setPinState>
    3446:	80 e0       	ldi	r24, 0x00	; 0
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	a0 e8       	ldi	r26, 0x80	; 128
    344c:	bf e3       	ldi	r27, 0x3F	; 63
    344e:	8d 8b       	std	Y+21, r24	; 0x15
    3450:	9e 8b       	std	Y+22, r25	; 0x16
    3452:	af 8b       	std	Y+23, r26	; 0x17
    3454:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3456:	6d 89       	ldd	r22, Y+21	; 0x15
    3458:	7e 89       	ldd	r23, Y+22	; 0x16
    345a:	8f 89       	ldd	r24, Y+23	; 0x17
    345c:	98 8d       	ldd	r25, Y+24	; 0x18
    345e:	2b ea       	ldi	r18, 0xAB	; 171
    3460:	3a ea       	ldi	r19, 0xAA	; 170
    3462:	4a e2       	ldi	r20, 0x2A	; 42
    3464:	50 e4       	ldi	r21, 0x40	; 64
    3466:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	89 8b       	std	Y+17, r24	; 0x11
    3470:	9a 8b       	std	Y+18, r25	; 0x12
    3472:	ab 8b       	std	Y+19, r26	; 0x13
    3474:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3476:	69 89       	ldd	r22, Y+17	; 0x11
    3478:	7a 89       	ldd	r23, Y+18	; 0x12
    347a:	8b 89       	ldd	r24, Y+19	; 0x13
    347c:	9c 89       	ldd	r25, Y+20	; 0x14
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	40 e8       	ldi	r20, 0x80	; 128
    3484:	5f e3       	ldi	r21, 0x3F	; 63
    3486:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    348a:	88 23       	and	r24, r24
    348c:	1c f4       	brge	.+6      	; 0x3494 <LCD_sendCommand+0x61e>
		__ticks = 1;
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	88 8b       	std	Y+16, r24	; 0x10
    3492:	91 c0       	rjmp	.+290    	; 0x35b6 <LCD_sendCommand+0x740>
	else if (__tmp > 255)
    3494:	69 89       	ldd	r22, Y+17	; 0x11
    3496:	7a 89       	ldd	r23, Y+18	; 0x12
    3498:	8b 89       	ldd	r24, Y+19	; 0x13
    349a:	9c 89       	ldd	r25, Y+20	; 0x14
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	4f e7       	ldi	r20, 0x7F	; 127
    34a2:	53 e4       	ldi	r21, 0x43	; 67
    34a4:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    34a8:	18 16       	cp	r1, r24
    34aa:	0c f0       	brlt	.+2      	; 0x34ae <LCD_sendCommand+0x638>
    34ac:	7b c0       	rjmp	.+246    	; 0x35a4 <LCD_sendCommand+0x72e>
	{
		_delay_ms(__us / 1000.0);
    34ae:	6d 89       	ldd	r22, Y+21	; 0x15
    34b0:	7e 89       	ldd	r23, Y+22	; 0x16
    34b2:	8f 89       	ldd	r24, Y+23	; 0x17
    34b4:	98 8d       	ldd	r25, Y+24	; 0x18
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	4a e7       	ldi	r20, 0x7A	; 122
    34bc:	54 e4       	ldi	r21, 0x44	; 68
    34be:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	8c 87       	std	Y+12, r24	; 0x0c
    34c8:	9d 87       	std	Y+13, r25	; 0x0d
    34ca:	ae 87       	std	Y+14, r26	; 0x0e
    34cc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    34d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    34d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    34d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	4a ef       	ldi	r20, 0xFA	; 250
    34dc:	54 e4       	ldi	r21, 0x44	; 68
    34de:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	88 87       	std	Y+8, r24	; 0x08
    34e8:	99 87       	std	Y+9, r25	; 0x09
    34ea:	aa 87       	std	Y+10, r26	; 0x0a
    34ec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    34ee:	68 85       	ldd	r22, Y+8	; 0x08
    34f0:	79 85       	ldd	r23, Y+9	; 0x09
    34f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    34f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	40 e8       	ldi	r20, 0x80	; 128
    34fc:	5f e3       	ldi	r21, 0x3F	; 63
    34fe:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    3502:	88 23       	and	r24, r24
    3504:	2c f4       	brge	.+10     	; 0x3510 <LCD_sendCommand+0x69a>
		__ticks = 1;
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	9f 83       	std	Y+7, r25	; 0x07
    350c:	8e 83       	std	Y+6, r24	; 0x06
    350e:	3f c0       	rjmp	.+126    	; 0x358e <LCD_sendCommand+0x718>
	else if (__tmp > 65535)
    3510:	68 85       	ldd	r22, Y+8	; 0x08
    3512:	79 85       	ldd	r23, Y+9	; 0x09
    3514:	8a 85       	ldd	r24, Y+10	; 0x0a
    3516:	9b 85       	ldd	r25, Y+11	; 0x0b
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	3f ef       	ldi	r19, 0xFF	; 255
    351c:	4f e7       	ldi	r20, 0x7F	; 127
    351e:	57 e4       	ldi	r21, 0x47	; 71
    3520:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    3524:	18 16       	cp	r1, r24
    3526:	4c f5       	brge	.+82     	; 0x357a <LCD_sendCommand+0x704>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3528:	6c 85       	ldd	r22, Y+12	; 0x0c
    352a:	7d 85       	ldd	r23, Y+13	; 0x0d
    352c:	8e 85       	ldd	r24, Y+14	; 0x0e
    352e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 e2       	ldi	r20, 0x20	; 32
    3536:	51 e4       	ldi	r21, 0x41	; 65
    3538:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	bc 01       	movw	r22, r24
    3542:	cd 01       	movw	r24, r26
    3544:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	9f 83       	std	Y+7, r25	; 0x07
    354e:	8e 83       	std	Y+6, r24	; 0x06
    3550:	0f c0       	rjmp	.+30     	; 0x3570 <LCD_sendCommand+0x6fa>
    3552:	88 ec       	ldi	r24, 0xC8	; 200
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	9d 83       	std	Y+5, r25	; 0x05
    3558:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    355a:	8c 81       	ldd	r24, Y+4	; 0x04
    355c:	9d 81       	ldd	r25, Y+5	; 0x05
    355e:	01 97       	sbiw	r24, 0x01	; 1
    3560:	f1 f7       	brne	.-4      	; 0x355e <LCD_sendCommand+0x6e8>
    3562:	9d 83       	std	Y+5, r25	; 0x05
    3564:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3566:	8e 81       	ldd	r24, Y+6	; 0x06
    3568:	9f 81       	ldd	r25, Y+7	; 0x07
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	9f 83       	std	Y+7, r25	; 0x07
    356e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3570:	8e 81       	ldd	r24, Y+6	; 0x06
    3572:	9f 81       	ldd	r25, Y+7	; 0x07
    3574:	00 97       	sbiw	r24, 0x00	; 0
    3576:	69 f7       	brne	.-38     	; 0x3552 <LCD_sendCommand+0x6dc>
    3578:	24 c0       	rjmp	.+72     	; 0x35c2 <LCD_sendCommand+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    357a:	68 85       	ldd	r22, Y+8	; 0x08
    357c:	79 85       	ldd	r23, Y+9	; 0x09
    357e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3580:	9b 85       	ldd	r25, Y+11	; 0x0b
    3582:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	9f 83       	std	Y+7, r25	; 0x07
    358c:	8e 83       	std	Y+6, r24	; 0x06
    358e:	8e 81       	ldd	r24, Y+6	; 0x06
    3590:	9f 81       	ldd	r25, Y+7	; 0x07
    3592:	9b 83       	std	Y+3, r25	; 0x03
    3594:	8a 83       	std	Y+2, r24	; 0x02
    3596:	8a 81       	ldd	r24, Y+2	; 0x02
    3598:	9b 81       	ldd	r25, Y+3	; 0x03
    359a:	01 97       	sbiw	r24, 0x01	; 1
    359c:	f1 f7       	brne	.-4      	; 0x359a <LCD_sendCommand+0x724>
    359e:	9b 83       	std	Y+3, r25	; 0x03
    35a0:	8a 83       	std	Y+2, r24	; 0x02
    35a2:	0f c0       	rjmp	.+30     	; 0x35c2 <LCD_sendCommand+0x74c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    35a4:	69 89       	ldd	r22, Y+17	; 0x11
    35a6:	7a 89       	ldd	r23, Y+18	; 0x12
    35a8:	8b 89       	ldd	r24, Y+19	; 0x13
    35aa:	9c 89       	ldd	r25, Y+20	; 0x14
    35ac:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	88 8b       	std	Y+16, r24	; 0x10
    35b6:	88 89       	ldd	r24, Y+16	; 0x10
    35b8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	8a 95       	dec	r24
    35be:	f1 f7       	brne	.-4      	; 0x35bc <LCD_sendCommand+0x746>
    35c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(LCD_TA_DELAY_US); /* Delay for timing */
	GPIO_ARR_setPinState(LCD_E, LOW); /* Disable the LCD to latch the character */
	_delay_us(LCD_TA_DELAY_US); /* Delay for timing */

#endif
}
    35c2:	cf 59       	subi	r28, 0x9F	; 159
    35c4:	df 4f       	sbci	r29, 0xFF	; 255
    35c6:	0f b6       	in	r0, 0x3f	; 63
    35c8:	f8 94       	cli
    35ca:	de bf       	out	0x3e, r29	; 62
    35cc:	0f be       	out	0x3f, r0	; 63
    35ce:	cd bf       	out	0x3d, r28	; 61
    35d0:	cf 91       	pop	r28
    35d2:	df 91       	pop	r29
    35d4:	1f 91       	pop	r17
    35d6:	0f 91       	pop	r16
    35d8:	08 95       	ret

000035da <LCD_displayChar>:
 * This function sends a single character to the LCD for display.
 * It sets the RS pin to 1 to indicate that the data is a character.
 *
 * @param a_lcdChar The ASCII character to be sent to the LCD.
 */
void LCD_displayChar(uint8 a_lcdChar) {
    35da:	0f 93       	push	r16
    35dc:	1f 93       	push	r17
    35de:	df 93       	push	r29
    35e0:	cf 93       	push	r28
    35e2:	cd b7       	in	r28, 0x3d	; 61
    35e4:	de b7       	in	r29, 0x3e	; 62
    35e6:	c1 56       	subi	r28, 0x61	; 97
    35e8:	d0 40       	sbci	r29, 0x00	; 0
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	f8 94       	cli
    35ee:	de bf       	out	0x3e, r29	; 62
    35f0:	0f be       	out	0x3f, r0	; 63
    35f2:	cd bf       	out	0x3d, r28	; 61
    35f4:	fe 01       	movw	r30, r28
    35f6:	ef 59       	subi	r30, 0x9F	; 159
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	80 83       	st	Z, r24
	GPIO_ARR_setPinState(LCD_RS, HIGH); /* Set RS to 1 for data mode */
    35fc:	88 e0       	ldi	r24, 0x08	; 8
    35fe:	61 e0       	ldi	r22, 0x01	; 1
    3600:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_ARR_setPinState>
    3604:	fe 01       	movw	r30, r28
    3606:	e3 5a       	subi	r30, 0xA3	; 163
    3608:	ff 4f       	sbci	r31, 0xFF	; 255
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	a0 e8       	ldi	r26, 0x80	; 128
    3610:	bf e3       	ldi	r27, 0x3F	; 63
    3612:	80 83       	st	Z, r24
    3614:	91 83       	std	Z+1, r25	; 0x01
    3616:	a2 83       	std	Z+2, r26	; 0x02
    3618:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    361a:	8e 01       	movw	r16, r28
    361c:	07 5a       	subi	r16, 0xA7	; 167
    361e:	1f 4f       	sbci	r17, 0xFF	; 255
    3620:	fe 01       	movw	r30, r28
    3622:	e3 5a       	subi	r30, 0xA3	; 163
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	60 81       	ld	r22, Z
    3628:	71 81       	ldd	r23, Z+1	; 0x01
    362a:	82 81       	ldd	r24, Z+2	; 0x02
    362c:	93 81       	ldd	r25, Z+3	; 0x03
    362e:	2b ea       	ldi	r18, 0xAB	; 171
    3630:	3a ea       	ldi	r19, 0xAA	; 170
    3632:	4a e2       	ldi	r20, 0x2A	; 42
    3634:	50 e4       	ldi	r21, 0x40	; 64
    3636:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	f8 01       	movw	r30, r16
    3640:	80 83       	st	Z, r24
    3642:	91 83       	std	Z+1, r25	; 0x01
    3644:	a2 83       	std	Z+2, r26	; 0x02
    3646:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3648:	fe 01       	movw	r30, r28
    364a:	e7 5a       	subi	r30, 0xA7	; 167
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	60 81       	ld	r22, Z
    3650:	71 81       	ldd	r23, Z+1	; 0x01
    3652:	82 81       	ldd	r24, Z+2	; 0x02
    3654:	93 81       	ldd	r25, Z+3	; 0x03
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	40 e8       	ldi	r20, 0x80	; 128
    365c:	5f e3       	ldi	r21, 0x3F	; 63
    365e:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    3662:	88 23       	and	r24, r24
    3664:	34 f4       	brge	.+12     	; 0x3672 <LCD_displayChar+0x98>
		__ticks = 1;
    3666:	fe 01       	movw	r30, r28
    3668:	e8 5a       	subi	r30, 0xA8	; 168
    366a:	ff 4f       	sbci	r31, 0xFF	; 255
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	80 83       	st	Z, r24
    3670:	e0 c0       	rjmp	.+448    	; 0x3832 <LCD_displayChar+0x258>
	else if (__tmp > 255)
    3672:	fe 01       	movw	r30, r28
    3674:	e7 5a       	subi	r30, 0xA7	; 167
    3676:	ff 4f       	sbci	r31, 0xFF	; 255
    3678:	60 81       	ld	r22, Z
    367a:	71 81       	ldd	r23, Z+1	; 0x01
    367c:	82 81       	ldd	r24, Z+2	; 0x02
    367e:	93 81       	ldd	r25, Z+3	; 0x03
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	4f e7       	ldi	r20, 0x7F	; 127
    3686:	53 e4       	ldi	r21, 0x43	; 67
    3688:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    368c:	18 16       	cp	r1, r24
    368e:	0c f0       	brlt	.+2      	; 0x3692 <LCD_displayChar+0xb8>
    3690:	c0 c0       	rjmp	.+384    	; 0x3812 <LCD_displayChar+0x238>
	{
		_delay_ms(__us / 1000.0);
    3692:	fe 01       	movw	r30, r28
    3694:	e3 5a       	subi	r30, 0xA3	; 163
    3696:	ff 4f       	sbci	r31, 0xFF	; 255
    3698:	60 81       	ld	r22, Z
    369a:	71 81       	ldd	r23, Z+1	; 0x01
    369c:	82 81       	ldd	r24, Z+2	; 0x02
    369e:	93 81       	ldd	r25, Z+3	; 0x03
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	4a e7       	ldi	r20, 0x7A	; 122
    36a6:	54 e4       	ldi	r21, 0x44	; 68
    36a8:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	fe 01       	movw	r30, r28
    36b2:	ec 5a       	subi	r30, 0xAC	; 172
    36b4:	ff 4f       	sbci	r31, 0xFF	; 255
    36b6:	80 83       	st	Z, r24
    36b8:	91 83       	std	Z+1, r25	; 0x01
    36ba:	a2 83       	std	Z+2, r26	; 0x02
    36bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36be:	8e 01       	movw	r16, r28
    36c0:	00 5b       	subi	r16, 0xB0	; 176
    36c2:	1f 4f       	sbci	r17, 0xFF	; 255
    36c4:	fe 01       	movw	r30, r28
    36c6:	ec 5a       	subi	r30, 0xAC	; 172
    36c8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ca:	60 81       	ld	r22, Z
    36cc:	71 81       	ldd	r23, Z+1	; 0x01
    36ce:	82 81       	ldd	r24, Z+2	; 0x02
    36d0:	93 81       	ldd	r25, Z+3	; 0x03
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	4a ef       	ldi	r20, 0xFA	; 250
    36d8:	54 e4       	ldi	r21, 0x44	; 68
    36da:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	f8 01       	movw	r30, r16
    36e4:	80 83       	st	Z, r24
    36e6:	91 83       	std	Z+1, r25	; 0x01
    36e8:	a2 83       	std	Z+2, r26	; 0x02
    36ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36ec:	fe 01       	movw	r30, r28
    36ee:	e0 5b       	subi	r30, 0xB0	; 176
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	60 81       	ld	r22, Z
    36f4:	71 81       	ldd	r23, Z+1	; 0x01
    36f6:	82 81       	ldd	r24, Z+2	; 0x02
    36f8:	93 81       	ldd	r25, Z+3	; 0x03
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	40 e8       	ldi	r20, 0x80	; 128
    3700:	5f e3       	ldi	r21, 0x3F	; 63
    3702:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    3706:	88 23       	and	r24, r24
    3708:	44 f4       	brge	.+16     	; 0x371a <LCD_displayChar+0x140>
		__ticks = 1;
    370a:	fe 01       	movw	r30, r28
    370c:	e2 5b       	subi	r30, 0xB2	; 178
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	91 83       	std	Z+1, r25	; 0x01
    3716:	80 83       	st	Z, r24
    3718:	64 c0       	rjmp	.+200    	; 0x37e2 <LCD_displayChar+0x208>
	else if (__tmp > 65535)
    371a:	fe 01       	movw	r30, r28
    371c:	e0 5b       	subi	r30, 0xB0	; 176
    371e:	ff 4f       	sbci	r31, 0xFF	; 255
    3720:	60 81       	ld	r22, Z
    3722:	71 81       	ldd	r23, Z+1	; 0x01
    3724:	82 81       	ldd	r24, Z+2	; 0x02
    3726:	93 81       	ldd	r25, Z+3	; 0x03
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	3f ef       	ldi	r19, 0xFF	; 255
    372c:	4f e7       	ldi	r20, 0x7F	; 127
    372e:	57 e4       	ldi	r21, 0x47	; 71
    3730:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    3734:	18 16       	cp	r1, r24
    3736:	0c f0       	brlt	.+2      	; 0x373a <LCD_displayChar+0x160>
    3738:	43 c0       	rjmp	.+134    	; 0x37c0 <LCD_displayChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    373a:	fe 01       	movw	r30, r28
    373c:	ec 5a       	subi	r30, 0xAC	; 172
    373e:	ff 4f       	sbci	r31, 0xFF	; 255
    3740:	60 81       	ld	r22, Z
    3742:	71 81       	ldd	r23, Z+1	; 0x01
    3744:	82 81       	ldd	r24, Z+2	; 0x02
    3746:	93 81       	ldd	r25, Z+3	; 0x03
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	40 e2       	ldi	r20, 0x20	; 32
    374e:	51 e4       	ldi	r21, 0x41	; 65
    3750:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	8e 01       	movw	r16, r28
    375a:	02 5b       	subi	r16, 0xB2	; 178
    375c:	1f 4f       	sbci	r17, 0xFF	; 255
    375e:	bc 01       	movw	r22, r24
    3760:	cd 01       	movw	r24, r26
    3762:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	f8 01       	movw	r30, r16
    376c:	91 83       	std	Z+1, r25	; 0x01
    376e:	80 83       	st	Z, r24
    3770:	1f c0       	rjmp	.+62     	; 0x37b0 <LCD_displayChar+0x1d6>
    3772:	fe 01       	movw	r30, r28
    3774:	e4 5b       	subi	r30, 0xB4	; 180
    3776:	ff 4f       	sbci	r31, 0xFF	; 255
    3778:	88 ec       	ldi	r24, 0xC8	; 200
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	91 83       	std	Z+1, r25	; 0x01
    377e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3780:	fe 01       	movw	r30, r28
    3782:	e4 5b       	subi	r30, 0xB4	; 180
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	80 81       	ld	r24, Z
    3788:	91 81       	ldd	r25, Z+1	; 0x01
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	f1 f7       	brne	.-4      	; 0x378a <LCD_displayChar+0x1b0>
    378e:	fe 01       	movw	r30, r28
    3790:	e4 5b       	subi	r30, 0xB4	; 180
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	91 83       	std	Z+1, r25	; 0x01
    3796:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3798:	de 01       	movw	r26, r28
    379a:	a2 5b       	subi	r26, 0xB2	; 178
    379c:	bf 4f       	sbci	r27, 0xFF	; 255
    379e:	fe 01       	movw	r30, r28
    37a0:	e2 5b       	subi	r30, 0xB2	; 178
    37a2:	ff 4f       	sbci	r31, 0xFF	; 255
    37a4:	80 81       	ld	r24, Z
    37a6:	91 81       	ldd	r25, Z+1	; 0x01
    37a8:	01 97       	sbiw	r24, 0x01	; 1
    37aa:	11 96       	adiw	r26, 0x01	; 1
    37ac:	9c 93       	st	X, r25
    37ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37b0:	fe 01       	movw	r30, r28
    37b2:	e2 5b       	subi	r30, 0xB2	; 178
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	80 81       	ld	r24, Z
    37b8:	91 81       	ldd	r25, Z+1	; 0x01
    37ba:	00 97       	sbiw	r24, 0x00	; 0
    37bc:	d1 f6       	brne	.-76     	; 0x3772 <LCD_displayChar+0x198>
    37be:	4b c0       	rjmp	.+150    	; 0x3856 <LCD_displayChar+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37c0:	8e 01       	movw	r16, r28
    37c2:	02 5b       	subi	r16, 0xB2	; 178
    37c4:	1f 4f       	sbci	r17, 0xFF	; 255
    37c6:	fe 01       	movw	r30, r28
    37c8:	e0 5b       	subi	r30, 0xB0	; 176
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	60 81       	ld	r22, Z
    37ce:	71 81       	ldd	r23, Z+1	; 0x01
    37d0:	82 81       	ldd	r24, Z+2	; 0x02
    37d2:	93 81       	ldd	r25, Z+3	; 0x03
    37d4:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	f8 01       	movw	r30, r16
    37de:	91 83       	std	Z+1, r25	; 0x01
    37e0:	80 83       	st	Z, r24
    37e2:	de 01       	movw	r26, r28
    37e4:	a6 5b       	subi	r26, 0xB6	; 182
    37e6:	bf 4f       	sbci	r27, 0xFF	; 255
    37e8:	fe 01       	movw	r30, r28
    37ea:	e2 5b       	subi	r30, 0xB2	; 178
    37ec:	ff 4f       	sbci	r31, 0xFF	; 255
    37ee:	80 81       	ld	r24, Z
    37f0:	91 81       	ldd	r25, Z+1	; 0x01
    37f2:	11 96       	adiw	r26, 0x01	; 1
    37f4:	9c 93       	st	X, r25
    37f6:	8e 93       	st	-X, r24
    37f8:	fe 01       	movw	r30, r28
    37fa:	e6 5b       	subi	r30, 0xB6	; 182
    37fc:	ff 4f       	sbci	r31, 0xFF	; 255
    37fe:	80 81       	ld	r24, Z
    3800:	91 81       	ldd	r25, Z+1	; 0x01
    3802:	01 97       	sbiw	r24, 0x01	; 1
    3804:	f1 f7       	brne	.-4      	; 0x3802 <LCD_displayChar+0x228>
    3806:	fe 01       	movw	r30, r28
    3808:	e6 5b       	subi	r30, 0xB6	; 182
    380a:	ff 4f       	sbci	r31, 0xFF	; 255
    380c:	91 83       	std	Z+1, r25	; 0x01
    380e:	80 83       	st	Z, r24
    3810:	22 c0       	rjmp	.+68     	; 0x3856 <LCD_displayChar+0x27c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3812:	8e 01       	movw	r16, r28
    3814:	08 5a       	subi	r16, 0xA8	; 168
    3816:	1f 4f       	sbci	r17, 0xFF	; 255
    3818:	fe 01       	movw	r30, r28
    381a:	e7 5a       	subi	r30, 0xA7	; 167
    381c:	ff 4f       	sbci	r31, 0xFF	; 255
    381e:	60 81       	ld	r22, Z
    3820:	71 81       	ldd	r23, Z+1	; 0x01
    3822:	82 81       	ldd	r24, Z+2	; 0x02
    3824:	93 81       	ldd	r25, Z+3	; 0x03
    3826:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	f8 01       	movw	r30, r16
    3830:	80 83       	st	Z, r24
    3832:	de 01       	movw	r26, r28
    3834:	a7 5b       	subi	r26, 0xB7	; 183
    3836:	bf 4f       	sbci	r27, 0xFF	; 255
    3838:	fe 01       	movw	r30, r28
    383a:	e8 5a       	subi	r30, 0xA8	; 168
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	80 81       	ld	r24, Z
    3840:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3842:	fe 01       	movw	r30, r28
    3844:	e7 5b       	subi	r30, 0xB7	; 183
    3846:	ff 4f       	sbci	r31, 0xFF	; 255
    3848:	80 81       	ld	r24, Z
    384a:	8a 95       	dec	r24
    384c:	f1 f7       	brne	.-4      	; 0x384a <LCD_displayChar+0x270>
    384e:	fe 01       	movw	r30, r28
    3850:	e7 5b       	subi	r30, 0xB7	; 183
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	80 83       	st	Z, r24
	_delay_us(LCD_TA_DELAY_US); /* Delay for timing */
	GPIO_ARR_setPinState(LCD_E, HIGH); /* Enable the LCD */
    3856:	89 e0       	ldi	r24, 0x09	; 9
    3858:	61 e0       	ldi	r22, 0x01	; 1
    385a:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_ARR_setPinState>
    385e:	fe 01       	movw	r30, r28
    3860:	eb 5b       	subi	r30, 0xBB	; 187
    3862:	ff 4f       	sbci	r31, 0xFF	; 255
    3864:	80 e0       	ldi	r24, 0x00	; 0
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	a0 e8       	ldi	r26, 0x80	; 128
    386a:	bf e3       	ldi	r27, 0x3F	; 63
    386c:	80 83       	st	Z, r24
    386e:	91 83       	std	Z+1, r25	; 0x01
    3870:	a2 83       	std	Z+2, r26	; 0x02
    3872:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3874:	8e 01       	movw	r16, r28
    3876:	0f 5b       	subi	r16, 0xBF	; 191
    3878:	1f 4f       	sbci	r17, 0xFF	; 255
    387a:	fe 01       	movw	r30, r28
    387c:	eb 5b       	subi	r30, 0xBB	; 187
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	60 81       	ld	r22, Z
    3882:	71 81       	ldd	r23, Z+1	; 0x01
    3884:	82 81       	ldd	r24, Z+2	; 0x02
    3886:	93 81       	ldd	r25, Z+3	; 0x03
    3888:	2b ea       	ldi	r18, 0xAB	; 171
    388a:	3a ea       	ldi	r19, 0xAA	; 170
    388c:	4a e2       	ldi	r20, 0x2A	; 42
    388e:	50 e4       	ldi	r21, 0x40	; 64
    3890:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	f8 01       	movw	r30, r16
    389a:	80 83       	st	Z, r24
    389c:	91 83       	std	Z+1, r25	; 0x01
    389e:	a2 83       	std	Z+2, r26	; 0x02
    38a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38a2:	fe 01       	movw	r30, r28
    38a4:	ef 5b       	subi	r30, 0xBF	; 191
    38a6:	ff 4f       	sbci	r31, 0xFF	; 255
    38a8:	60 81       	ld	r22, Z
    38aa:	71 81       	ldd	r23, Z+1	; 0x01
    38ac:	82 81       	ldd	r24, Z+2	; 0x02
    38ae:	93 81       	ldd	r25, Z+3	; 0x03
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	40 e8       	ldi	r20, 0x80	; 128
    38b6:	5f e3       	ldi	r21, 0x3F	; 63
    38b8:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    38bc:	88 23       	and	r24, r24
    38be:	34 f4       	brge	.+12     	; 0x38cc <LCD_displayChar+0x2f2>
		__ticks = 1;
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	fe 01       	movw	r30, r28
    38c4:	e0 5c       	subi	r30, 0xC0	; 192
    38c6:	ff 4f       	sbci	r31, 0xFF	; 255
    38c8:	80 83       	st	Z, r24
    38ca:	9d c0       	rjmp	.+314    	; 0x3a06 <LCD_displayChar+0x42c>
	else if (__tmp > 255)
    38cc:	fe 01       	movw	r30, r28
    38ce:	ef 5b       	subi	r30, 0xBF	; 191
    38d0:	ff 4f       	sbci	r31, 0xFF	; 255
    38d2:	60 81       	ld	r22, Z
    38d4:	71 81       	ldd	r23, Z+1	; 0x01
    38d6:	82 81       	ldd	r24, Z+2	; 0x02
    38d8:	93 81       	ldd	r25, Z+3	; 0x03
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	4f e7       	ldi	r20, 0x7F	; 127
    38e0:	53 e4       	ldi	r21, 0x43	; 67
    38e2:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    38e6:	18 16       	cp	r1, r24
    38e8:	0c f0       	brlt	.+2      	; 0x38ec <LCD_displayChar+0x312>
    38ea:	7e c0       	rjmp	.+252    	; 0x39e8 <LCD_displayChar+0x40e>
	{
		_delay_ms(__us / 1000.0);
    38ec:	fe 01       	movw	r30, r28
    38ee:	eb 5b       	subi	r30, 0xBB	; 187
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	60 81       	ld	r22, Z
    38f4:	71 81       	ldd	r23, Z+1	; 0x01
    38f6:	82 81       	ldd	r24, Z+2	; 0x02
    38f8:	93 81       	ldd	r25, Z+3	; 0x03
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	4a e7       	ldi	r20, 0x7A	; 122
    3900:	54 e4       	ldi	r21, 0x44	; 68
    3902:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    3906:	dc 01       	movw	r26, r24
    3908:	cb 01       	movw	r24, r22
    390a:	8c af       	std	Y+60, r24	; 0x3c
    390c:	9d af       	std	Y+61, r25	; 0x3d
    390e:	ae af       	std	Y+62, r26	; 0x3e
    3910:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3912:	6c ad       	ldd	r22, Y+60	; 0x3c
    3914:	7d ad       	ldd	r23, Y+61	; 0x3d
    3916:	8e ad       	ldd	r24, Y+62	; 0x3e
    3918:	9f ad       	ldd	r25, Y+63	; 0x3f
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	4a ef       	ldi	r20, 0xFA	; 250
    3920:	54 e4       	ldi	r21, 0x44	; 68
    3922:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	88 af       	std	Y+56, r24	; 0x38
    392c:	99 af       	std	Y+57, r25	; 0x39
    392e:	aa af       	std	Y+58, r26	; 0x3a
    3930:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3932:	68 ad       	ldd	r22, Y+56	; 0x38
    3934:	79 ad       	ldd	r23, Y+57	; 0x39
    3936:	8a ad       	ldd	r24, Y+58	; 0x3a
    3938:	9b ad       	ldd	r25, Y+59	; 0x3b
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	40 e8       	ldi	r20, 0x80	; 128
    3940:	5f e3       	ldi	r21, 0x3F	; 63
    3942:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    3946:	88 23       	and	r24, r24
    3948:	2c f4       	brge	.+10     	; 0x3954 <LCD_displayChar+0x37a>
		__ticks = 1;
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	9f ab       	std	Y+55, r25	; 0x37
    3950:	8e ab       	std	Y+54, r24	; 0x36
    3952:	3f c0       	rjmp	.+126    	; 0x39d2 <LCD_displayChar+0x3f8>
	else if (__tmp > 65535)
    3954:	68 ad       	ldd	r22, Y+56	; 0x38
    3956:	79 ad       	ldd	r23, Y+57	; 0x39
    3958:	8a ad       	ldd	r24, Y+58	; 0x3a
    395a:	9b ad       	ldd	r25, Y+59	; 0x3b
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	3f ef       	ldi	r19, 0xFF	; 255
    3960:	4f e7       	ldi	r20, 0x7F	; 127
    3962:	57 e4       	ldi	r21, 0x47	; 71
    3964:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    3968:	18 16       	cp	r1, r24
    396a:	4c f5       	brge	.+82     	; 0x39be <LCD_displayChar+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    396c:	6c ad       	ldd	r22, Y+60	; 0x3c
    396e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3970:	8e ad       	ldd	r24, Y+62	; 0x3e
    3972:	9f ad       	ldd	r25, Y+63	; 0x3f
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	40 e2       	ldi	r20, 0x20	; 32
    397a:	51 e4       	ldi	r21, 0x41	; 65
    397c:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    3980:	dc 01       	movw	r26, r24
    3982:	cb 01       	movw	r24, r22
    3984:	bc 01       	movw	r22, r24
    3986:	cd 01       	movw	r24, r26
    3988:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    398c:	dc 01       	movw	r26, r24
    398e:	cb 01       	movw	r24, r22
    3990:	9f ab       	std	Y+55, r25	; 0x37
    3992:	8e ab       	std	Y+54, r24	; 0x36
    3994:	0f c0       	rjmp	.+30     	; 0x39b4 <LCD_displayChar+0x3da>
    3996:	88 ec       	ldi	r24, 0xC8	; 200
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	9d ab       	std	Y+53, r25	; 0x35
    399c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    399e:	8c a9       	ldd	r24, Y+52	; 0x34
    39a0:	9d a9       	ldd	r25, Y+53	; 0x35
    39a2:	01 97       	sbiw	r24, 0x01	; 1
    39a4:	f1 f7       	brne	.-4      	; 0x39a2 <LCD_displayChar+0x3c8>
    39a6:	9d ab       	std	Y+53, r25	; 0x35
    39a8:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39aa:	8e a9       	ldd	r24, Y+54	; 0x36
    39ac:	9f a9       	ldd	r25, Y+55	; 0x37
    39ae:	01 97       	sbiw	r24, 0x01	; 1
    39b0:	9f ab       	std	Y+55, r25	; 0x37
    39b2:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b4:	8e a9       	ldd	r24, Y+54	; 0x36
    39b6:	9f a9       	ldd	r25, Y+55	; 0x37
    39b8:	00 97       	sbiw	r24, 0x00	; 0
    39ba:	69 f7       	brne	.-38     	; 0x3996 <LCD_displayChar+0x3bc>
    39bc:	2d c0       	rjmp	.+90     	; 0x3a18 <LCD_displayChar+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39be:	68 ad       	ldd	r22, Y+56	; 0x38
    39c0:	79 ad       	ldd	r23, Y+57	; 0x39
    39c2:	8a ad       	ldd	r24, Y+58	; 0x3a
    39c4:	9b ad       	ldd	r25, Y+59	; 0x3b
    39c6:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    39ca:	dc 01       	movw	r26, r24
    39cc:	cb 01       	movw	r24, r22
    39ce:	9f ab       	std	Y+55, r25	; 0x37
    39d0:	8e ab       	std	Y+54, r24	; 0x36
    39d2:	8e a9       	ldd	r24, Y+54	; 0x36
    39d4:	9f a9       	ldd	r25, Y+55	; 0x37
    39d6:	9b ab       	std	Y+51, r25	; 0x33
    39d8:	8a ab       	std	Y+50, r24	; 0x32
    39da:	8a a9       	ldd	r24, Y+50	; 0x32
    39dc:	9b a9       	ldd	r25, Y+51	; 0x33
    39de:	01 97       	sbiw	r24, 0x01	; 1
    39e0:	f1 f7       	brne	.-4      	; 0x39de <LCD_displayChar+0x404>
    39e2:	9b ab       	std	Y+51, r25	; 0x33
    39e4:	8a ab       	std	Y+50, r24	; 0x32
    39e6:	18 c0       	rjmp	.+48     	; 0x3a18 <LCD_displayChar+0x43e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    39e8:	fe 01       	movw	r30, r28
    39ea:	ef 5b       	subi	r30, 0xBF	; 191
    39ec:	ff 4f       	sbci	r31, 0xFF	; 255
    39ee:	60 81       	ld	r22, Z
    39f0:	71 81       	ldd	r23, Z+1	; 0x01
    39f2:	82 81       	ldd	r24, Z+2	; 0x02
    39f4:	93 81       	ldd	r25, Z+3	; 0x03
    39f6:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    39fa:	dc 01       	movw	r26, r24
    39fc:	cb 01       	movw	r24, r22
    39fe:	fe 01       	movw	r30, r28
    3a00:	e0 5c       	subi	r30, 0xC0	; 192
    3a02:	ff 4f       	sbci	r31, 0xFF	; 255
    3a04:	80 83       	st	Z, r24
    3a06:	fe 01       	movw	r30, r28
    3a08:	e0 5c       	subi	r30, 0xC0	; 192
    3a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0c:	80 81       	ld	r24, Z
    3a0e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a10:	89 a9       	ldd	r24, Y+49	; 0x31
    3a12:	8a 95       	dec	r24
    3a14:	f1 f7       	brne	.-4      	; 0x3a12 <LCD_displayChar+0x438>
    3a16:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(LCD_TA_DELAY_US); /* Delay for timing */
#ifdef LCD_8_BIT_MODE
    GPIO_writePort(LCD_DATA_PORT, a_lcdChar);  /* Send character to data port */
    3a18:	fe 01       	movw	r30, r28
    3a1a:	ef 59       	subi	r30, 0x9F	; 159
    3a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	60 81       	ld	r22, Z
    3a22:	0e 94 1a 07 	call	0xe34	; 0xe34 <GPIO_writePort>
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	a0 e8       	ldi	r26, 0x80	; 128
    3a2c:	bf e3       	ldi	r27, 0x3F	; 63
    3a2e:	8d a7       	std	Y+45, r24	; 0x2d
    3a30:	9e a7       	std	Y+46, r25	; 0x2e
    3a32:	af a7       	std	Y+47, r26	; 0x2f
    3a34:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a36:	6d a5       	ldd	r22, Y+45	; 0x2d
    3a38:	7e a5       	ldd	r23, Y+46	; 0x2e
    3a3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a3c:	98 a9       	ldd	r25, Y+48	; 0x30
    3a3e:	2b ea       	ldi	r18, 0xAB	; 171
    3a40:	3a ea       	ldi	r19, 0xAA	; 170
    3a42:	4a e2       	ldi	r20, 0x2A	; 42
    3a44:	50 e4       	ldi	r21, 0x40	; 64
    3a46:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	89 a7       	std	Y+41, r24	; 0x29
    3a50:	9a a7       	std	Y+42, r25	; 0x2a
    3a52:	ab a7       	std	Y+43, r26	; 0x2b
    3a54:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3a56:	69 a5       	ldd	r22, Y+41	; 0x29
    3a58:	7a a5       	ldd	r23, Y+42	; 0x2a
    3a5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	40 e8       	ldi	r20, 0x80	; 128
    3a64:	5f e3       	ldi	r21, 0x3F	; 63
    3a66:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    3a6a:	88 23       	and	r24, r24
    3a6c:	1c f4       	brge	.+6      	; 0x3a74 <LCD_displayChar+0x49a>
		__ticks = 1;
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	88 a7       	std	Y+40, r24	; 0x28
    3a72:	91 c0       	rjmp	.+290    	; 0x3b96 <LCD_displayChar+0x5bc>
	else if (__tmp > 255)
    3a74:	69 a5       	ldd	r22, Y+41	; 0x29
    3a76:	7a a5       	ldd	r23, Y+42	; 0x2a
    3a78:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	4f e7       	ldi	r20, 0x7F	; 127
    3a82:	53 e4       	ldi	r21, 0x43	; 67
    3a84:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    3a88:	18 16       	cp	r1, r24
    3a8a:	0c f0       	brlt	.+2      	; 0x3a8e <LCD_displayChar+0x4b4>
    3a8c:	7b c0       	rjmp	.+246    	; 0x3b84 <LCD_displayChar+0x5aa>
	{
		_delay_ms(__us / 1000.0);
    3a8e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3a90:	7e a5       	ldd	r23, Y+46	; 0x2e
    3a92:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a94:	98 a9       	ldd	r25, Y+48	; 0x30
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	4a e7       	ldi	r20, 0x7A	; 122
    3a9c:	54 e4       	ldi	r21, 0x44	; 68
    3a9e:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	8c a3       	std	Y+36, r24	; 0x24
    3aa8:	9d a3       	std	Y+37, r25	; 0x25
    3aaa:	ae a3       	std	Y+38, r26	; 0x26
    3aac:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aae:	6c a1       	ldd	r22, Y+36	; 0x24
    3ab0:	7d a1       	ldd	r23, Y+37	; 0x25
    3ab2:	8e a1       	ldd	r24, Y+38	; 0x26
    3ab4:	9f a1       	ldd	r25, Y+39	; 0x27
    3ab6:	20 e0       	ldi	r18, 0x00	; 0
    3ab8:	30 e0       	ldi	r19, 0x00	; 0
    3aba:	4a ef       	ldi	r20, 0xFA	; 250
    3abc:	54 e4       	ldi	r21, 0x44	; 68
    3abe:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    3ac2:	dc 01       	movw	r26, r24
    3ac4:	cb 01       	movw	r24, r22
    3ac6:	88 a3       	std	Y+32, r24	; 0x20
    3ac8:	99 a3       	std	Y+33, r25	; 0x21
    3aca:	aa a3       	std	Y+34, r26	; 0x22
    3acc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3ace:	68 a1       	ldd	r22, Y+32	; 0x20
    3ad0:	79 a1       	ldd	r23, Y+33	; 0x21
    3ad2:	8a a1       	ldd	r24, Y+34	; 0x22
    3ad4:	9b a1       	ldd	r25, Y+35	; 0x23
    3ad6:	20 e0       	ldi	r18, 0x00	; 0
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	40 e8       	ldi	r20, 0x80	; 128
    3adc:	5f e3       	ldi	r21, 0x3F	; 63
    3ade:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    3ae2:	88 23       	and	r24, r24
    3ae4:	2c f4       	brge	.+10     	; 0x3af0 <LCD_displayChar+0x516>
		__ticks = 1;
    3ae6:	81 e0       	ldi	r24, 0x01	; 1
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	9f 8f       	std	Y+31, r25	; 0x1f
    3aec:	8e 8f       	std	Y+30, r24	; 0x1e
    3aee:	3f c0       	rjmp	.+126    	; 0x3b6e <LCD_displayChar+0x594>
	else if (__tmp > 65535)
    3af0:	68 a1       	ldd	r22, Y+32	; 0x20
    3af2:	79 a1       	ldd	r23, Y+33	; 0x21
    3af4:	8a a1       	ldd	r24, Y+34	; 0x22
    3af6:	9b a1       	ldd	r25, Y+35	; 0x23
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	3f ef       	ldi	r19, 0xFF	; 255
    3afc:	4f e7       	ldi	r20, 0x7F	; 127
    3afe:	57 e4       	ldi	r21, 0x47	; 71
    3b00:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    3b04:	18 16       	cp	r1, r24
    3b06:	4c f5       	brge	.+82     	; 0x3b5a <LCD_displayChar+0x580>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b08:	6c a1       	ldd	r22, Y+36	; 0x24
    3b0a:	7d a1       	ldd	r23, Y+37	; 0x25
    3b0c:	8e a1       	ldd	r24, Y+38	; 0x26
    3b0e:	9f a1       	ldd	r25, Y+39	; 0x27
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	40 e2       	ldi	r20, 0x20	; 32
    3b16:	51 e4       	ldi	r21, 0x41	; 65
    3b18:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	bc 01       	movw	r22, r24
    3b22:	cd 01       	movw	r24, r26
    3b24:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	9f 8f       	std	Y+31, r25	; 0x1f
    3b2e:	8e 8f       	std	Y+30, r24	; 0x1e
    3b30:	0f c0       	rjmp	.+30     	; 0x3b50 <LCD_displayChar+0x576>
    3b32:	88 ec       	ldi	r24, 0xC8	; 200
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	9d 8f       	std	Y+29, r25	; 0x1d
    3b38:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3b3e:	01 97       	sbiw	r24, 0x01	; 1
    3b40:	f1 f7       	brne	.-4      	; 0x3b3e <LCD_displayChar+0x564>
    3b42:	9d 8f       	std	Y+29, r25	; 0x1d
    3b44:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b48:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3b4a:	01 97       	sbiw	r24, 0x01	; 1
    3b4c:	9f 8f       	std	Y+31, r25	; 0x1f
    3b4e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b50:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b52:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3b54:	00 97       	sbiw	r24, 0x00	; 0
    3b56:	69 f7       	brne	.-38     	; 0x3b32 <LCD_displayChar+0x558>
    3b58:	24 c0       	rjmp	.+72     	; 0x3ba2 <LCD_displayChar+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b5a:	68 a1       	ldd	r22, Y+32	; 0x20
    3b5c:	79 a1       	ldd	r23, Y+33	; 0x21
    3b5e:	8a a1       	ldd	r24, Y+34	; 0x22
    3b60:	9b a1       	ldd	r25, Y+35	; 0x23
    3b62:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3b66:	dc 01       	movw	r26, r24
    3b68:	cb 01       	movw	r24, r22
    3b6a:	9f 8f       	std	Y+31, r25	; 0x1f
    3b6c:	8e 8f       	std	Y+30, r24	; 0x1e
    3b6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b70:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3b72:	9b 8f       	std	Y+27, r25	; 0x1b
    3b74:	8a 8f       	std	Y+26, r24	; 0x1a
    3b76:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b78:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b7a:	01 97       	sbiw	r24, 0x01	; 1
    3b7c:	f1 f7       	brne	.-4      	; 0x3b7a <LCD_displayChar+0x5a0>
    3b7e:	9b 8f       	std	Y+27, r25	; 0x1b
    3b80:	8a 8f       	std	Y+26, r24	; 0x1a
    3b82:	0f c0       	rjmp	.+30     	; 0x3ba2 <LCD_displayChar+0x5c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b84:	69 a5       	ldd	r22, Y+41	; 0x29
    3b86:	7a a5       	ldd	r23, Y+42	; 0x2a
    3b88:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b8c:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	88 a7       	std	Y+40, r24	; 0x28
    3b96:	88 a5       	ldd	r24, Y+40	; 0x28
    3b98:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b9a:	89 8d       	ldd	r24, Y+25	; 0x19
    3b9c:	8a 95       	dec	r24
    3b9e:	f1 f7       	brne	.-4      	; 0x3b9c <LCD_displayChar+0x5c2>
    3ba0:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(LCD_TA_DELAY_US);          /* Delay for timing */
    GPIO_ARR_setPinState(LCD_E, LOW);    /* Disable the LCD to latch the character */
    3ba2:	89 e0       	ldi	r24, 0x09	; 9
    3ba4:	60 e0       	ldi	r22, 0x00	; 0
    3ba6:	0e 94 32 0b 	call	0x1664	; 0x1664 <GPIO_ARR_setPinState>
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	a0 e8       	ldi	r26, 0x80	; 128
    3bb0:	bf e3       	ldi	r27, 0x3F	; 63
    3bb2:	8d 8b       	std	Y+21, r24	; 0x15
    3bb4:	9e 8b       	std	Y+22, r25	; 0x16
    3bb6:	af 8b       	std	Y+23, r26	; 0x17
    3bb8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3bba:	6d 89       	ldd	r22, Y+21	; 0x15
    3bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    3bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    3bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    3bc2:	2b ea       	ldi	r18, 0xAB	; 171
    3bc4:	3a ea       	ldi	r19, 0xAA	; 170
    3bc6:	4a e2       	ldi	r20, 0x2A	; 42
    3bc8:	50 e4       	ldi	r21, 0x40	; 64
    3bca:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	89 8b       	std	Y+17, r24	; 0x11
    3bd4:	9a 8b       	std	Y+18, r25	; 0x12
    3bd6:	ab 8b       	std	Y+19, r26	; 0x13
    3bd8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3bda:	69 89       	ldd	r22, Y+17	; 0x11
    3bdc:	7a 89       	ldd	r23, Y+18	; 0x12
    3bde:	8b 89       	ldd	r24, Y+19	; 0x13
    3be0:	9c 89       	ldd	r25, Y+20	; 0x14
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e8       	ldi	r20, 0x80	; 128
    3be8:	5f e3       	ldi	r21, 0x3F	; 63
    3bea:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    3bee:	88 23       	and	r24, r24
    3bf0:	1c f4       	brge	.+6      	; 0x3bf8 <LCD_displayChar+0x61e>
		__ticks = 1;
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	88 8b       	std	Y+16, r24	; 0x10
    3bf6:	91 c0       	rjmp	.+290    	; 0x3d1a <LCD_displayChar+0x740>
	else if (__tmp > 255)
    3bf8:	69 89       	ldd	r22, Y+17	; 0x11
    3bfa:	7a 89       	ldd	r23, Y+18	; 0x12
    3bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    3bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	4f e7       	ldi	r20, 0x7F	; 127
    3c06:	53 e4       	ldi	r21, 0x43	; 67
    3c08:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    3c0c:	18 16       	cp	r1, r24
    3c0e:	0c f0       	brlt	.+2      	; 0x3c12 <LCD_displayChar+0x638>
    3c10:	7b c0       	rjmp	.+246    	; 0x3d08 <LCD_displayChar+0x72e>
	{
		_delay_ms(__us / 1000.0);
    3c12:	6d 89       	ldd	r22, Y+21	; 0x15
    3c14:	7e 89       	ldd	r23, Y+22	; 0x16
    3c16:	8f 89       	ldd	r24, Y+23	; 0x17
    3c18:	98 8d       	ldd	r25, Y+24	; 0x18
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	4a e7       	ldi	r20, 0x7A	; 122
    3c20:	54 e4       	ldi	r21, 0x44	; 68
    3c22:	0e 94 89 03 	call	0x712	; 0x712 <__divsf3>
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22
    3c2a:	8c 87       	std	Y+12, r24	; 0x0c
    3c2c:	9d 87       	std	Y+13, r25	; 0x0d
    3c2e:	ae 87       	std	Y+14, r26	; 0x0e
    3c30:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c32:	6c 85       	ldd	r22, Y+12	; 0x0c
    3c34:	7d 85       	ldd	r23, Y+13	; 0x0d
    3c36:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c38:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	4a ef       	ldi	r20, 0xFA	; 250
    3c40:	54 e4       	ldi	r21, 0x44	; 68
    3c42:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	88 87       	std	Y+8, r24	; 0x08
    3c4c:	99 87       	std	Y+9, r25	; 0x09
    3c4e:	aa 87       	std	Y+10, r26	; 0x0a
    3c50:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3c52:	68 85       	ldd	r22, Y+8	; 0x08
    3c54:	79 85       	ldd	r23, Y+9	; 0x09
    3c56:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c58:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	40 e8       	ldi	r20, 0x80	; 128
    3c60:	5f e3       	ldi	r21, 0x3F	; 63
    3c62:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    3c66:	88 23       	and	r24, r24
    3c68:	2c f4       	brge	.+10     	; 0x3c74 <LCD_displayChar+0x69a>
		__ticks = 1;
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	9f 83       	std	Y+7, r25	; 0x07
    3c70:	8e 83       	std	Y+6, r24	; 0x06
    3c72:	3f c0       	rjmp	.+126    	; 0x3cf2 <LCD_displayChar+0x718>
	else if (__tmp > 65535)
    3c74:	68 85       	ldd	r22, Y+8	; 0x08
    3c76:	79 85       	ldd	r23, Y+9	; 0x09
    3c78:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	3f ef       	ldi	r19, 0xFF	; 255
    3c80:	4f e7       	ldi	r20, 0x7F	; 127
    3c82:	57 e4       	ldi	r21, 0x47	; 71
    3c84:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    3c88:	18 16       	cp	r1, r24
    3c8a:	4c f5       	brge	.+82     	; 0x3cde <LCD_displayChar+0x704>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    3c8e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3c90:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c92:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	40 e2       	ldi	r20, 0x20	; 32
    3c9a:	51 e4       	ldi	r21, 0x41	; 65
    3c9c:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	cb 01       	movw	r24, r22
    3ca4:	bc 01       	movw	r22, r24
    3ca6:	cd 01       	movw	r24, r26
    3ca8:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	9f 83       	std	Y+7, r25	; 0x07
    3cb2:	8e 83       	std	Y+6, r24	; 0x06
    3cb4:	0f c0       	rjmp	.+30     	; 0x3cd4 <LCD_displayChar+0x6fa>
    3cb6:	88 ec       	ldi	r24, 0xC8	; 200
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	9d 83       	std	Y+5, r25	; 0x05
    3cbc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    3cc0:	9d 81       	ldd	r25, Y+5	; 0x05
    3cc2:	01 97       	sbiw	r24, 0x01	; 1
    3cc4:	f1 f7       	brne	.-4      	; 0x3cc2 <LCD_displayChar+0x6e8>
    3cc6:	9d 83       	std	Y+5, r25	; 0x05
    3cc8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cca:	8e 81       	ldd	r24, Y+6	; 0x06
    3ccc:	9f 81       	ldd	r25, Y+7	; 0x07
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	9f 83       	std	Y+7, r25	; 0x07
    3cd2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    3cd6:	9f 81       	ldd	r25, Y+7	; 0x07
    3cd8:	00 97       	sbiw	r24, 0x00	; 0
    3cda:	69 f7       	brne	.-38     	; 0x3cb6 <LCD_displayChar+0x6dc>
    3cdc:	24 c0       	rjmp	.+72     	; 0x3d26 <LCD_displayChar+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cde:	68 85       	ldd	r22, Y+8	; 0x08
    3ce0:	79 85       	ldd	r23, Y+9	; 0x09
    3ce2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ce4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ce6:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	9f 83       	std	Y+7, r25	; 0x07
    3cf0:	8e 83       	std	Y+6, r24	; 0x06
    3cf2:	8e 81       	ldd	r24, Y+6	; 0x06
    3cf4:	9f 81       	ldd	r25, Y+7	; 0x07
    3cf6:	9b 83       	std	Y+3, r25	; 0x03
    3cf8:	8a 83       	std	Y+2, r24	; 0x02
    3cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cfe:	01 97       	sbiw	r24, 0x01	; 1
    3d00:	f1 f7       	brne	.-4      	; 0x3cfe <LCD_displayChar+0x724>
    3d02:	9b 83       	std	Y+3, r25	; 0x03
    3d04:	8a 83       	std	Y+2, r24	; 0x02
    3d06:	0f c0       	rjmp	.+30     	; 0x3d26 <LCD_displayChar+0x74c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d08:	69 89       	ldd	r22, Y+17	; 0x11
    3d0a:	7a 89       	ldd	r23, Y+18	; 0x12
    3d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    3d10:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3d14:	dc 01       	movw	r26, r24
    3d16:	cb 01       	movw	r24, r22
    3d18:	88 8b       	std	Y+16, r24	; 0x10
    3d1a:	88 89       	ldd	r24, Y+16	; 0x10
    3d1c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d1e:	89 81       	ldd	r24, Y+1	; 0x01
    3d20:	8a 95       	dec	r24
    3d22:	f1 f7       	brne	.-4      	; 0x3d20 <LCD_displayChar+0x746>
    3d24:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(LCD_TA_DELAY_US); /* Delay for timing */
	GPIO_ARR_setPinState(LCD_E, LOW); /* Disable the LCD to latch the character */
	_delay_us(LCD_TA_DELAY_US); /* Delay for timing */

#endif
}
    3d26:	cf 59       	subi	r28, 0x9F	; 159
    3d28:	df 4f       	sbci	r29, 0xFF	; 255
    3d2a:	0f b6       	in	r0, 0x3f	; 63
    3d2c:	f8 94       	cli
    3d2e:	de bf       	out	0x3e, r29	; 62
    3d30:	0f be       	out	0x3f, r0	; 63
    3d32:	cd bf       	out	0x3d, r28	; 61
    3d34:	cf 91       	pop	r28
    3d36:	df 91       	pop	r29
    3d38:	1f 91       	pop	r17
    3d3a:	0f 91       	pop	r16
    3d3c:	08 95       	ret

00003d3e <LCD_init>:
 * @brief Initializes the LCD in 8-bit mode with 2 display lines.
 *
 * This function configures the LCD by setting the appropriate modes (2-line, 8-bit),
 * turning off the cursor, and clearing the display. It should be called once during initialization.
 */
void LCD_init() {
    3d3e:	df 93       	push	r29
    3d40:	cf 93       	push	r28
    3d42:	cd b7       	in	r28, 0x3d	; 61
    3d44:	de b7       	in	r29, 0x3e	; 62
    3d46:	2e 97       	sbiw	r28, 0x0e	; 14
    3d48:	0f b6       	in	r0, 0x3f	; 63
    3d4a:	f8 94       	cli
    3d4c:	de bf       	out	0x3e, r29	; 62
    3d4e:	0f be       	out	0x3f, r0	; 63
    3d50:	cd bf       	out	0x3d, r28	; 61
	GPIO_ARR_setPinDirection(LCD_RS, PIN_OUTPUT); /* Set RS pin as output */
    3d52:	88 e0       	ldi	r24, 0x08	; 8
    3d54:	61 e0       	ldi	r22, 0x01	; 1
    3d56:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_ARR_setPinDirection>
	GPIO_ARR_setPinDirection(LCD_E, PIN_OUTPUT); /* Set E pin as output */
    3d5a:	89 e0       	ldi	r24, 0x09	; 9
    3d5c:	61 e0       	ldi	r22, 0x01	; 1
    3d5e:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_ARR_setPinDirection>
    3d62:	80 e0       	ldi	r24, 0x00	; 0
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	a0 ea       	ldi	r26, 0xA0	; 160
    3d68:	b1 e4       	ldi	r27, 0x41	; 65
    3d6a:	8b 87       	std	Y+11, r24	; 0x0b
    3d6c:	9c 87       	std	Y+12, r25	; 0x0c
    3d6e:	ad 87       	std	Y+13, r26	; 0x0d
    3d70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d72:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d74:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d76:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d78:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	4a ef       	ldi	r20, 0xFA	; 250
    3d80:	54 e4       	ldi	r21, 0x44	; 68
    3d82:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    3d86:	dc 01       	movw	r26, r24
    3d88:	cb 01       	movw	r24, r22
    3d8a:	8f 83       	std	Y+7, r24	; 0x07
    3d8c:	98 87       	std	Y+8, r25	; 0x08
    3d8e:	a9 87       	std	Y+9, r26	; 0x09
    3d90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d92:	6f 81       	ldd	r22, Y+7	; 0x07
    3d94:	78 85       	ldd	r23, Y+8	; 0x08
    3d96:	89 85       	ldd	r24, Y+9	; 0x09
    3d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	40 e8       	ldi	r20, 0x80	; 128
    3da0:	5f e3       	ldi	r21, 0x3F	; 63
    3da2:	0e 94 95 04 	call	0x92a	; 0x92a <__ltsf2>
    3da6:	88 23       	and	r24, r24
    3da8:	2c f4       	brge	.+10     	; 0x3db4 <LCD_init+0x76>
		__ticks = 1;
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	9e 83       	std	Y+6, r25	; 0x06
    3db0:	8d 83       	std	Y+5, r24	; 0x05
    3db2:	3f c0       	rjmp	.+126    	; 0x3e32 <LCD_init+0xf4>
	else if (__tmp > 65535)
    3db4:	6f 81       	ldd	r22, Y+7	; 0x07
    3db6:	78 85       	ldd	r23, Y+8	; 0x08
    3db8:	89 85       	ldd	r24, Y+9	; 0x09
    3dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	3f ef       	ldi	r19, 0xFF	; 255
    3dc0:	4f e7       	ldi	r20, 0x7F	; 127
    3dc2:	57 e4       	ldi	r21, 0x47	; 71
    3dc4:	0e 94 35 04 	call	0x86a	; 0x86a <__gtsf2>
    3dc8:	18 16       	cp	r1, r24
    3dca:	4c f5       	brge	.+82     	; 0x3e1e <LCD_init+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dce:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	40 e2       	ldi	r20, 0x20	; 32
    3dda:	51 e4       	ldi	r21, 0x41	; 65
    3ddc:	0e 94 8f 02 	call	0x51e	; 0x51e <__mulsf3>
    3de0:	dc 01       	movw	r26, r24
    3de2:	cb 01       	movw	r24, r22
    3de4:	bc 01       	movw	r22, r24
    3de6:	cd 01       	movw	r24, r26
    3de8:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	9e 83       	std	Y+6, r25	; 0x06
    3df2:	8d 83       	std	Y+5, r24	; 0x05
    3df4:	0f c0       	rjmp	.+30     	; 0x3e14 <LCD_init+0xd6>
    3df6:	88 ec       	ldi	r24, 0xC8	; 200
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	9c 83       	std	Y+4, r25	; 0x04
    3dfc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    3e00:	9c 81       	ldd	r25, Y+4	; 0x04
    3e02:	01 97       	sbiw	r24, 0x01	; 1
    3e04:	f1 f7       	brne	.-4      	; 0x3e02 <LCD_init+0xc4>
    3e06:	9c 83       	std	Y+4, r25	; 0x04
    3e08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e0e:	01 97       	sbiw	r24, 0x01	; 1
    3e10:	9e 83       	std	Y+6, r25	; 0x06
    3e12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e14:	8d 81       	ldd	r24, Y+5	; 0x05
    3e16:	9e 81       	ldd	r25, Y+6	; 0x06
    3e18:	00 97       	sbiw	r24, 0x00	; 0
    3e1a:	69 f7       	brne	.-38     	; 0x3df6 <LCD_init+0xb8>
    3e1c:	14 c0       	rjmp	.+40     	; 0x3e46 <LCD_init+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e20:	78 85       	ldd	r23, Y+8	; 0x08
    3e22:	89 85       	ldd	r24, Y+9	; 0x09
    3e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e26:	0e 94 b9 00 	call	0x172	; 0x172 <__fixunssfsi>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	9e 83       	std	Y+6, r25	; 0x06
    3e30:	8d 83       	std	Y+5, r24	; 0x05
    3e32:	8d 81       	ldd	r24, Y+5	; 0x05
    3e34:	9e 81       	ldd	r25, Y+6	; 0x06
    3e36:	9a 83       	std	Y+2, r25	; 0x02
    3e38:	89 83       	std	Y+1, r24	; 0x01
    3e3a:	89 81       	ldd	r24, Y+1	; 0x01
    3e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e3e:	01 97       	sbiw	r24, 0x01	; 1
    3e40:	f1 f7       	brne	.-4      	; 0x3e3e <LCD_init+0x100>
    3e42:	9a 83       	std	Y+2, r25	; 0x02
    3e44:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20); /* Wait for LCD to power up */
#ifdef LCD_8_BIT_MODE
    GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);  /* Set data port as output */
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	6f ef       	ldi	r22, 0xFF	; 255
    3e4a:	0e 94 d6 06 	call	0xdac	; 0xdac <GPIO_setupPortDirection>
    LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT_COMMAND);  /* Set LCD to 2 lines, 8-bit mode */
    3e4e:	88 e3       	ldi	r24, 0x38	; 56
    3e50:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif

	LCD_sendCommand(LCD_CURSOR_OFF_COMMAND); /* Turn off cursor */
    3e54:	8c e0       	ldi	r24, 0x0C	; 12
    3e56:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_SCREEN_COMMAND); /* Clear the LCD screen */
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_sendCommand>
	LCD_moveCursor(0,0);
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	60 e0       	ldi	r22, 0x00	; 0
    3e64:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <LCD_moveCursor>
}
    3e68:	2e 96       	adiw	r28, 0x0e	; 14
    3e6a:	0f b6       	in	r0, 0x3f	; 63
    3e6c:	f8 94       	cli
    3e6e:	de bf       	out	0x3e, r29	; 62
    3e70:	0f be       	out	0x3f, r0	; 63
    3e72:	cd bf       	out	0x3d, r28	; 61
    3e74:	cf 91       	pop	r28
    3e76:	df 91       	pop	r29
    3e78:	08 95       	ret

00003e7a <LCD_displayString>:
 * of columns allowed by the LCD.
 *
 * @param a_lcdString Pointer to the null-terminated string to be displayed.
 * @return LCD_ERROR Returns SUCSSES if the string fits within the display, otherwise returns EXCEEDMAXCOLUMNS.
 */
uint8 LCD_displayString(const char *a_lcdString) {
    3e7a:	df 93       	push	r29
    3e7c:	cf 93       	push	r28
    3e7e:	00 d0       	rcall	.+0      	; 0x3e80 <LCD_displayString+0x6>
    3e80:	00 d0       	rcall	.+0      	; 0x3e82 <LCD_displayString+0x8>
    3e82:	0f 92       	push	r0
    3e84:	cd b7       	in	r28, 0x3d	; 61
    3e86:	de b7       	in	r29, 0x3e	; 62
    3e88:	9c 83       	std	Y+4, r25	; 0x04
    3e8a:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    3e8c:	1a 82       	std	Y+2, r1	; 0x02
    3e8e:	19 82       	std	Y+1, r1	; 0x01
    3e90:	14 c0       	rjmp	.+40     	; 0x3eba <LCD_displayString+0x40>
	while (a_lcdString[i] != '\0') {
		LCD_displayChar(a_lcdString[i]); /* Send each character in the string */
    3e92:	29 81       	ldd	r18, Y+1	; 0x01
    3e94:	3a 81       	ldd	r19, Y+2	; 0x02
    3e96:	8b 81       	ldd	r24, Y+3	; 0x03
    3e98:	9c 81       	ldd	r25, Y+4	; 0x04
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	e2 0f       	add	r30, r18
    3e9e:	f3 1f       	adc	r31, r19
    3ea0:	80 81       	ld	r24, Z
    3ea2:	0e 94 ed 1a 	call	0x35da	; 0x35da <LCD_displayChar>
		if (i == LCD_MAX_COLUMNS_INDEX) /* Stop if maximum column index is reached */
    3ea6:	89 81       	ldd	r24, Y+1	; 0x01
    3ea8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eaa:	8f 30       	cpi	r24, 0x0F	; 15
    3eac:	91 05       	cpc	r25, r1
    3eae:	79 f0       	breq	.+30     	; 0x3ece <LCD_displayString+0x54>
			break;
		i++;
    3eb0:	89 81       	ldd	r24, Y+1	; 0x01
    3eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3eb4:	01 96       	adiw	r24, 0x01	; 1
    3eb6:	9a 83       	std	Y+2, r25	; 0x02
    3eb8:	89 83       	std	Y+1, r24	; 0x01
 * @param a_lcdString Pointer to the null-terminated string to be displayed.
 * @return LCD_ERROR Returns SUCSSES if the string fits within the display, otherwise returns EXCEEDMAXCOLUMNS.
 */
uint8 LCD_displayString(const char *a_lcdString) {
	int i = 0;
	while (a_lcdString[i] != '\0') {
    3eba:	29 81       	ldd	r18, Y+1	; 0x01
    3ebc:	3a 81       	ldd	r19, Y+2	; 0x02
    3ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ec2:	fc 01       	movw	r30, r24
    3ec4:	e2 0f       	add	r30, r18
    3ec6:	f3 1f       	adc	r31, r19
    3ec8:	80 81       	ld	r24, Z
    3eca:	88 23       	and	r24, r24
    3ecc:	11 f7       	brne	.-60     	; 0x3e92 <LCD_displayString+0x18>
		LCD_displayChar(a_lcdString[i]); /* Send each character in the string */
		if (i == LCD_MAX_COLUMNS_INDEX) /* Stop if maximum column index is reached */
			break;
		i++;
	}
	return i < LCD_COLUMNS ? SUCSSES : EXCEEDMAXCOLUMNS; /* Return appropriate status */
    3ece:	1d 82       	std	Y+5, r1	; 0x05
    3ed0:	89 81       	ldd	r24, Y+1	; 0x01
    3ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ed4:	80 31       	cpi	r24, 0x10	; 16
    3ed6:	91 05       	cpc	r25, r1
    3ed8:	14 f0       	brlt	.+4      	; 0x3ede <LCD_displayString+0x64>
    3eda:	81 e0       	ldi	r24, 0x01	; 1
    3edc:	8d 83       	std	Y+5, r24	; 0x05
    3ede:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3ee0:	0f 90       	pop	r0
    3ee2:	0f 90       	pop	r0
    3ee4:	0f 90       	pop	r0
    3ee6:	0f 90       	pop	r0
    3ee8:	0f 90       	pop	r0
    3eea:	cf 91       	pop	r28
    3eec:	df 91       	pop	r29
    3eee:	08 95       	ret

00003ef0 <LCD_moveCursor>:
 * position command.
 *
 * @param a_lcdRow The row to move the cursor to (0 to LCD_ROWS-1).
 * @param a_lcdCol The column to move the cursor to (0 to LCD_MAX_COLUMNS_INDEX).
 */
void LCD_moveCursor(uint8 a_lcdRow, uint8 a_lcdCol) {
    3ef0:	df 93       	push	r29
    3ef2:	cf 93       	push	r28
    3ef4:	00 d0       	rcall	.+0      	; 0x3ef6 <LCD_moveCursor+0x6>
    3ef6:	00 d0       	rcall	.+0      	; 0x3ef8 <LCD_moveCursor+0x8>
    3ef8:	0f 92       	push	r0
    3efa:	cd b7       	in	r28, 0x3d	; 61
    3efc:	de b7       	in	r29, 0x3e	; 62
    3efe:	8a 83       	std	Y+2, r24	; 0x02
    3f00:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch (a_lcdRow) {
    3f02:	8a 81       	ldd	r24, Y+2	; 0x02
    3f04:	28 2f       	mov	r18, r24
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	3d 83       	std	Y+5, r19	; 0x05
    3f0a:	2c 83       	std	Y+4, r18	; 0x04
    3f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f0e:	9d 81       	ldd	r25, Y+5	; 0x05
    3f10:	81 30       	cpi	r24, 0x01	; 1
    3f12:	91 05       	cpc	r25, r1
    3f14:	c1 f0       	breq	.+48     	; 0x3f46 <LCD_moveCursor+0x56>
    3f16:	2c 81       	ldd	r18, Y+4	; 0x04
    3f18:	3d 81       	ldd	r19, Y+5	; 0x05
    3f1a:	22 30       	cpi	r18, 0x02	; 2
    3f1c:	31 05       	cpc	r19, r1
    3f1e:	2c f4       	brge	.+10     	; 0x3f2a <LCD_moveCursor+0x3a>
    3f20:	8c 81       	ldd	r24, Y+4	; 0x04
    3f22:	9d 81       	ldd	r25, Y+5	; 0x05
    3f24:	00 97       	sbiw	r24, 0x00	; 0
    3f26:	61 f0       	breq	.+24     	; 0x3f40 <LCD_moveCursor+0x50>
    3f28:	19 c0       	rjmp	.+50     	; 0x3f5c <LCD_moveCursor+0x6c>
    3f2a:	2c 81       	ldd	r18, Y+4	; 0x04
    3f2c:	3d 81       	ldd	r19, Y+5	; 0x05
    3f2e:	22 30       	cpi	r18, 0x02	; 2
    3f30:	31 05       	cpc	r19, r1
    3f32:	69 f0       	breq	.+26     	; 0x3f4e <LCD_moveCursor+0x5e>
    3f34:	8c 81       	ldd	r24, Y+4	; 0x04
    3f36:	9d 81       	ldd	r25, Y+5	; 0x05
    3f38:	83 30       	cpi	r24, 0x03	; 3
    3f3a:	91 05       	cpc	r25, r1
    3f3c:	61 f0       	breq	.+24     	; 0x3f56 <LCD_moveCursor+0x66>
    3f3e:	0e c0       	rjmp	.+28     	; 0x3f5c <LCD_moveCursor+0x6c>
	case 0:
		lcd_memory_address = a_lcdCol;
    3f40:	8b 81       	ldd	r24, Y+3	; 0x03
    3f42:	89 83       	std	Y+1, r24	; 0x01
    3f44:	0b c0       	rjmp	.+22     	; 0x3f5c <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = a_lcdCol + LCD_ROW_1_OFFSET;
    3f46:	8b 81       	ldd	r24, Y+3	; 0x03
    3f48:	80 5c       	subi	r24, 0xC0	; 192
    3f4a:	89 83       	std	Y+1, r24	; 0x01
    3f4c:	07 c0       	rjmp	.+14     	; 0x3f5c <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = a_lcdCol + LCD_ROW_2_OFFSET;
    3f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f50:	80 5f       	subi	r24, 0xF0	; 240
    3f52:	89 83       	std	Y+1, r24	; 0x01
    3f54:	03 c0       	rjmp	.+6      	; 0x3f5c <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = a_lcdCol + LCD_ROW_3_OFFSET;
    3f56:	8b 81       	ldd	r24, Y+3	; 0x03
    3f58:	80 5b       	subi	r24, 0xB0	; 176
    3f5a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3f5c:	89 81       	ldd	r24, Y+1	; 0x01
    3f5e:	80 68       	ori	r24, 0x80	; 128
    3f60:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_sendCommand>
}
    3f64:	0f 90       	pop	r0
    3f66:	0f 90       	pop	r0
    3f68:	0f 90       	pop	r0
    3f6a:	0f 90       	pop	r0
    3f6c:	0f 90       	pop	r0
    3f6e:	cf 91       	pop	r28
    3f70:	df 91       	pop	r29
    3f72:	08 95       	ret

00003f74 <LCD_displayStringRowColumn>:
 *
 * @param row The row to start displaying the string (0 to LCD_ROWS-1).
 * @param col The column to start displaying the string (0 to LCD_MAX_COLUMNS_INDEX).
 * @param Str Pointer to the null-terminated string to be displayed.
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    3f74:	df 93       	push	r29
    3f76:	cf 93       	push	r28
    3f78:	00 d0       	rcall	.+0      	; 0x3f7a <LCD_displayStringRowColumn+0x6>
    3f7a:	00 d0       	rcall	.+0      	; 0x3f7c <LCD_displayStringRowColumn+0x8>
    3f7c:	cd b7       	in	r28, 0x3d	; 61
    3f7e:	de b7       	in	r29, 0x3e	; 62
    3f80:	89 83       	std	Y+1, r24	; 0x01
    3f82:	6a 83       	std	Y+2, r22	; 0x02
    3f84:	5c 83       	std	Y+4, r21	; 0x04
    3f86:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* Move to specified row and column */
    3f88:	89 81       	ldd	r24, Y+1	; 0x01
    3f8a:	6a 81       	ldd	r22, Y+2	; 0x02
    3f8c:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <LCD_moveCursor>
	LCD_displayString(Str); /* Display the string at the new cursor location */
    3f90:	8b 81       	ldd	r24, Y+3	; 0x03
    3f92:	9c 81       	ldd	r25, Y+4	; 0x04
    3f94:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <LCD_displayString>
}
    3f98:	0f 90       	pop	r0
    3f9a:	0f 90       	pop	r0
    3f9c:	0f 90       	pop	r0
    3f9e:	0f 90       	pop	r0
    3fa0:	cf 91       	pop	r28
    3fa2:	df 91       	pop	r29
    3fa4:	08 95       	ret

00003fa6 <LCD_intgerToString>:
 * This function converts an integer to its ASCII string representation and
 * displays the string on the LCD.
 *
 * @param data The integer value to be displayed.
 */
void LCD_intgerToString(int data) {
    3fa6:	df 93       	push	r29
    3fa8:	cf 93       	push	r28
    3faa:	cd b7       	in	r28, 0x3d	; 61
    3fac:	de b7       	in	r29, 0x3e	; 62
    3fae:	62 97       	sbiw	r28, 0x12	; 18
    3fb0:	0f b6       	in	r0, 0x3f	; 63
    3fb2:	f8 94       	cli
    3fb4:	de bf       	out	0x3e, r29	; 62
    3fb6:	0f be       	out	0x3f, r0	; 63
    3fb8:	cd bf       	out	0x3d, r28	; 61
    3fba:	9a 8b       	std	Y+18, r25	; 0x12
    3fbc:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* Buffer to hold ASCII representation of the integer */
	itoa(data, buff, 10); /* Convert integer to string (base 10) */
    3fbe:	89 89       	ldd	r24, Y+17	; 0x11
    3fc0:	9a 89       	ldd	r25, Y+18	; 0x12
    3fc2:	9e 01       	movw	r18, r28
    3fc4:	2f 5f       	subi	r18, 0xFF	; 255
    3fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    3fc8:	b9 01       	movw	r22, r18
    3fca:	4a e0       	ldi	r20, 0x0A	; 10
    3fcc:	50 e0       	ldi	r21, 0x00	; 0
    3fce:	0e 94 07 21 	call	0x420e	; 0x420e <itoa>
	LCD_displayString(buff); /* Display the resulting string on the LCD */
    3fd2:	ce 01       	movw	r24, r28
    3fd4:	01 96       	adiw	r24, 0x01	; 1
    3fd6:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <LCD_displayString>
}
    3fda:	62 96       	adiw	r28, 0x12	; 18
    3fdc:	0f b6       	in	r0, 0x3f	; 63
    3fde:	f8 94       	cli
    3fe0:	de bf       	out	0x3e, r29	; 62
    3fe2:	0f be       	out	0x3f, r0	; 63
    3fe4:	cd bf       	out	0x3d, r28	; 61
    3fe6:	cf 91       	pop	r28
    3fe8:	df 91       	pop	r29
    3fea:	08 95       	ret

00003fec <LCD_clearScreen>:
 * @brief Clears the entire LCD display.
 *
 * This function sends the clear screen command to the LCD, clearing all the displayed
 * characters and resetting the cursor to the home position.
 */
void LCD_clearScreen(void) {
    3fec:	df 93       	push	r29
    3fee:	cf 93       	push	r28
    3ff0:	cd b7       	in	r28, 0x3d	; 61
    3ff2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN_COMMAND); /* Send clear display command */
    3ff4:	81 e0       	ldi	r24, 0x01	; 1
    3ff6:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <LCD_sendCommand>
}
    3ffa:	cf 91       	pop	r28
    3ffc:	df 91       	pop	r29
    3ffe:	08 95       	ret

00004000 <PIR_init>:
 *  Created on: 5 Nov 2024
 *      Author: MSI
 */
#include"../mcal/gpio.h"
#include"pir.h"
void PIR_init(){
    4000:	df 93       	push	r29
    4002:	cf 93       	push	r28
    4004:	cd b7       	in	r28, 0x3d	; 61
    4006:	de b7       	in	r29, 0x3e	; 62
GPIO_ARR_setPinDirection(PIR_PIN,PIN_INPUT);
    4008:	82 e1       	ldi	r24, 0x12	; 18
    400a:	60 e0       	ldi	r22, 0x00	; 0
    400c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <GPIO_ARR_setPinDirection>

}
    4010:	cf 91       	pop	r28
    4012:	df 91       	pop	r29
    4014:	08 95       	ret

00004016 <PIR_read>:
uint8 PIR_read(){
    4016:	df 93       	push	r29
    4018:	cf 93       	push	r28
    401a:	cd b7       	in	r28, 0x3d	; 61
    401c:	de b7       	in	r29, 0x3e	; 62
	return GPIO_ARR_readPin(PIR_PIN);
    401e:	82 e1       	ldi	r24, 0x12	; 18
    4020:	0e 94 4e 0c 	call	0x189c	; 0x189c <GPIO_ARR_readPin>
}
    4024:	cf 91       	pop	r28
    4026:	df 91       	pop	r29
    4028:	08 95       	ret

0000402a <main>:
#include "../hal/buzzer.h"
#include<util/delay.h>
#include "../hal/pir.h"


int main() {
    402a:	df 93       	push	r29
    402c:	cf 93       	push	r28
    402e:	00 d0       	rcall	.+0      	; 0x4030 <main+0x6>
    4030:	00 d0       	rcall	.+0      	; 0x4032 <main+0x8>
    4032:	00 d0       	rcall	.+0      	; 0x4034 <main+0xa>
    4034:	cd b7       	in	r28, 0x3d	; 61
    4036:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    4038:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <LCD_init>
	HMI_init();
    403c:	0e 94 b2 14 	call	0x2964	; 0x2964 <HMI_init>

Buzzer_init();
    4040:	0e 94 a7 12 	call	0x254e	; 0x254e <Buzzer_init>
	uint8 *l_ptr2pass;
	for (;;) {
		/* Wait for command from HMI */
		LCD_intgerToString(PIR_read());
    4044:	0e 94 0b 20 	call	0x4016	; 0x4016 <PIR_read>
    4048:	88 2f       	mov	r24, r24
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <LCD_intgerToString>
		uint8 l_receivedCommand = HMI_ready();
    4050:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <HMI_ready>
    4054:	8a 83       	std	Y+2, r24	; 0x02

		switch (l_receivedCommand) {
    4056:	8a 81       	ldd	r24, Y+2	; 0x02
    4058:	28 2f       	mov	r18, r24
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	3e 83       	std	Y+6, r19	; 0x06
    405e:	2d 83       	std	Y+5, r18	; 0x05
    4060:	8d 81       	ldd	r24, Y+5	; 0x05
    4062:	9e 81       	ldd	r25, Y+6	; 0x06
    4064:	85 35       	cpi	r24, 0x55	; 85
    4066:	91 05       	cpc	r25, r1
    4068:	e1 f1       	breq	.+120    	; 0x40e2 <main+0xb8>
    406a:	2d 81       	ldd	r18, Y+5	; 0x05
    406c:	3e 81       	ldd	r19, Y+6	; 0x06
    406e:	26 35       	cpi	r18, 0x56	; 86
    4070:	31 05       	cpc	r19, r1
    4072:	5c f4       	brge	.+22     	; 0x408a <main+0x60>
    4074:	8d 81       	ldd	r24, Y+5	; 0x05
    4076:	9e 81       	ldd	r25, Y+6	; 0x06
    4078:	82 34       	cpi	r24, 0x42	; 66
    407a:	91 05       	cpc	r25, r1
    407c:	d1 f1       	breq	.+116    	; 0x40f2 <main+0xc8>
    407e:	2d 81       	ldd	r18, Y+5	; 0x05
    4080:	3e 81       	ldd	r19, Y+6	; 0x06
    4082:	24 34       	cpi	r18, 0x44	; 68
    4084:	31 05       	cpc	r19, r1
    4086:	81 f1       	breq	.+96     	; 0x40e8 <main+0xbe>
    4088:	3a c0       	rjmp	.+116    	; 0x40fe <main+0xd4>
    408a:	8d 81       	ldd	r24, Y+5	; 0x05
    408c:	9e 81       	ldd	r25, Y+6	; 0x06
    408e:	82 36       	cpi	r24, 0x62	; 98
    4090:	91 05       	cpc	r25, r1
    4092:	91 f1       	breq	.+100    	; 0x40f8 <main+0xce>
    4094:	2d 81       	ldd	r18, Y+5	; 0x05
    4096:	3e 81       	ldd	r19, Y+6	; 0x06
    4098:	20 37       	cpi	r18, 0x70	; 112
    409a:	31 05       	cpc	r19, r1
    409c:	81 f5       	brne	.+96     	; 0x40fe <main+0xd4>
		case HMI_WAIT_PASS:
			l_ptr2pass = HMI_checkPassMatch();
    409e:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <HMI_checkPassMatch>
    40a2:	9c 83       	std	Y+4, r25	; 0x04
    40a4:	8b 83       	std	Y+3, r24	; 0x03
			if (l_ptr2pass != NULL_PTR) {
    40a6:	8b 81       	ldd	r24, Y+3	; 0x03
    40a8:	9c 81       	ldd	r25, Y+4	; 0x04
    40aa:	00 97       	sbiw	r24, 0x00	; 0
    40ac:	31 f0       	breq	.+12     	; 0x40ba <main+0x90>
				MEM_savePass(l_ptr2pass);
    40ae:	8b 81       	ldd	r24, Y+3	; 0x03
    40b0:	9c 81       	ldd	r25, Y+4	; 0x04
    40b2:	0e 94 ed 15 	call	0x2bda	; 0x2bda <MEM_savePass>
				l_ptr2pass = NULL_PTR;
    40b6:	1c 82       	std	Y+4, r1	; 0x04
    40b8:	1b 82       	std	Y+3, r1	; 0x03
			}
			LCD_moveCursor(0, 0);
    40ba:	80 e0       	ldi	r24, 0x00	; 0
    40bc:	60 e0       	ldi	r22, 0x00	; 0
    40be:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <LCD_moveCursor>
			for (uint8 i = 0; i < 5; i++)
    40c2:	19 82       	std	Y+1, r1	; 0x01
    40c4:	0a c0       	rjmp	.+20     	; 0x40da <main+0xb0>

			{
				LCD_intgerToString(MEM_getPassElem(i));
    40c6:	89 81       	ldd	r24, Y+1	; 0x01
    40c8:	0e 94 d7 15 	call	0x2bae	; 0x2bae <MEM_getPassElem>
    40cc:	88 2f       	mov	r24, r24
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <LCD_intgerToString>
			if (l_ptr2pass != NULL_PTR) {
				MEM_savePass(l_ptr2pass);
				l_ptr2pass = NULL_PTR;
			}
			LCD_moveCursor(0, 0);
			for (uint8 i = 0; i < 5; i++)
    40d4:	89 81       	ldd	r24, Y+1	; 0x01
    40d6:	8f 5f       	subi	r24, 0xFF	; 255
    40d8:	89 83       	std	Y+1, r24	; 0x01
    40da:	89 81       	ldd	r24, Y+1	; 0x01
    40dc:	85 30       	cpi	r24, 0x05	; 5
    40de:	98 f3       	brcs	.-26     	; 0x40c6 <main+0x9c>
    40e0:	b1 cf       	rjmp	.-158    	; 0x4044 <main+0x1a>

			}

			break;
		case HMI_WAIT_PASS_MEM:
			HMI_checkPass();
    40e2:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <HMI_checkPass>
    40e6:	ae cf       	rjmp	.-164    	; 0x4044 <main+0x1a>

			break;
		case HMI_OPEN_DOOR:
			OpenDoor();
    40e8:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <OpenDoor>
			 waitForPeople();
    40ec:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <waitForPeople>
    40f0:	a9 cf       	rjmp	.-174    	; 0x4044 <main+0x1a>
			break;
		case BUZZER_ON:
			Buzzer_on();
    40f2:	0e 94 b2 12 	call	0x2564	; 0x2564 <Buzzer_on>
    40f6:	a6 cf       	rjmp	.-180    	; 0x4044 <main+0x1a>
			break;
		case BUZZER_OFF:
					Buzzer_off();
    40f8:	0e 94 bd 12 	call	0x257a	; 0x257a <Buzzer_off>
    40fc:	a3 cf       	rjmp	.-186    	; 0x4044 <main+0x1a>
					break;
		default:
			LCD_displayStringRowColumn(0, 0, "Unknown Command");
    40fe:	29 e8       	ldi	r18, 0x89	; 137
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	80 e0       	ldi	r24, 0x00	; 0
    4104:	60 e0       	ldi	r22, 0x00	; 0
    4106:	a9 01       	movw	r20, r18
    4108:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <LCD_displayStringRowColumn>
    410c:	9b cf       	rjmp	.-202    	; 0x4044 <main+0x1a>

0000410e <__divmodhi4>:
    410e:	97 fb       	bst	r25, 7
    4110:	09 2e       	mov	r0, r25
    4112:	07 26       	eor	r0, r23
    4114:	0a d0       	rcall	.+20     	; 0x412a <__divmodhi4_neg1>
    4116:	77 fd       	sbrc	r23, 7
    4118:	04 d0       	rcall	.+8      	; 0x4122 <__divmodhi4_neg2>
    411a:	2e d0       	rcall	.+92     	; 0x4178 <__udivmodhi4>
    411c:	06 d0       	rcall	.+12     	; 0x412a <__divmodhi4_neg1>
    411e:	00 20       	and	r0, r0
    4120:	1a f4       	brpl	.+6      	; 0x4128 <__divmodhi4_exit>

00004122 <__divmodhi4_neg2>:
    4122:	70 95       	com	r23
    4124:	61 95       	neg	r22
    4126:	7f 4f       	sbci	r23, 0xFF	; 255

00004128 <__divmodhi4_exit>:
    4128:	08 95       	ret

0000412a <__divmodhi4_neg1>:
    412a:	f6 f7       	brtc	.-4      	; 0x4128 <__divmodhi4_exit>
    412c:	90 95       	com	r25
    412e:	81 95       	neg	r24
    4130:	9f 4f       	sbci	r25, 0xFF	; 255
    4132:	08 95       	ret

00004134 <__udivmodsi4>:
    4134:	a1 e2       	ldi	r26, 0x21	; 33
    4136:	1a 2e       	mov	r1, r26
    4138:	aa 1b       	sub	r26, r26
    413a:	bb 1b       	sub	r27, r27
    413c:	fd 01       	movw	r30, r26
    413e:	0d c0       	rjmp	.+26     	; 0x415a <__udivmodsi4_ep>

00004140 <__udivmodsi4_loop>:
    4140:	aa 1f       	adc	r26, r26
    4142:	bb 1f       	adc	r27, r27
    4144:	ee 1f       	adc	r30, r30
    4146:	ff 1f       	adc	r31, r31
    4148:	a2 17       	cp	r26, r18
    414a:	b3 07       	cpc	r27, r19
    414c:	e4 07       	cpc	r30, r20
    414e:	f5 07       	cpc	r31, r21
    4150:	20 f0       	brcs	.+8      	; 0x415a <__udivmodsi4_ep>
    4152:	a2 1b       	sub	r26, r18
    4154:	b3 0b       	sbc	r27, r19
    4156:	e4 0b       	sbc	r30, r20
    4158:	f5 0b       	sbc	r31, r21

0000415a <__udivmodsi4_ep>:
    415a:	66 1f       	adc	r22, r22
    415c:	77 1f       	adc	r23, r23
    415e:	88 1f       	adc	r24, r24
    4160:	99 1f       	adc	r25, r25
    4162:	1a 94       	dec	r1
    4164:	69 f7       	brne	.-38     	; 0x4140 <__udivmodsi4_loop>
    4166:	60 95       	com	r22
    4168:	70 95       	com	r23
    416a:	80 95       	com	r24
    416c:	90 95       	com	r25
    416e:	9b 01       	movw	r18, r22
    4170:	ac 01       	movw	r20, r24
    4172:	bd 01       	movw	r22, r26
    4174:	cf 01       	movw	r24, r30
    4176:	08 95       	ret

00004178 <__udivmodhi4>:
    4178:	aa 1b       	sub	r26, r26
    417a:	bb 1b       	sub	r27, r27
    417c:	51 e1       	ldi	r21, 0x11	; 17
    417e:	07 c0       	rjmp	.+14     	; 0x418e <__udivmodhi4_ep>

00004180 <__udivmodhi4_loop>:
    4180:	aa 1f       	adc	r26, r26
    4182:	bb 1f       	adc	r27, r27
    4184:	a6 17       	cp	r26, r22
    4186:	b7 07       	cpc	r27, r23
    4188:	10 f0       	brcs	.+4      	; 0x418e <__udivmodhi4_ep>
    418a:	a6 1b       	sub	r26, r22
    418c:	b7 0b       	sbc	r27, r23

0000418e <__udivmodhi4_ep>:
    418e:	88 1f       	adc	r24, r24
    4190:	99 1f       	adc	r25, r25
    4192:	5a 95       	dec	r21
    4194:	a9 f7       	brne	.-22     	; 0x4180 <__udivmodhi4_loop>
    4196:	80 95       	com	r24
    4198:	90 95       	com	r25
    419a:	bc 01       	movw	r22, r24
    419c:	cd 01       	movw	r24, r26
    419e:	08 95       	ret

000041a0 <__prologue_saves__>:
    41a0:	2f 92       	push	r2
    41a2:	3f 92       	push	r3
    41a4:	4f 92       	push	r4
    41a6:	5f 92       	push	r5
    41a8:	6f 92       	push	r6
    41aa:	7f 92       	push	r7
    41ac:	8f 92       	push	r8
    41ae:	9f 92       	push	r9
    41b0:	af 92       	push	r10
    41b2:	bf 92       	push	r11
    41b4:	cf 92       	push	r12
    41b6:	df 92       	push	r13
    41b8:	ef 92       	push	r14
    41ba:	ff 92       	push	r15
    41bc:	0f 93       	push	r16
    41be:	1f 93       	push	r17
    41c0:	cf 93       	push	r28
    41c2:	df 93       	push	r29
    41c4:	cd b7       	in	r28, 0x3d	; 61
    41c6:	de b7       	in	r29, 0x3e	; 62
    41c8:	ca 1b       	sub	r28, r26
    41ca:	db 0b       	sbc	r29, r27
    41cc:	0f b6       	in	r0, 0x3f	; 63
    41ce:	f8 94       	cli
    41d0:	de bf       	out	0x3e, r29	; 62
    41d2:	0f be       	out	0x3f, r0	; 63
    41d4:	cd bf       	out	0x3d, r28	; 61
    41d6:	09 94       	ijmp

000041d8 <__epilogue_restores__>:
    41d8:	2a 88       	ldd	r2, Y+18	; 0x12
    41da:	39 88       	ldd	r3, Y+17	; 0x11
    41dc:	48 88       	ldd	r4, Y+16	; 0x10
    41de:	5f 84       	ldd	r5, Y+15	; 0x0f
    41e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    41e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    41e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    41e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    41e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    41ea:	b9 84       	ldd	r11, Y+9	; 0x09
    41ec:	c8 84       	ldd	r12, Y+8	; 0x08
    41ee:	df 80       	ldd	r13, Y+7	; 0x07
    41f0:	ee 80       	ldd	r14, Y+6	; 0x06
    41f2:	fd 80       	ldd	r15, Y+5	; 0x05
    41f4:	0c 81       	ldd	r16, Y+4	; 0x04
    41f6:	1b 81       	ldd	r17, Y+3	; 0x03
    41f8:	aa 81       	ldd	r26, Y+2	; 0x02
    41fa:	b9 81       	ldd	r27, Y+1	; 0x01
    41fc:	ce 0f       	add	r28, r30
    41fe:	d1 1d       	adc	r29, r1
    4200:	0f b6       	in	r0, 0x3f	; 63
    4202:	f8 94       	cli
    4204:	de bf       	out	0x3e, r29	; 62
    4206:	0f be       	out	0x3f, r0	; 63
    4208:	cd bf       	out	0x3d, r28	; 61
    420a:	ed 01       	movw	r28, r26
    420c:	08 95       	ret

0000420e <itoa>:
    420e:	fb 01       	movw	r30, r22
    4210:	9f 01       	movw	r18, r30
    4212:	e8 94       	clt
    4214:	42 30       	cpi	r20, 0x02	; 2
    4216:	c4 f0       	brlt	.+48     	; 0x4248 <itoa+0x3a>
    4218:	45 32       	cpi	r20, 0x25	; 37
    421a:	b4 f4       	brge	.+44     	; 0x4248 <itoa+0x3a>
    421c:	4a 30       	cpi	r20, 0x0A	; 10
    421e:	29 f4       	brne	.+10     	; 0x422a <itoa+0x1c>
    4220:	97 fb       	bst	r25, 7
    4222:	1e f4       	brtc	.+6      	; 0x422a <itoa+0x1c>
    4224:	90 95       	com	r25
    4226:	81 95       	neg	r24
    4228:	9f 4f       	sbci	r25, 0xFF	; 255
    422a:	64 2f       	mov	r22, r20
    422c:	77 27       	eor	r23, r23
    422e:	0e 94 bc 20 	call	0x4178	; 0x4178 <__udivmodhi4>
    4232:	80 5d       	subi	r24, 0xD0	; 208
    4234:	8a 33       	cpi	r24, 0x3A	; 58
    4236:	0c f0       	brlt	.+2      	; 0x423a <itoa+0x2c>
    4238:	89 5d       	subi	r24, 0xD9	; 217
    423a:	81 93       	st	Z+, r24
    423c:	cb 01       	movw	r24, r22
    423e:	00 97       	sbiw	r24, 0x00	; 0
    4240:	a1 f7       	brne	.-24     	; 0x422a <itoa+0x1c>
    4242:	16 f4       	brtc	.+4      	; 0x4248 <itoa+0x3a>
    4244:	5d e2       	ldi	r21, 0x2D	; 45
    4246:	51 93       	st	Z+, r21
    4248:	10 82       	st	Z, r1
    424a:	c9 01       	movw	r24, r18
    424c:	0c 94 28 21 	jmp	0x4250	; 0x4250 <strrev>

00004250 <strrev>:
    4250:	dc 01       	movw	r26, r24
    4252:	fc 01       	movw	r30, r24
    4254:	67 2f       	mov	r22, r23
    4256:	71 91       	ld	r23, Z+
    4258:	77 23       	and	r23, r23
    425a:	e1 f7       	brne	.-8      	; 0x4254 <strrev+0x4>
    425c:	32 97       	sbiw	r30, 0x02	; 2
    425e:	04 c0       	rjmp	.+8      	; 0x4268 <strrev+0x18>
    4260:	7c 91       	ld	r23, X
    4262:	6d 93       	st	X+, r22
    4264:	70 83       	st	Z, r23
    4266:	62 91       	ld	r22, -Z
    4268:	ae 17       	cp	r26, r30
    426a:	bf 07       	cpc	r27, r31
    426c:	c8 f3       	brcs	.-14     	; 0x4260 <strrev+0x10>
    426e:	08 95       	ret

00004270 <_exit>:
    4270:	f8 94       	cli

00004272 <__stop_program>:
    4272:	ff cf       	rjmp	.-2      	; 0x4272 <__stop_program>
